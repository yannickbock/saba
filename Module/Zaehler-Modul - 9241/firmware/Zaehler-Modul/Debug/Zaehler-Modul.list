
Zaehler-Modul.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062f4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  080063ac  080063ac  000163ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064e8  080064e8  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  080064e8  080064e8  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064e8  080064e8  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064e8  080064e8  000164e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064ec  080064ec  000164ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  080064f0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000048  08006538  00020048  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08006538  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0e5  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f9b  00000000  00000000  0002e155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  000300f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  00030e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d4a  00000000  00000000  00031a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e921  00000000  00000000  000477b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ca54  00000000  00000000  000560d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e2b27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031dc  00000000  00000000  000e2b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000048 	.word	0x20000048
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006394 	.word	0x08006394

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000004c 	.word	0x2000004c
 80000fc:	08006394 	.word	0x08006394

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_lmul>:
 80003ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003ee:	0415      	lsls	r5, r2, #16
 80003f0:	0c2d      	lsrs	r5, r5, #16
 80003f2:	000f      	movs	r7, r1
 80003f4:	0001      	movs	r1, r0
 80003f6:	002e      	movs	r6, r5
 80003f8:	46c6      	mov	lr, r8
 80003fa:	4684      	mov	ip, r0
 80003fc:	0400      	lsls	r0, r0, #16
 80003fe:	0c14      	lsrs	r4, r2, #16
 8000400:	0c00      	lsrs	r0, r0, #16
 8000402:	0c09      	lsrs	r1, r1, #16
 8000404:	4346      	muls	r6, r0
 8000406:	434d      	muls	r5, r1
 8000408:	4360      	muls	r0, r4
 800040a:	4361      	muls	r1, r4
 800040c:	1940      	adds	r0, r0, r5
 800040e:	0c34      	lsrs	r4, r6, #16
 8000410:	1824      	adds	r4, r4, r0
 8000412:	b500      	push	{lr}
 8000414:	42a5      	cmp	r5, r4
 8000416:	d903      	bls.n	8000420 <__aeabi_lmul+0x34>
 8000418:	2080      	movs	r0, #128	; 0x80
 800041a:	0240      	lsls	r0, r0, #9
 800041c:	4680      	mov	r8, r0
 800041e:	4441      	add	r1, r8
 8000420:	0c25      	lsrs	r5, r4, #16
 8000422:	186d      	adds	r5, r5, r1
 8000424:	4661      	mov	r1, ip
 8000426:	4359      	muls	r1, r3
 8000428:	437a      	muls	r2, r7
 800042a:	0430      	lsls	r0, r6, #16
 800042c:	1949      	adds	r1, r1, r5
 800042e:	0424      	lsls	r4, r4, #16
 8000430:	0c00      	lsrs	r0, r0, #16
 8000432:	1820      	adds	r0, r4, r0
 8000434:	1889      	adds	r1, r1, r2
 8000436:	bc80      	pop	{r7}
 8000438:	46b8      	mov	r8, r7
 800043a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800043c <__aeabi_dadd>:
 800043c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800043e:	464f      	mov	r7, r9
 8000440:	46d6      	mov	lr, sl
 8000442:	4646      	mov	r6, r8
 8000444:	000d      	movs	r5, r1
 8000446:	0001      	movs	r1, r0
 8000448:	0018      	movs	r0, r3
 800044a:	b5c0      	push	{r6, r7, lr}
 800044c:	0017      	movs	r7, r2
 800044e:	032b      	lsls	r3, r5, #12
 8000450:	0a5a      	lsrs	r2, r3, #9
 8000452:	0f4b      	lsrs	r3, r1, #29
 8000454:	4313      	orrs	r3, r2
 8000456:	00ca      	lsls	r2, r1, #3
 8000458:	4691      	mov	r9, r2
 800045a:	0302      	lsls	r2, r0, #12
 800045c:	006e      	lsls	r6, r5, #1
 800045e:	0041      	lsls	r1, r0, #1
 8000460:	0a52      	lsrs	r2, r2, #9
 8000462:	0fec      	lsrs	r4, r5, #31
 8000464:	0f7d      	lsrs	r5, r7, #29
 8000466:	4315      	orrs	r5, r2
 8000468:	0d76      	lsrs	r6, r6, #21
 800046a:	0d49      	lsrs	r1, r1, #21
 800046c:	0fc0      	lsrs	r0, r0, #31
 800046e:	4682      	mov	sl, r0
 8000470:	46ac      	mov	ip, r5
 8000472:	00ff      	lsls	r7, r7, #3
 8000474:	1a72      	subs	r2, r6, r1
 8000476:	4284      	cmp	r4, r0
 8000478:	d100      	bne.n	800047c <__aeabi_dadd+0x40>
 800047a:	e098      	b.n	80005ae <__aeabi_dadd+0x172>
 800047c:	2a00      	cmp	r2, #0
 800047e:	dc00      	bgt.n	8000482 <__aeabi_dadd+0x46>
 8000480:	e081      	b.n	8000586 <__aeabi_dadd+0x14a>
 8000482:	2900      	cmp	r1, #0
 8000484:	d100      	bne.n	8000488 <__aeabi_dadd+0x4c>
 8000486:	e0b6      	b.n	80005f6 <__aeabi_dadd+0x1ba>
 8000488:	49c9      	ldr	r1, [pc, #804]	; (80007b0 <__aeabi_dadd+0x374>)
 800048a:	428e      	cmp	r6, r1
 800048c:	d100      	bne.n	8000490 <__aeabi_dadd+0x54>
 800048e:	e172      	b.n	8000776 <__aeabi_dadd+0x33a>
 8000490:	2180      	movs	r1, #128	; 0x80
 8000492:	0028      	movs	r0, r5
 8000494:	0409      	lsls	r1, r1, #16
 8000496:	4308      	orrs	r0, r1
 8000498:	4684      	mov	ip, r0
 800049a:	2a38      	cmp	r2, #56	; 0x38
 800049c:	dd00      	ble.n	80004a0 <__aeabi_dadd+0x64>
 800049e:	e15e      	b.n	800075e <__aeabi_dadd+0x322>
 80004a0:	2a1f      	cmp	r2, #31
 80004a2:	dd00      	ble.n	80004a6 <__aeabi_dadd+0x6a>
 80004a4:	e1ee      	b.n	8000884 <__aeabi_dadd+0x448>
 80004a6:	2020      	movs	r0, #32
 80004a8:	0039      	movs	r1, r7
 80004aa:	4665      	mov	r5, ip
 80004ac:	1a80      	subs	r0, r0, r2
 80004ae:	4087      	lsls	r7, r0
 80004b0:	40d1      	lsrs	r1, r2
 80004b2:	4085      	lsls	r5, r0
 80004b4:	430d      	orrs	r5, r1
 80004b6:	0039      	movs	r1, r7
 80004b8:	1e4f      	subs	r7, r1, #1
 80004ba:	41b9      	sbcs	r1, r7
 80004bc:	4667      	mov	r7, ip
 80004be:	40d7      	lsrs	r7, r2
 80004c0:	4329      	orrs	r1, r5
 80004c2:	1bdb      	subs	r3, r3, r7
 80004c4:	464a      	mov	r2, r9
 80004c6:	1a55      	subs	r5, r2, r1
 80004c8:	45a9      	cmp	r9, r5
 80004ca:	4189      	sbcs	r1, r1
 80004cc:	4249      	negs	r1, r1
 80004ce:	1a5b      	subs	r3, r3, r1
 80004d0:	4698      	mov	r8, r3
 80004d2:	4643      	mov	r3, r8
 80004d4:	021b      	lsls	r3, r3, #8
 80004d6:	d400      	bmi.n	80004da <__aeabi_dadd+0x9e>
 80004d8:	e0cc      	b.n	8000674 <__aeabi_dadd+0x238>
 80004da:	4643      	mov	r3, r8
 80004dc:	025b      	lsls	r3, r3, #9
 80004de:	0a5b      	lsrs	r3, r3, #9
 80004e0:	4698      	mov	r8, r3
 80004e2:	4643      	mov	r3, r8
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d100      	bne.n	80004ea <__aeabi_dadd+0xae>
 80004e8:	e12c      	b.n	8000744 <__aeabi_dadd+0x308>
 80004ea:	4640      	mov	r0, r8
 80004ec:	f001 fc82 	bl	8001df4 <__clzsi2>
 80004f0:	0001      	movs	r1, r0
 80004f2:	3908      	subs	r1, #8
 80004f4:	2220      	movs	r2, #32
 80004f6:	0028      	movs	r0, r5
 80004f8:	4643      	mov	r3, r8
 80004fa:	1a52      	subs	r2, r2, r1
 80004fc:	408b      	lsls	r3, r1
 80004fe:	40d0      	lsrs	r0, r2
 8000500:	408d      	lsls	r5, r1
 8000502:	4303      	orrs	r3, r0
 8000504:	428e      	cmp	r6, r1
 8000506:	dd00      	ble.n	800050a <__aeabi_dadd+0xce>
 8000508:	e117      	b.n	800073a <__aeabi_dadd+0x2fe>
 800050a:	1b8e      	subs	r6, r1, r6
 800050c:	1c72      	adds	r2, r6, #1
 800050e:	2a1f      	cmp	r2, #31
 8000510:	dd00      	ble.n	8000514 <__aeabi_dadd+0xd8>
 8000512:	e1a7      	b.n	8000864 <__aeabi_dadd+0x428>
 8000514:	2120      	movs	r1, #32
 8000516:	0018      	movs	r0, r3
 8000518:	002e      	movs	r6, r5
 800051a:	1a89      	subs	r1, r1, r2
 800051c:	408d      	lsls	r5, r1
 800051e:	4088      	lsls	r0, r1
 8000520:	40d6      	lsrs	r6, r2
 8000522:	40d3      	lsrs	r3, r2
 8000524:	1e69      	subs	r1, r5, #1
 8000526:	418d      	sbcs	r5, r1
 8000528:	4330      	orrs	r0, r6
 800052a:	4698      	mov	r8, r3
 800052c:	2600      	movs	r6, #0
 800052e:	4305      	orrs	r5, r0
 8000530:	076b      	lsls	r3, r5, #29
 8000532:	d009      	beq.n	8000548 <__aeabi_dadd+0x10c>
 8000534:	230f      	movs	r3, #15
 8000536:	402b      	ands	r3, r5
 8000538:	2b04      	cmp	r3, #4
 800053a:	d005      	beq.n	8000548 <__aeabi_dadd+0x10c>
 800053c:	1d2b      	adds	r3, r5, #4
 800053e:	42ab      	cmp	r3, r5
 8000540:	41ad      	sbcs	r5, r5
 8000542:	426d      	negs	r5, r5
 8000544:	44a8      	add	r8, r5
 8000546:	001d      	movs	r5, r3
 8000548:	4643      	mov	r3, r8
 800054a:	021b      	lsls	r3, r3, #8
 800054c:	d400      	bmi.n	8000550 <__aeabi_dadd+0x114>
 800054e:	e094      	b.n	800067a <__aeabi_dadd+0x23e>
 8000550:	4b97      	ldr	r3, [pc, #604]	; (80007b0 <__aeabi_dadd+0x374>)
 8000552:	1c72      	adds	r2, r6, #1
 8000554:	429a      	cmp	r2, r3
 8000556:	d100      	bne.n	800055a <__aeabi_dadd+0x11e>
 8000558:	e09d      	b.n	8000696 <__aeabi_dadd+0x25a>
 800055a:	4641      	mov	r1, r8
 800055c:	4b95      	ldr	r3, [pc, #596]	; (80007b4 <__aeabi_dadd+0x378>)
 800055e:	08ed      	lsrs	r5, r5, #3
 8000560:	4019      	ands	r1, r3
 8000562:	000b      	movs	r3, r1
 8000564:	0552      	lsls	r2, r2, #21
 8000566:	0749      	lsls	r1, r1, #29
 8000568:	025b      	lsls	r3, r3, #9
 800056a:	4329      	orrs	r1, r5
 800056c:	0b1b      	lsrs	r3, r3, #12
 800056e:	0d52      	lsrs	r2, r2, #21
 8000570:	0512      	lsls	r2, r2, #20
 8000572:	4313      	orrs	r3, r2
 8000574:	07e4      	lsls	r4, r4, #31
 8000576:	4323      	orrs	r3, r4
 8000578:	0008      	movs	r0, r1
 800057a:	0019      	movs	r1, r3
 800057c:	bce0      	pop	{r5, r6, r7}
 800057e:	46ba      	mov	sl, r7
 8000580:	46b1      	mov	r9, r6
 8000582:	46a8      	mov	r8, r5
 8000584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000586:	2a00      	cmp	r2, #0
 8000588:	d043      	beq.n	8000612 <__aeabi_dadd+0x1d6>
 800058a:	1b8a      	subs	r2, r1, r6
 800058c:	2e00      	cmp	r6, #0
 800058e:	d000      	beq.n	8000592 <__aeabi_dadd+0x156>
 8000590:	e12a      	b.n	80007e8 <__aeabi_dadd+0x3ac>
 8000592:	464c      	mov	r4, r9
 8000594:	431c      	orrs	r4, r3
 8000596:	d100      	bne.n	800059a <__aeabi_dadd+0x15e>
 8000598:	e1d1      	b.n	800093e <__aeabi_dadd+0x502>
 800059a:	1e54      	subs	r4, r2, #1
 800059c:	2a01      	cmp	r2, #1
 800059e:	d100      	bne.n	80005a2 <__aeabi_dadd+0x166>
 80005a0:	e21f      	b.n	80009e2 <__aeabi_dadd+0x5a6>
 80005a2:	4d83      	ldr	r5, [pc, #524]	; (80007b0 <__aeabi_dadd+0x374>)
 80005a4:	42aa      	cmp	r2, r5
 80005a6:	d100      	bne.n	80005aa <__aeabi_dadd+0x16e>
 80005a8:	e272      	b.n	8000a90 <__aeabi_dadd+0x654>
 80005aa:	0022      	movs	r2, r4
 80005ac:	e123      	b.n	80007f6 <__aeabi_dadd+0x3ba>
 80005ae:	2a00      	cmp	r2, #0
 80005b0:	dc00      	bgt.n	80005b4 <__aeabi_dadd+0x178>
 80005b2:	e098      	b.n	80006e6 <__aeabi_dadd+0x2aa>
 80005b4:	2900      	cmp	r1, #0
 80005b6:	d042      	beq.n	800063e <__aeabi_dadd+0x202>
 80005b8:	497d      	ldr	r1, [pc, #500]	; (80007b0 <__aeabi_dadd+0x374>)
 80005ba:	428e      	cmp	r6, r1
 80005bc:	d100      	bne.n	80005c0 <__aeabi_dadd+0x184>
 80005be:	e0da      	b.n	8000776 <__aeabi_dadd+0x33a>
 80005c0:	2180      	movs	r1, #128	; 0x80
 80005c2:	0028      	movs	r0, r5
 80005c4:	0409      	lsls	r1, r1, #16
 80005c6:	4308      	orrs	r0, r1
 80005c8:	4684      	mov	ip, r0
 80005ca:	2a38      	cmp	r2, #56	; 0x38
 80005cc:	dd00      	ble.n	80005d0 <__aeabi_dadd+0x194>
 80005ce:	e129      	b.n	8000824 <__aeabi_dadd+0x3e8>
 80005d0:	2a1f      	cmp	r2, #31
 80005d2:	dc00      	bgt.n	80005d6 <__aeabi_dadd+0x19a>
 80005d4:	e187      	b.n	80008e6 <__aeabi_dadd+0x4aa>
 80005d6:	0011      	movs	r1, r2
 80005d8:	4665      	mov	r5, ip
 80005da:	3920      	subs	r1, #32
 80005dc:	40cd      	lsrs	r5, r1
 80005de:	2a20      	cmp	r2, #32
 80005e0:	d004      	beq.n	80005ec <__aeabi_dadd+0x1b0>
 80005e2:	2040      	movs	r0, #64	; 0x40
 80005e4:	4661      	mov	r1, ip
 80005e6:	1a82      	subs	r2, r0, r2
 80005e8:	4091      	lsls	r1, r2
 80005ea:	430f      	orrs	r7, r1
 80005ec:	0039      	movs	r1, r7
 80005ee:	1e4f      	subs	r7, r1, #1
 80005f0:	41b9      	sbcs	r1, r7
 80005f2:	430d      	orrs	r5, r1
 80005f4:	e11b      	b.n	800082e <__aeabi_dadd+0x3f2>
 80005f6:	0029      	movs	r1, r5
 80005f8:	4339      	orrs	r1, r7
 80005fa:	d100      	bne.n	80005fe <__aeabi_dadd+0x1c2>
 80005fc:	e0b5      	b.n	800076a <__aeabi_dadd+0x32e>
 80005fe:	1e51      	subs	r1, r2, #1
 8000600:	2a01      	cmp	r2, #1
 8000602:	d100      	bne.n	8000606 <__aeabi_dadd+0x1ca>
 8000604:	e1ab      	b.n	800095e <__aeabi_dadd+0x522>
 8000606:	486a      	ldr	r0, [pc, #424]	; (80007b0 <__aeabi_dadd+0x374>)
 8000608:	4282      	cmp	r2, r0
 800060a:	d100      	bne.n	800060e <__aeabi_dadd+0x1d2>
 800060c:	e1b2      	b.n	8000974 <__aeabi_dadd+0x538>
 800060e:	000a      	movs	r2, r1
 8000610:	e743      	b.n	800049a <__aeabi_dadd+0x5e>
 8000612:	4969      	ldr	r1, [pc, #420]	; (80007b8 <__aeabi_dadd+0x37c>)
 8000614:	1c75      	adds	r5, r6, #1
 8000616:	420d      	tst	r5, r1
 8000618:	d000      	beq.n	800061c <__aeabi_dadd+0x1e0>
 800061a:	e0cf      	b.n	80007bc <__aeabi_dadd+0x380>
 800061c:	2e00      	cmp	r6, #0
 800061e:	d000      	beq.n	8000622 <__aeabi_dadd+0x1e6>
 8000620:	e193      	b.n	800094a <__aeabi_dadd+0x50e>
 8000622:	4649      	mov	r1, r9
 8000624:	4319      	orrs	r1, r3
 8000626:	d100      	bne.n	800062a <__aeabi_dadd+0x1ee>
 8000628:	e1d1      	b.n	80009ce <__aeabi_dadd+0x592>
 800062a:	4661      	mov	r1, ip
 800062c:	4339      	orrs	r1, r7
 800062e:	d000      	beq.n	8000632 <__aeabi_dadd+0x1f6>
 8000630:	e1e3      	b.n	80009fa <__aeabi_dadd+0x5be>
 8000632:	4649      	mov	r1, r9
 8000634:	0758      	lsls	r0, r3, #29
 8000636:	08c9      	lsrs	r1, r1, #3
 8000638:	4301      	orrs	r1, r0
 800063a:	08db      	lsrs	r3, r3, #3
 800063c:	e026      	b.n	800068c <__aeabi_dadd+0x250>
 800063e:	0029      	movs	r1, r5
 8000640:	4339      	orrs	r1, r7
 8000642:	d100      	bne.n	8000646 <__aeabi_dadd+0x20a>
 8000644:	e091      	b.n	800076a <__aeabi_dadd+0x32e>
 8000646:	1e51      	subs	r1, r2, #1
 8000648:	2a01      	cmp	r2, #1
 800064a:	d005      	beq.n	8000658 <__aeabi_dadd+0x21c>
 800064c:	4858      	ldr	r0, [pc, #352]	; (80007b0 <__aeabi_dadd+0x374>)
 800064e:	4282      	cmp	r2, r0
 8000650:	d100      	bne.n	8000654 <__aeabi_dadd+0x218>
 8000652:	e18f      	b.n	8000974 <__aeabi_dadd+0x538>
 8000654:	000a      	movs	r2, r1
 8000656:	e7b8      	b.n	80005ca <__aeabi_dadd+0x18e>
 8000658:	003d      	movs	r5, r7
 800065a:	444d      	add	r5, r9
 800065c:	454d      	cmp	r5, r9
 800065e:	4189      	sbcs	r1, r1
 8000660:	4463      	add	r3, ip
 8000662:	4698      	mov	r8, r3
 8000664:	4249      	negs	r1, r1
 8000666:	4488      	add	r8, r1
 8000668:	4643      	mov	r3, r8
 800066a:	2602      	movs	r6, #2
 800066c:	021b      	lsls	r3, r3, #8
 800066e:	d500      	bpl.n	8000672 <__aeabi_dadd+0x236>
 8000670:	e0eb      	b.n	800084a <__aeabi_dadd+0x40e>
 8000672:	3e01      	subs	r6, #1
 8000674:	076b      	lsls	r3, r5, #29
 8000676:	d000      	beq.n	800067a <__aeabi_dadd+0x23e>
 8000678:	e75c      	b.n	8000534 <__aeabi_dadd+0xf8>
 800067a:	4643      	mov	r3, r8
 800067c:	08e9      	lsrs	r1, r5, #3
 800067e:	075a      	lsls	r2, r3, #29
 8000680:	4311      	orrs	r1, r2
 8000682:	0032      	movs	r2, r6
 8000684:	08db      	lsrs	r3, r3, #3
 8000686:	484a      	ldr	r0, [pc, #296]	; (80007b0 <__aeabi_dadd+0x374>)
 8000688:	4282      	cmp	r2, r0
 800068a:	d021      	beq.n	80006d0 <__aeabi_dadd+0x294>
 800068c:	031b      	lsls	r3, r3, #12
 800068e:	0552      	lsls	r2, r2, #21
 8000690:	0b1b      	lsrs	r3, r3, #12
 8000692:	0d52      	lsrs	r2, r2, #21
 8000694:	e76c      	b.n	8000570 <__aeabi_dadd+0x134>
 8000696:	2300      	movs	r3, #0
 8000698:	2100      	movs	r1, #0
 800069a:	e769      	b.n	8000570 <__aeabi_dadd+0x134>
 800069c:	002a      	movs	r2, r5
 800069e:	433a      	orrs	r2, r7
 80006a0:	d069      	beq.n	8000776 <__aeabi_dadd+0x33a>
 80006a2:	464a      	mov	r2, r9
 80006a4:	0758      	lsls	r0, r3, #29
 80006a6:	08d1      	lsrs	r1, r2, #3
 80006a8:	08da      	lsrs	r2, r3, #3
 80006aa:	2380      	movs	r3, #128	; 0x80
 80006ac:	031b      	lsls	r3, r3, #12
 80006ae:	4308      	orrs	r0, r1
 80006b0:	421a      	tst	r2, r3
 80006b2:	d007      	beq.n	80006c4 <__aeabi_dadd+0x288>
 80006b4:	0029      	movs	r1, r5
 80006b6:	08ed      	lsrs	r5, r5, #3
 80006b8:	421d      	tst	r5, r3
 80006ba:	d103      	bne.n	80006c4 <__aeabi_dadd+0x288>
 80006bc:	002a      	movs	r2, r5
 80006be:	08ff      	lsrs	r7, r7, #3
 80006c0:	0748      	lsls	r0, r1, #29
 80006c2:	4338      	orrs	r0, r7
 80006c4:	0f43      	lsrs	r3, r0, #29
 80006c6:	00c1      	lsls	r1, r0, #3
 80006c8:	075b      	lsls	r3, r3, #29
 80006ca:	08c9      	lsrs	r1, r1, #3
 80006cc:	4319      	orrs	r1, r3
 80006ce:	0013      	movs	r3, r2
 80006d0:	000a      	movs	r2, r1
 80006d2:	431a      	orrs	r2, r3
 80006d4:	d100      	bne.n	80006d8 <__aeabi_dadd+0x29c>
 80006d6:	e213      	b.n	8000b00 <__aeabi_dadd+0x6c4>
 80006d8:	2280      	movs	r2, #128	; 0x80
 80006da:	0312      	lsls	r2, r2, #12
 80006dc:	4313      	orrs	r3, r2
 80006de:	031b      	lsls	r3, r3, #12
 80006e0:	4a33      	ldr	r2, [pc, #204]	; (80007b0 <__aeabi_dadd+0x374>)
 80006e2:	0b1b      	lsrs	r3, r3, #12
 80006e4:	e744      	b.n	8000570 <__aeabi_dadd+0x134>
 80006e6:	2a00      	cmp	r2, #0
 80006e8:	d04b      	beq.n	8000782 <__aeabi_dadd+0x346>
 80006ea:	1b8a      	subs	r2, r1, r6
 80006ec:	2e00      	cmp	r6, #0
 80006ee:	d100      	bne.n	80006f2 <__aeabi_dadd+0x2b6>
 80006f0:	e0e7      	b.n	80008c2 <__aeabi_dadd+0x486>
 80006f2:	482f      	ldr	r0, [pc, #188]	; (80007b0 <__aeabi_dadd+0x374>)
 80006f4:	4281      	cmp	r1, r0
 80006f6:	d100      	bne.n	80006fa <__aeabi_dadd+0x2be>
 80006f8:	e195      	b.n	8000a26 <__aeabi_dadd+0x5ea>
 80006fa:	2080      	movs	r0, #128	; 0x80
 80006fc:	0400      	lsls	r0, r0, #16
 80006fe:	4303      	orrs	r3, r0
 8000700:	2a38      	cmp	r2, #56	; 0x38
 8000702:	dd00      	ble.n	8000706 <__aeabi_dadd+0x2ca>
 8000704:	e143      	b.n	800098e <__aeabi_dadd+0x552>
 8000706:	2a1f      	cmp	r2, #31
 8000708:	dd00      	ble.n	800070c <__aeabi_dadd+0x2d0>
 800070a:	e1db      	b.n	8000ac4 <__aeabi_dadd+0x688>
 800070c:	2020      	movs	r0, #32
 800070e:	001d      	movs	r5, r3
 8000710:	464e      	mov	r6, r9
 8000712:	1a80      	subs	r0, r0, r2
 8000714:	4085      	lsls	r5, r0
 8000716:	40d6      	lsrs	r6, r2
 8000718:	4335      	orrs	r5, r6
 800071a:	464e      	mov	r6, r9
 800071c:	4086      	lsls	r6, r0
 800071e:	0030      	movs	r0, r6
 8000720:	40d3      	lsrs	r3, r2
 8000722:	1e46      	subs	r6, r0, #1
 8000724:	41b0      	sbcs	r0, r6
 8000726:	449c      	add	ip, r3
 8000728:	4305      	orrs	r5, r0
 800072a:	19ed      	adds	r5, r5, r7
 800072c:	42bd      	cmp	r5, r7
 800072e:	419b      	sbcs	r3, r3
 8000730:	425b      	negs	r3, r3
 8000732:	4463      	add	r3, ip
 8000734:	4698      	mov	r8, r3
 8000736:	000e      	movs	r6, r1
 8000738:	e07f      	b.n	800083a <__aeabi_dadd+0x3fe>
 800073a:	4a1e      	ldr	r2, [pc, #120]	; (80007b4 <__aeabi_dadd+0x378>)
 800073c:	1a76      	subs	r6, r6, r1
 800073e:	4013      	ands	r3, r2
 8000740:	4698      	mov	r8, r3
 8000742:	e6f5      	b.n	8000530 <__aeabi_dadd+0xf4>
 8000744:	0028      	movs	r0, r5
 8000746:	f001 fb55 	bl	8001df4 <__clzsi2>
 800074a:	0001      	movs	r1, r0
 800074c:	3118      	adds	r1, #24
 800074e:	291f      	cmp	r1, #31
 8000750:	dc00      	bgt.n	8000754 <__aeabi_dadd+0x318>
 8000752:	e6cf      	b.n	80004f4 <__aeabi_dadd+0xb8>
 8000754:	002b      	movs	r3, r5
 8000756:	3808      	subs	r0, #8
 8000758:	4083      	lsls	r3, r0
 800075a:	2500      	movs	r5, #0
 800075c:	e6d2      	b.n	8000504 <__aeabi_dadd+0xc8>
 800075e:	4662      	mov	r2, ip
 8000760:	433a      	orrs	r2, r7
 8000762:	0011      	movs	r1, r2
 8000764:	1e4f      	subs	r7, r1, #1
 8000766:	41b9      	sbcs	r1, r7
 8000768:	e6ac      	b.n	80004c4 <__aeabi_dadd+0x88>
 800076a:	4649      	mov	r1, r9
 800076c:	0758      	lsls	r0, r3, #29
 800076e:	08c9      	lsrs	r1, r1, #3
 8000770:	4301      	orrs	r1, r0
 8000772:	08db      	lsrs	r3, r3, #3
 8000774:	e787      	b.n	8000686 <__aeabi_dadd+0x24a>
 8000776:	4649      	mov	r1, r9
 8000778:	075a      	lsls	r2, r3, #29
 800077a:	08c9      	lsrs	r1, r1, #3
 800077c:	4311      	orrs	r1, r2
 800077e:	08db      	lsrs	r3, r3, #3
 8000780:	e7a6      	b.n	80006d0 <__aeabi_dadd+0x294>
 8000782:	490d      	ldr	r1, [pc, #52]	; (80007b8 <__aeabi_dadd+0x37c>)
 8000784:	1c70      	adds	r0, r6, #1
 8000786:	4208      	tst	r0, r1
 8000788:	d000      	beq.n	800078c <__aeabi_dadd+0x350>
 800078a:	e0bb      	b.n	8000904 <__aeabi_dadd+0x4c8>
 800078c:	2e00      	cmp	r6, #0
 800078e:	d000      	beq.n	8000792 <__aeabi_dadd+0x356>
 8000790:	e114      	b.n	80009bc <__aeabi_dadd+0x580>
 8000792:	4649      	mov	r1, r9
 8000794:	4319      	orrs	r1, r3
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x35e>
 8000798:	e175      	b.n	8000a86 <__aeabi_dadd+0x64a>
 800079a:	0029      	movs	r1, r5
 800079c:	4339      	orrs	r1, r7
 800079e:	d000      	beq.n	80007a2 <__aeabi_dadd+0x366>
 80007a0:	e17e      	b.n	8000aa0 <__aeabi_dadd+0x664>
 80007a2:	4649      	mov	r1, r9
 80007a4:	0758      	lsls	r0, r3, #29
 80007a6:	08c9      	lsrs	r1, r1, #3
 80007a8:	4301      	orrs	r1, r0
 80007aa:	08db      	lsrs	r3, r3, #3
 80007ac:	e76e      	b.n	800068c <__aeabi_dadd+0x250>
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	000007ff 	.word	0x000007ff
 80007b4:	ff7fffff 	.word	0xff7fffff
 80007b8:	000007fe 	.word	0x000007fe
 80007bc:	4649      	mov	r1, r9
 80007be:	1bcd      	subs	r5, r1, r7
 80007c0:	4661      	mov	r1, ip
 80007c2:	1a58      	subs	r0, r3, r1
 80007c4:	45a9      	cmp	r9, r5
 80007c6:	4189      	sbcs	r1, r1
 80007c8:	4249      	negs	r1, r1
 80007ca:	4688      	mov	r8, r1
 80007cc:	0001      	movs	r1, r0
 80007ce:	4640      	mov	r0, r8
 80007d0:	1a09      	subs	r1, r1, r0
 80007d2:	4688      	mov	r8, r1
 80007d4:	0209      	lsls	r1, r1, #8
 80007d6:	d500      	bpl.n	80007da <__aeabi_dadd+0x39e>
 80007d8:	e0a6      	b.n	8000928 <__aeabi_dadd+0x4ec>
 80007da:	4641      	mov	r1, r8
 80007dc:	4329      	orrs	r1, r5
 80007de:	d000      	beq.n	80007e2 <__aeabi_dadd+0x3a6>
 80007e0:	e67f      	b.n	80004e2 <__aeabi_dadd+0xa6>
 80007e2:	2300      	movs	r3, #0
 80007e4:	2400      	movs	r4, #0
 80007e6:	e751      	b.n	800068c <__aeabi_dadd+0x250>
 80007e8:	4cc7      	ldr	r4, [pc, #796]	; (8000b08 <__aeabi_dadd+0x6cc>)
 80007ea:	42a1      	cmp	r1, r4
 80007ec:	d100      	bne.n	80007f0 <__aeabi_dadd+0x3b4>
 80007ee:	e0c7      	b.n	8000980 <__aeabi_dadd+0x544>
 80007f0:	2480      	movs	r4, #128	; 0x80
 80007f2:	0424      	lsls	r4, r4, #16
 80007f4:	4323      	orrs	r3, r4
 80007f6:	2a38      	cmp	r2, #56	; 0x38
 80007f8:	dc54      	bgt.n	80008a4 <__aeabi_dadd+0x468>
 80007fa:	2a1f      	cmp	r2, #31
 80007fc:	dd00      	ble.n	8000800 <__aeabi_dadd+0x3c4>
 80007fe:	e0cc      	b.n	800099a <__aeabi_dadd+0x55e>
 8000800:	2420      	movs	r4, #32
 8000802:	4648      	mov	r0, r9
 8000804:	1aa4      	subs	r4, r4, r2
 8000806:	001d      	movs	r5, r3
 8000808:	464e      	mov	r6, r9
 800080a:	40a0      	lsls	r0, r4
 800080c:	40d6      	lsrs	r6, r2
 800080e:	40a5      	lsls	r5, r4
 8000810:	0004      	movs	r4, r0
 8000812:	40d3      	lsrs	r3, r2
 8000814:	4662      	mov	r2, ip
 8000816:	4335      	orrs	r5, r6
 8000818:	1e66      	subs	r6, r4, #1
 800081a:	41b4      	sbcs	r4, r6
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	469c      	mov	ip, r3
 8000820:	4325      	orrs	r5, r4
 8000822:	e044      	b.n	80008ae <__aeabi_dadd+0x472>
 8000824:	4662      	mov	r2, ip
 8000826:	433a      	orrs	r2, r7
 8000828:	0015      	movs	r5, r2
 800082a:	1e6f      	subs	r7, r5, #1
 800082c:	41bd      	sbcs	r5, r7
 800082e:	444d      	add	r5, r9
 8000830:	454d      	cmp	r5, r9
 8000832:	4189      	sbcs	r1, r1
 8000834:	4249      	negs	r1, r1
 8000836:	4688      	mov	r8, r1
 8000838:	4498      	add	r8, r3
 800083a:	4643      	mov	r3, r8
 800083c:	021b      	lsls	r3, r3, #8
 800083e:	d400      	bmi.n	8000842 <__aeabi_dadd+0x406>
 8000840:	e718      	b.n	8000674 <__aeabi_dadd+0x238>
 8000842:	4bb1      	ldr	r3, [pc, #708]	; (8000b08 <__aeabi_dadd+0x6cc>)
 8000844:	3601      	adds	r6, #1
 8000846:	429e      	cmp	r6, r3
 8000848:	d049      	beq.n	80008de <__aeabi_dadd+0x4a2>
 800084a:	4642      	mov	r2, r8
 800084c:	4baf      	ldr	r3, [pc, #700]	; (8000b0c <__aeabi_dadd+0x6d0>)
 800084e:	2101      	movs	r1, #1
 8000850:	401a      	ands	r2, r3
 8000852:	0013      	movs	r3, r2
 8000854:	086a      	lsrs	r2, r5, #1
 8000856:	400d      	ands	r5, r1
 8000858:	4315      	orrs	r5, r2
 800085a:	07d9      	lsls	r1, r3, #31
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	4698      	mov	r8, r3
 8000860:	430d      	orrs	r5, r1
 8000862:	e665      	b.n	8000530 <__aeabi_dadd+0xf4>
 8000864:	0018      	movs	r0, r3
 8000866:	3e1f      	subs	r6, #31
 8000868:	40f0      	lsrs	r0, r6
 800086a:	2a20      	cmp	r2, #32
 800086c:	d003      	beq.n	8000876 <__aeabi_dadd+0x43a>
 800086e:	2140      	movs	r1, #64	; 0x40
 8000870:	1a8a      	subs	r2, r1, r2
 8000872:	4093      	lsls	r3, r2
 8000874:	431d      	orrs	r5, r3
 8000876:	1e69      	subs	r1, r5, #1
 8000878:	418d      	sbcs	r5, r1
 800087a:	2300      	movs	r3, #0
 800087c:	2600      	movs	r6, #0
 800087e:	4698      	mov	r8, r3
 8000880:	4305      	orrs	r5, r0
 8000882:	e6f7      	b.n	8000674 <__aeabi_dadd+0x238>
 8000884:	0011      	movs	r1, r2
 8000886:	4665      	mov	r5, ip
 8000888:	3920      	subs	r1, #32
 800088a:	40cd      	lsrs	r5, r1
 800088c:	2a20      	cmp	r2, #32
 800088e:	d004      	beq.n	800089a <__aeabi_dadd+0x45e>
 8000890:	2040      	movs	r0, #64	; 0x40
 8000892:	4661      	mov	r1, ip
 8000894:	1a82      	subs	r2, r0, r2
 8000896:	4091      	lsls	r1, r2
 8000898:	430f      	orrs	r7, r1
 800089a:	0039      	movs	r1, r7
 800089c:	1e4f      	subs	r7, r1, #1
 800089e:	41b9      	sbcs	r1, r7
 80008a0:	4329      	orrs	r1, r5
 80008a2:	e60f      	b.n	80004c4 <__aeabi_dadd+0x88>
 80008a4:	464a      	mov	r2, r9
 80008a6:	4313      	orrs	r3, r2
 80008a8:	001d      	movs	r5, r3
 80008aa:	1e6b      	subs	r3, r5, #1
 80008ac:	419d      	sbcs	r5, r3
 80008ae:	1b7d      	subs	r5, r7, r5
 80008b0:	42af      	cmp	r7, r5
 80008b2:	419b      	sbcs	r3, r3
 80008b4:	4662      	mov	r2, ip
 80008b6:	425b      	negs	r3, r3
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	4698      	mov	r8, r3
 80008bc:	4654      	mov	r4, sl
 80008be:	000e      	movs	r6, r1
 80008c0:	e607      	b.n	80004d2 <__aeabi_dadd+0x96>
 80008c2:	4648      	mov	r0, r9
 80008c4:	4318      	orrs	r0, r3
 80008c6:	d100      	bne.n	80008ca <__aeabi_dadd+0x48e>
 80008c8:	e0b3      	b.n	8000a32 <__aeabi_dadd+0x5f6>
 80008ca:	1e50      	subs	r0, r2, #1
 80008cc:	2a01      	cmp	r2, #1
 80008ce:	d100      	bne.n	80008d2 <__aeabi_dadd+0x496>
 80008d0:	e10d      	b.n	8000aee <__aeabi_dadd+0x6b2>
 80008d2:	4d8d      	ldr	r5, [pc, #564]	; (8000b08 <__aeabi_dadd+0x6cc>)
 80008d4:	42aa      	cmp	r2, r5
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x49e>
 80008d8:	e0a5      	b.n	8000a26 <__aeabi_dadd+0x5ea>
 80008da:	0002      	movs	r2, r0
 80008dc:	e710      	b.n	8000700 <__aeabi_dadd+0x2c4>
 80008de:	0032      	movs	r2, r6
 80008e0:	2300      	movs	r3, #0
 80008e2:	2100      	movs	r1, #0
 80008e4:	e644      	b.n	8000570 <__aeabi_dadd+0x134>
 80008e6:	2120      	movs	r1, #32
 80008e8:	0038      	movs	r0, r7
 80008ea:	1a89      	subs	r1, r1, r2
 80008ec:	4665      	mov	r5, ip
 80008ee:	408f      	lsls	r7, r1
 80008f0:	408d      	lsls	r5, r1
 80008f2:	40d0      	lsrs	r0, r2
 80008f4:	1e79      	subs	r1, r7, #1
 80008f6:	418f      	sbcs	r7, r1
 80008f8:	4305      	orrs	r5, r0
 80008fa:	433d      	orrs	r5, r7
 80008fc:	4667      	mov	r7, ip
 80008fe:	40d7      	lsrs	r7, r2
 8000900:	19db      	adds	r3, r3, r7
 8000902:	e794      	b.n	800082e <__aeabi_dadd+0x3f2>
 8000904:	4a80      	ldr	r2, [pc, #512]	; (8000b08 <__aeabi_dadd+0x6cc>)
 8000906:	4290      	cmp	r0, r2
 8000908:	d100      	bne.n	800090c <__aeabi_dadd+0x4d0>
 800090a:	e0ec      	b.n	8000ae6 <__aeabi_dadd+0x6aa>
 800090c:	0039      	movs	r1, r7
 800090e:	4449      	add	r1, r9
 8000910:	4549      	cmp	r1, r9
 8000912:	4192      	sbcs	r2, r2
 8000914:	4463      	add	r3, ip
 8000916:	4252      	negs	r2, r2
 8000918:	189b      	adds	r3, r3, r2
 800091a:	07dd      	lsls	r5, r3, #31
 800091c:	0849      	lsrs	r1, r1, #1
 800091e:	085b      	lsrs	r3, r3, #1
 8000920:	4698      	mov	r8, r3
 8000922:	0006      	movs	r6, r0
 8000924:	430d      	orrs	r5, r1
 8000926:	e6a5      	b.n	8000674 <__aeabi_dadd+0x238>
 8000928:	464a      	mov	r2, r9
 800092a:	1abd      	subs	r5, r7, r2
 800092c:	42af      	cmp	r7, r5
 800092e:	4189      	sbcs	r1, r1
 8000930:	4662      	mov	r2, ip
 8000932:	4249      	negs	r1, r1
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	1a5b      	subs	r3, r3, r1
 8000938:	4698      	mov	r8, r3
 800093a:	4654      	mov	r4, sl
 800093c:	e5d1      	b.n	80004e2 <__aeabi_dadd+0xa6>
 800093e:	076c      	lsls	r4, r5, #29
 8000940:	08f9      	lsrs	r1, r7, #3
 8000942:	4321      	orrs	r1, r4
 8000944:	08eb      	lsrs	r3, r5, #3
 8000946:	0004      	movs	r4, r0
 8000948:	e69d      	b.n	8000686 <__aeabi_dadd+0x24a>
 800094a:	464a      	mov	r2, r9
 800094c:	431a      	orrs	r2, r3
 800094e:	d175      	bne.n	8000a3c <__aeabi_dadd+0x600>
 8000950:	4661      	mov	r1, ip
 8000952:	4339      	orrs	r1, r7
 8000954:	d114      	bne.n	8000980 <__aeabi_dadd+0x544>
 8000956:	2380      	movs	r3, #128	; 0x80
 8000958:	2400      	movs	r4, #0
 800095a:	031b      	lsls	r3, r3, #12
 800095c:	e6bc      	b.n	80006d8 <__aeabi_dadd+0x29c>
 800095e:	464a      	mov	r2, r9
 8000960:	1bd5      	subs	r5, r2, r7
 8000962:	45a9      	cmp	r9, r5
 8000964:	4189      	sbcs	r1, r1
 8000966:	4662      	mov	r2, ip
 8000968:	4249      	negs	r1, r1
 800096a:	1a9b      	subs	r3, r3, r2
 800096c:	1a5b      	subs	r3, r3, r1
 800096e:	4698      	mov	r8, r3
 8000970:	2601      	movs	r6, #1
 8000972:	e5ae      	b.n	80004d2 <__aeabi_dadd+0x96>
 8000974:	464a      	mov	r2, r9
 8000976:	08d1      	lsrs	r1, r2, #3
 8000978:	075a      	lsls	r2, r3, #29
 800097a:	4311      	orrs	r1, r2
 800097c:	08db      	lsrs	r3, r3, #3
 800097e:	e6a7      	b.n	80006d0 <__aeabi_dadd+0x294>
 8000980:	4663      	mov	r3, ip
 8000982:	08f9      	lsrs	r1, r7, #3
 8000984:	075a      	lsls	r2, r3, #29
 8000986:	4654      	mov	r4, sl
 8000988:	4311      	orrs	r1, r2
 800098a:	08db      	lsrs	r3, r3, #3
 800098c:	e6a0      	b.n	80006d0 <__aeabi_dadd+0x294>
 800098e:	464a      	mov	r2, r9
 8000990:	4313      	orrs	r3, r2
 8000992:	001d      	movs	r5, r3
 8000994:	1e6b      	subs	r3, r5, #1
 8000996:	419d      	sbcs	r5, r3
 8000998:	e6c7      	b.n	800072a <__aeabi_dadd+0x2ee>
 800099a:	0014      	movs	r4, r2
 800099c:	001e      	movs	r6, r3
 800099e:	3c20      	subs	r4, #32
 80009a0:	40e6      	lsrs	r6, r4
 80009a2:	2a20      	cmp	r2, #32
 80009a4:	d005      	beq.n	80009b2 <__aeabi_dadd+0x576>
 80009a6:	2440      	movs	r4, #64	; 0x40
 80009a8:	1aa2      	subs	r2, r4, r2
 80009aa:	4093      	lsls	r3, r2
 80009ac:	464a      	mov	r2, r9
 80009ae:	431a      	orrs	r2, r3
 80009b0:	4691      	mov	r9, r2
 80009b2:	464d      	mov	r5, r9
 80009b4:	1e6b      	subs	r3, r5, #1
 80009b6:	419d      	sbcs	r5, r3
 80009b8:	4335      	orrs	r5, r6
 80009ba:	e778      	b.n	80008ae <__aeabi_dadd+0x472>
 80009bc:	464a      	mov	r2, r9
 80009be:	431a      	orrs	r2, r3
 80009c0:	d000      	beq.n	80009c4 <__aeabi_dadd+0x588>
 80009c2:	e66b      	b.n	800069c <__aeabi_dadd+0x260>
 80009c4:	076b      	lsls	r3, r5, #29
 80009c6:	08f9      	lsrs	r1, r7, #3
 80009c8:	4319      	orrs	r1, r3
 80009ca:	08eb      	lsrs	r3, r5, #3
 80009cc:	e680      	b.n	80006d0 <__aeabi_dadd+0x294>
 80009ce:	4661      	mov	r1, ip
 80009d0:	4339      	orrs	r1, r7
 80009d2:	d054      	beq.n	8000a7e <__aeabi_dadd+0x642>
 80009d4:	4663      	mov	r3, ip
 80009d6:	08f9      	lsrs	r1, r7, #3
 80009d8:	075c      	lsls	r4, r3, #29
 80009da:	4321      	orrs	r1, r4
 80009dc:	08db      	lsrs	r3, r3, #3
 80009de:	0004      	movs	r4, r0
 80009e0:	e654      	b.n	800068c <__aeabi_dadd+0x250>
 80009e2:	464a      	mov	r2, r9
 80009e4:	1abd      	subs	r5, r7, r2
 80009e6:	42af      	cmp	r7, r5
 80009e8:	4189      	sbcs	r1, r1
 80009ea:	4662      	mov	r2, ip
 80009ec:	4249      	negs	r1, r1
 80009ee:	1ad3      	subs	r3, r2, r3
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	4698      	mov	r8, r3
 80009f4:	0004      	movs	r4, r0
 80009f6:	2601      	movs	r6, #1
 80009f8:	e56b      	b.n	80004d2 <__aeabi_dadd+0x96>
 80009fa:	464a      	mov	r2, r9
 80009fc:	1bd5      	subs	r5, r2, r7
 80009fe:	45a9      	cmp	r9, r5
 8000a00:	4189      	sbcs	r1, r1
 8000a02:	4662      	mov	r2, ip
 8000a04:	4249      	negs	r1, r1
 8000a06:	1a9a      	subs	r2, r3, r2
 8000a08:	1a52      	subs	r2, r2, r1
 8000a0a:	4690      	mov	r8, r2
 8000a0c:	0212      	lsls	r2, r2, #8
 8000a0e:	d532      	bpl.n	8000a76 <__aeabi_dadd+0x63a>
 8000a10:	464a      	mov	r2, r9
 8000a12:	1abd      	subs	r5, r7, r2
 8000a14:	42af      	cmp	r7, r5
 8000a16:	4189      	sbcs	r1, r1
 8000a18:	4662      	mov	r2, ip
 8000a1a:	4249      	negs	r1, r1
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	1a5b      	subs	r3, r3, r1
 8000a20:	4698      	mov	r8, r3
 8000a22:	0004      	movs	r4, r0
 8000a24:	e584      	b.n	8000530 <__aeabi_dadd+0xf4>
 8000a26:	4663      	mov	r3, ip
 8000a28:	08f9      	lsrs	r1, r7, #3
 8000a2a:	075a      	lsls	r2, r3, #29
 8000a2c:	4311      	orrs	r1, r2
 8000a2e:	08db      	lsrs	r3, r3, #3
 8000a30:	e64e      	b.n	80006d0 <__aeabi_dadd+0x294>
 8000a32:	08f9      	lsrs	r1, r7, #3
 8000a34:	0768      	lsls	r0, r5, #29
 8000a36:	4301      	orrs	r1, r0
 8000a38:	08eb      	lsrs	r3, r5, #3
 8000a3a:	e624      	b.n	8000686 <__aeabi_dadd+0x24a>
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	433a      	orrs	r2, r7
 8000a40:	d100      	bne.n	8000a44 <__aeabi_dadd+0x608>
 8000a42:	e698      	b.n	8000776 <__aeabi_dadd+0x33a>
 8000a44:	464a      	mov	r2, r9
 8000a46:	08d1      	lsrs	r1, r2, #3
 8000a48:	075a      	lsls	r2, r3, #29
 8000a4a:	4311      	orrs	r1, r2
 8000a4c:	08da      	lsrs	r2, r3, #3
 8000a4e:	2380      	movs	r3, #128	; 0x80
 8000a50:	031b      	lsls	r3, r3, #12
 8000a52:	421a      	tst	r2, r3
 8000a54:	d008      	beq.n	8000a68 <__aeabi_dadd+0x62c>
 8000a56:	4660      	mov	r0, ip
 8000a58:	08c5      	lsrs	r5, r0, #3
 8000a5a:	421d      	tst	r5, r3
 8000a5c:	d104      	bne.n	8000a68 <__aeabi_dadd+0x62c>
 8000a5e:	4654      	mov	r4, sl
 8000a60:	002a      	movs	r2, r5
 8000a62:	08f9      	lsrs	r1, r7, #3
 8000a64:	0743      	lsls	r3, r0, #29
 8000a66:	4319      	orrs	r1, r3
 8000a68:	0f4b      	lsrs	r3, r1, #29
 8000a6a:	00c9      	lsls	r1, r1, #3
 8000a6c:	075b      	lsls	r3, r3, #29
 8000a6e:	08c9      	lsrs	r1, r1, #3
 8000a70:	4319      	orrs	r1, r3
 8000a72:	0013      	movs	r3, r2
 8000a74:	e62c      	b.n	80006d0 <__aeabi_dadd+0x294>
 8000a76:	4641      	mov	r1, r8
 8000a78:	4329      	orrs	r1, r5
 8000a7a:	d000      	beq.n	8000a7e <__aeabi_dadd+0x642>
 8000a7c:	e5fa      	b.n	8000674 <__aeabi_dadd+0x238>
 8000a7e:	2300      	movs	r3, #0
 8000a80:	000a      	movs	r2, r1
 8000a82:	2400      	movs	r4, #0
 8000a84:	e602      	b.n	800068c <__aeabi_dadd+0x250>
 8000a86:	076b      	lsls	r3, r5, #29
 8000a88:	08f9      	lsrs	r1, r7, #3
 8000a8a:	4319      	orrs	r1, r3
 8000a8c:	08eb      	lsrs	r3, r5, #3
 8000a8e:	e5fd      	b.n	800068c <__aeabi_dadd+0x250>
 8000a90:	4663      	mov	r3, ip
 8000a92:	08f9      	lsrs	r1, r7, #3
 8000a94:	075b      	lsls	r3, r3, #29
 8000a96:	4319      	orrs	r1, r3
 8000a98:	4663      	mov	r3, ip
 8000a9a:	0004      	movs	r4, r0
 8000a9c:	08db      	lsrs	r3, r3, #3
 8000a9e:	e617      	b.n	80006d0 <__aeabi_dadd+0x294>
 8000aa0:	003d      	movs	r5, r7
 8000aa2:	444d      	add	r5, r9
 8000aa4:	4463      	add	r3, ip
 8000aa6:	454d      	cmp	r5, r9
 8000aa8:	4189      	sbcs	r1, r1
 8000aaa:	4698      	mov	r8, r3
 8000aac:	4249      	negs	r1, r1
 8000aae:	4488      	add	r8, r1
 8000ab0:	4643      	mov	r3, r8
 8000ab2:	021b      	lsls	r3, r3, #8
 8000ab4:	d400      	bmi.n	8000ab8 <__aeabi_dadd+0x67c>
 8000ab6:	e5dd      	b.n	8000674 <__aeabi_dadd+0x238>
 8000ab8:	4642      	mov	r2, r8
 8000aba:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <__aeabi_dadd+0x6d0>)
 8000abc:	2601      	movs	r6, #1
 8000abe:	401a      	ands	r2, r3
 8000ac0:	4690      	mov	r8, r2
 8000ac2:	e5d7      	b.n	8000674 <__aeabi_dadd+0x238>
 8000ac4:	0010      	movs	r0, r2
 8000ac6:	001e      	movs	r6, r3
 8000ac8:	3820      	subs	r0, #32
 8000aca:	40c6      	lsrs	r6, r0
 8000acc:	2a20      	cmp	r2, #32
 8000ace:	d005      	beq.n	8000adc <__aeabi_dadd+0x6a0>
 8000ad0:	2040      	movs	r0, #64	; 0x40
 8000ad2:	1a82      	subs	r2, r0, r2
 8000ad4:	4093      	lsls	r3, r2
 8000ad6:	464a      	mov	r2, r9
 8000ad8:	431a      	orrs	r2, r3
 8000ada:	4691      	mov	r9, r2
 8000adc:	464d      	mov	r5, r9
 8000ade:	1e6b      	subs	r3, r5, #1
 8000ae0:	419d      	sbcs	r5, r3
 8000ae2:	4335      	orrs	r5, r6
 8000ae4:	e621      	b.n	800072a <__aeabi_dadd+0x2ee>
 8000ae6:	0002      	movs	r2, r0
 8000ae8:	2300      	movs	r3, #0
 8000aea:	2100      	movs	r1, #0
 8000aec:	e540      	b.n	8000570 <__aeabi_dadd+0x134>
 8000aee:	464a      	mov	r2, r9
 8000af0:	19d5      	adds	r5, r2, r7
 8000af2:	42bd      	cmp	r5, r7
 8000af4:	4189      	sbcs	r1, r1
 8000af6:	4463      	add	r3, ip
 8000af8:	4698      	mov	r8, r3
 8000afa:	4249      	negs	r1, r1
 8000afc:	4488      	add	r8, r1
 8000afe:	e5b3      	b.n	8000668 <__aeabi_dadd+0x22c>
 8000b00:	2100      	movs	r1, #0
 8000b02:	4a01      	ldr	r2, [pc, #4]	; (8000b08 <__aeabi_dadd+0x6cc>)
 8000b04:	000b      	movs	r3, r1
 8000b06:	e533      	b.n	8000570 <__aeabi_dadd+0x134>
 8000b08:	000007ff 	.word	0x000007ff
 8000b0c:	ff7fffff 	.word	0xff7fffff

08000b10 <__aeabi_ddiv>:
 8000b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b12:	4657      	mov	r7, sl
 8000b14:	464e      	mov	r6, r9
 8000b16:	4645      	mov	r5, r8
 8000b18:	46de      	mov	lr, fp
 8000b1a:	b5e0      	push	{r5, r6, r7, lr}
 8000b1c:	4681      	mov	r9, r0
 8000b1e:	0005      	movs	r5, r0
 8000b20:	030c      	lsls	r4, r1, #12
 8000b22:	0048      	lsls	r0, r1, #1
 8000b24:	4692      	mov	sl, r2
 8000b26:	001f      	movs	r7, r3
 8000b28:	b085      	sub	sp, #20
 8000b2a:	0b24      	lsrs	r4, r4, #12
 8000b2c:	0d40      	lsrs	r0, r0, #21
 8000b2e:	0fce      	lsrs	r6, r1, #31
 8000b30:	2800      	cmp	r0, #0
 8000b32:	d059      	beq.n	8000be8 <__aeabi_ddiv+0xd8>
 8000b34:	4b87      	ldr	r3, [pc, #540]	; (8000d54 <__aeabi_ddiv+0x244>)
 8000b36:	4298      	cmp	r0, r3
 8000b38:	d100      	bne.n	8000b3c <__aeabi_ddiv+0x2c>
 8000b3a:	e098      	b.n	8000c6e <__aeabi_ddiv+0x15e>
 8000b3c:	0f6b      	lsrs	r3, r5, #29
 8000b3e:	00e4      	lsls	r4, r4, #3
 8000b40:	431c      	orrs	r4, r3
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	041b      	lsls	r3, r3, #16
 8000b46:	4323      	orrs	r3, r4
 8000b48:	4698      	mov	r8, r3
 8000b4a:	4b83      	ldr	r3, [pc, #524]	; (8000d58 <__aeabi_ddiv+0x248>)
 8000b4c:	00ed      	lsls	r5, r5, #3
 8000b4e:	469b      	mov	fp, r3
 8000b50:	2300      	movs	r3, #0
 8000b52:	4699      	mov	r9, r3
 8000b54:	4483      	add	fp, r0
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	033c      	lsls	r4, r7, #12
 8000b5a:	007b      	lsls	r3, r7, #1
 8000b5c:	4650      	mov	r0, sl
 8000b5e:	0b24      	lsrs	r4, r4, #12
 8000b60:	0d5b      	lsrs	r3, r3, #21
 8000b62:	0fff      	lsrs	r7, r7, #31
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d067      	beq.n	8000c38 <__aeabi_ddiv+0x128>
 8000b68:	4a7a      	ldr	r2, [pc, #488]	; (8000d54 <__aeabi_ddiv+0x244>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d018      	beq.n	8000ba0 <__aeabi_ddiv+0x90>
 8000b6e:	497a      	ldr	r1, [pc, #488]	; (8000d58 <__aeabi_ddiv+0x248>)
 8000b70:	0f42      	lsrs	r2, r0, #29
 8000b72:	468c      	mov	ip, r1
 8000b74:	00e4      	lsls	r4, r4, #3
 8000b76:	4659      	mov	r1, fp
 8000b78:	4314      	orrs	r4, r2
 8000b7a:	2280      	movs	r2, #128	; 0x80
 8000b7c:	4463      	add	r3, ip
 8000b7e:	0412      	lsls	r2, r2, #16
 8000b80:	1acb      	subs	r3, r1, r3
 8000b82:	4314      	orrs	r4, r2
 8000b84:	469b      	mov	fp, r3
 8000b86:	00c2      	lsls	r2, r0, #3
 8000b88:	2000      	movs	r0, #0
 8000b8a:	0033      	movs	r3, r6
 8000b8c:	407b      	eors	r3, r7
 8000b8e:	469a      	mov	sl, r3
 8000b90:	464b      	mov	r3, r9
 8000b92:	2b0f      	cmp	r3, #15
 8000b94:	d900      	bls.n	8000b98 <__aeabi_ddiv+0x88>
 8000b96:	e0ef      	b.n	8000d78 <__aeabi_ddiv+0x268>
 8000b98:	4970      	ldr	r1, [pc, #448]	; (8000d5c <__aeabi_ddiv+0x24c>)
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	58cb      	ldr	r3, [r1, r3]
 8000b9e:	469f      	mov	pc, r3
 8000ba0:	4b6f      	ldr	r3, [pc, #444]	; (8000d60 <__aeabi_ddiv+0x250>)
 8000ba2:	4652      	mov	r2, sl
 8000ba4:	469c      	mov	ip, r3
 8000ba6:	4322      	orrs	r2, r4
 8000ba8:	44e3      	add	fp, ip
 8000baa:	2a00      	cmp	r2, #0
 8000bac:	d000      	beq.n	8000bb0 <__aeabi_ddiv+0xa0>
 8000bae:	e095      	b.n	8000cdc <__aeabi_ddiv+0x1cc>
 8000bb0:	4649      	mov	r1, r9
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	4319      	orrs	r1, r3
 8000bb6:	4689      	mov	r9, r1
 8000bb8:	2400      	movs	r4, #0
 8000bba:	2002      	movs	r0, #2
 8000bbc:	e7e5      	b.n	8000b8a <__aeabi_ddiv+0x7a>
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	2400      	movs	r4, #0
 8000bc2:	2500      	movs	r5, #0
 8000bc4:	4652      	mov	r2, sl
 8000bc6:	051b      	lsls	r3, r3, #20
 8000bc8:	4323      	orrs	r3, r4
 8000bca:	07d2      	lsls	r2, r2, #31
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	0028      	movs	r0, r5
 8000bd0:	0019      	movs	r1, r3
 8000bd2:	b005      	add	sp, #20
 8000bd4:	bcf0      	pop	{r4, r5, r6, r7}
 8000bd6:	46bb      	mov	fp, r7
 8000bd8:	46b2      	mov	sl, r6
 8000bda:	46a9      	mov	r9, r5
 8000bdc:	46a0      	mov	r8, r4
 8000bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be0:	2400      	movs	r4, #0
 8000be2:	2500      	movs	r5, #0
 8000be4:	4b5b      	ldr	r3, [pc, #364]	; (8000d54 <__aeabi_ddiv+0x244>)
 8000be6:	e7ed      	b.n	8000bc4 <__aeabi_ddiv+0xb4>
 8000be8:	464b      	mov	r3, r9
 8000bea:	4323      	orrs	r3, r4
 8000bec:	4698      	mov	r8, r3
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_ddiv+0xe2>
 8000bf0:	e089      	b.n	8000d06 <__aeabi_ddiv+0x1f6>
 8000bf2:	2c00      	cmp	r4, #0
 8000bf4:	d100      	bne.n	8000bf8 <__aeabi_ddiv+0xe8>
 8000bf6:	e1e0      	b.n	8000fba <__aeabi_ddiv+0x4aa>
 8000bf8:	0020      	movs	r0, r4
 8000bfa:	f001 f8fb 	bl	8001df4 <__clzsi2>
 8000bfe:	0001      	movs	r1, r0
 8000c00:	0002      	movs	r2, r0
 8000c02:	390b      	subs	r1, #11
 8000c04:	231d      	movs	r3, #29
 8000c06:	1a5b      	subs	r3, r3, r1
 8000c08:	4649      	mov	r1, r9
 8000c0a:	0010      	movs	r0, r2
 8000c0c:	40d9      	lsrs	r1, r3
 8000c0e:	3808      	subs	r0, #8
 8000c10:	4084      	lsls	r4, r0
 8000c12:	000b      	movs	r3, r1
 8000c14:	464d      	mov	r5, r9
 8000c16:	4323      	orrs	r3, r4
 8000c18:	4698      	mov	r8, r3
 8000c1a:	4085      	lsls	r5, r0
 8000c1c:	4851      	ldr	r0, [pc, #324]	; (8000d64 <__aeabi_ddiv+0x254>)
 8000c1e:	033c      	lsls	r4, r7, #12
 8000c20:	1a83      	subs	r3, r0, r2
 8000c22:	469b      	mov	fp, r3
 8000c24:	2300      	movs	r3, #0
 8000c26:	4699      	mov	r9, r3
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	007b      	lsls	r3, r7, #1
 8000c2c:	4650      	mov	r0, sl
 8000c2e:	0b24      	lsrs	r4, r4, #12
 8000c30:	0d5b      	lsrs	r3, r3, #21
 8000c32:	0fff      	lsrs	r7, r7, #31
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d197      	bne.n	8000b68 <__aeabi_ddiv+0x58>
 8000c38:	4652      	mov	r2, sl
 8000c3a:	4322      	orrs	r2, r4
 8000c3c:	d055      	beq.n	8000cea <__aeabi_ddiv+0x1da>
 8000c3e:	2c00      	cmp	r4, #0
 8000c40:	d100      	bne.n	8000c44 <__aeabi_ddiv+0x134>
 8000c42:	e1ca      	b.n	8000fda <__aeabi_ddiv+0x4ca>
 8000c44:	0020      	movs	r0, r4
 8000c46:	f001 f8d5 	bl	8001df4 <__clzsi2>
 8000c4a:	0002      	movs	r2, r0
 8000c4c:	3a0b      	subs	r2, #11
 8000c4e:	231d      	movs	r3, #29
 8000c50:	0001      	movs	r1, r0
 8000c52:	1a9b      	subs	r3, r3, r2
 8000c54:	4652      	mov	r2, sl
 8000c56:	3908      	subs	r1, #8
 8000c58:	40da      	lsrs	r2, r3
 8000c5a:	408c      	lsls	r4, r1
 8000c5c:	4314      	orrs	r4, r2
 8000c5e:	4652      	mov	r2, sl
 8000c60:	408a      	lsls	r2, r1
 8000c62:	4b41      	ldr	r3, [pc, #260]	; (8000d68 <__aeabi_ddiv+0x258>)
 8000c64:	4458      	add	r0, fp
 8000c66:	469b      	mov	fp, r3
 8000c68:	4483      	add	fp, r0
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	e78d      	b.n	8000b8a <__aeabi_ddiv+0x7a>
 8000c6e:	464b      	mov	r3, r9
 8000c70:	4323      	orrs	r3, r4
 8000c72:	4698      	mov	r8, r3
 8000c74:	d140      	bne.n	8000cf8 <__aeabi_ddiv+0x1e8>
 8000c76:	2308      	movs	r3, #8
 8000c78:	4699      	mov	r9, r3
 8000c7a:	3b06      	subs	r3, #6
 8000c7c:	2500      	movs	r5, #0
 8000c7e:	4683      	mov	fp, r0
 8000c80:	9300      	str	r3, [sp, #0]
 8000c82:	e769      	b.n	8000b58 <__aeabi_ddiv+0x48>
 8000c84:	46b2      	mov	sl, r6
 8000c86:	9b00      	ldr	r3, [sp, #0]
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d0a9      	beq.n	8000be0 <__aeabi_ddiv+0xd0>
 8000c8c:	2b03      	cmp	r3, #3
 8000c8e:	d100      	bne.n	8000c92 <__aeabi_ddiv+0x182>
 8000c90:	e211      	b.n	80010b6 <__aeabi_ddiv+0x5a6>
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d093      	beq.n	8000bbe <__aeabi_ddiv+0xae>
 8000c96:	4a35      	ldr	r2, [pc, #212]	; (8000d6c <__aeabi_ddiv+0x25c>)
 8000c98:	445a      	add	r2, fp
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	dc00      	bgt.n	8000ca0 <__aeabi_ddiv+0x190>
 8000c9e:	e13c      	b.n	8000f1a <__aeabi_ddiv+0x40a>
 8000ca0:	076b      	lsls	r3, r5, #29
 8000ca2:	d000      	beq.n	8000ca6 <__aeabi_ddiv+0x196>
 8000ca4:	e1a7      	b.n	8000ff6 <__aeabi_ddiv+0x4e6>
 8000ca6:	08ed      	lsrs	r5, r5, #3
 8000ca8:	4643      	mov	r3, r8
 8000caa:	01db      	lsls	r3, r3, #7
 8000cac:	d506      	bpl.n	8000cbc <__aeabi_ddiv+0x1ac>
 8000cae:	4642      	mov	r2, r8
 8000cb0:	4b2f      	ldr	r3, [pc, #188]	; (8000d70 <__aeabi_ddiv+0x260>)
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	4690      	mov	r8, r2
 8000cb6:	2280      	movs	r2, #128	; 0x80
 8000cb8:	00d2      	lsls	r2, r2, #3
 8000cba:	445a      	add	r2, fp
 8000cbc:	4b2d      	ldr	r3, [pc, #180]	; (8000d74 <__aeabi_ddiv+0x264>)
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	dc8e      	bgt.n	8000be0 <__aeabi_ddiv+0xd0>
 8000cc2:	4643      	mov	r3, r8
 8000cc4:	0552      	lsls	r2, r2, #21
 8000cc6:	0758      	lsls	r0, r3, #29
 8000cc8:	025c      	lsls	r4, r3, #9
 8000cca:	4305      	orrs	r5, r0
 8000ccc:	0b24      	lsrs	r4, r4, #12
 8000cce:	0d53      	lsrs	r3, r2, #21
 8000cd0:	e778      	b.n	8000bc4 <__aeabi_ddiv+0xb4>
 8000cd2:	46ba      	mov	sl, r7
 8000cd4:	46a0      	mov	r8, r4
 8000cd6:	0015      	movs	r5, r2
 8000cd8:	9000      	str	r0, [sp, #0]
 8000cda:	e7d4      	b.n	8000c86 <__aeabi_ddiv+0x176>
 8000cdc:	464a      	mov	r2, r9
 8000cde:	2303      	movs	r3, #3
 8000ce0:	431a      	orrs	r2, r3
 8000ce2:	4691      	mov	r9, r2
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	4652      	mov	r2, sl
 8000ce8:	e74f      	b.n	8000b8a <__aeabi_ddiv+0x7a>
 8000cea:	4649      	mov	r1, r9
 8000cec:	2301      	movs	r3, #1
 8000cee:	4319      	orrs	r1, r3
 8000cf0:	4689      	mov	r9, r1
 8000cf2:	2400      	movs	r4, #0
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	e748      	b.n	8000b8a <__aeabi_ddiv+0x7a>
 8000cf8:	230c      	movs	r3, #12
 8000cfa:	4699      	mov	r9, r3
 8000cfc:	3b09      	subs	r3, #9
 8000cfe:	46a0      	mov	r8, r4
 8000d00:	4683      	mov	fp, r0
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	e728      	b.n	8000b58 <__aeabi_ddiv+0x48>
 8000d06:	2304      	movs	r3, #4
 8000d08:	4699      	mov	r9, r3
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	469b      	mov	fp, r3
 8000d0e:	3301      	adds	r3, #1
 8000d10:	2500      	movs	r5, #0
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	e720      	b.n	8000b58 <__aeabi_ddiv+0x48>
 8000d16:	2300      	movs	r3, #0
 8000d18:	2480      	movs	r4, #128	; 0x80
 8000d1a:	469a      	mov	sl, r3
 8000d1c:	2500      	movs	r5, #0
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <__aeabi_ddiv+0x244>)
 8000d20:	0324      	lsls	r4, r4, #12
 8000d22:	e74f      	b.n	8000bc4 <__aeabi_ddiv+0xb4>
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	4641      	mov	r1, r8
 8000d28:	031b      	lsls	r3, r3, #12
 8000d2a:	4219      	tst	r1, r3
 8000d2c:	d008      	beq.n	8000d40 <__aeabi_ddiv+0x230>
 8000d2e:	421c      	tst	r4, r3
 8000d30:	d106      	bne.n	8000d40 <__aeabi_ddiv+0x230>
 8000d32:	431c      	orrs	r4, r3
 8000d34:	0324      	lsls	r4, r4, #12
 8000d36:	46ba      	mov	sl, r7
 8000d38:	0015      	movs	r5, r2
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <__aeabi_ddiv+0x244>)
 8000d3c:	0b24      	lsrs	r4, r4, #12
 8000d3e:	e741      	b.n	8000bc4 <__aeabi_ddiv+0xb4>
 8000d40:	2480      	movs	r4, #128	; 0x80
 8000d42:	4643      	mov	r3, r8
 8000d44:	0324      	lsls	r4, r4, #12
 8000d46:	431c      	orrs	r4, r3
 8000d48:	0324      	lsls	r4, r4, #12
 8000d4a:	46b2      	mov	sl, r6
 8000d4c:	4b01      	ldr	r3, [pc, #4]	; (8000d54 <__aeabi_ddiv+0x244>)
 8000d4e:	0b24      	lsrs	r4, r4, #12
 8000d50:	e738      	b.n	8000bc4 <__aeabi_ddiv+0xb4>
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	000007ff 	.word	0x000007ff
 8000d58:	fffffc01 	.word	0xfffffc01
 8000d5c:	080063d4 	.word	0x080063d4
 8000d60:	fffff801 	.word	0xfffff801
 8000d64:	fffffc0d 	.word	0xfffffc0d
 8000d68:	000003f3 	.word	0x000003f3
 8000d6c:	000003ff 	.word	0x000003ff
 8000d70:	feffffff 	.word	0xfeffffff
 8000d74:	000007fe 	.word	0x000007fe
 8000d78:	4544      	cmp	r4, r8
 8000d7a:	d200      	bcs.n	8000d7e <__aeabi_ddiv+0x26e>
 8000d7c:	e116      	b.n	8000fac <__aeabi_ddiv+0x49c>
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_ddiv+0x272>
 8000d80:	e111      	b.n	8000fa6 <__aeabi_ddiv+0x496>
 8000d82:	2301      	movs	r3, #1
 8000d84:	425b      	negs	r3, r3
 8000d86:	469c      	mov	ip, r3
 8000d88:	002e      	movs	r6, r5
 8000d8a:	4640      	mov	r0, r8
 8000d8c:	2500      	movs	r5, #0
 8000d8e:	44e3      	add	fp, ip
 8000d90:	0223      	lsls	r3, r4, #8
 8000d92:	0e14      	lsrs	r4, r2, #24
 8000d94:	431c      	orrs	r4, r3
 8000d96:	0c1b      	lsrs	r3, r3, #16
 8000d98:	4699      	mov	r9, r3
 8000d9a:	0423      	lsls	r3, r4, #16
 8000d9c:	0c1f      	lsrs	r7, r3, #16
 8000d9e:	0212      	lsls	r2, r2, #8
 8000da0:	4649      	mov	r1, r9
 8000da2:	9200      	str	r2, [sp, #0]
 8000da4:	9701      	str	r7, [sp, #4]
 8000da6:	f7ff fa31 	bl	800020c <__aeabi_uidivmod>
 8000daa:	0002      	movs	r2, r0
 8000dac:	437a      	muls	r2, r7
 8000dae:	040b      	lsls	r3, r1, #16
 8000db0:	0c31      	lsrs	r1, r6, #16
 8000db2:	4680      	mov	r8, r0
 8000db4:	4319      	orrs	r1, r3
 8000db6:	428a      	cmp	r2, r1
 8000db8:	d90b      	bls.n	8000dd2 <__aeabi_ddiv+0x2c2>
 8000dba:	2301      	movs	r3, #1
 8000dbc:	425b      	negs	r3, r3
 8000dbe:	469c      	mov	ip, r3
 8000dc0:	1909      	adds	r1, r1, r4
 8000dc2:	44e0      	add	r8, ip
 8000dc4:	428c      	cmp	r4, r1
 8000dc6:	d804      	bhi.n	8000dd2 <__aeabi_ddiv+0x2c2>
 8000dc8:	428a      	cmp	r2, r1
 8000dca:	d902      	bls.n	8000dd2 <__aeabi_ddiv+0x2c2>
 8000dcc:	1e83      	subs	r3, r0, #2
 8000dce:	4698      	mov	r8, r3
 8000dd0:	1909      	adds	r1, r1, r4
 8000dd2:	1a88      	subs	r0, r1, r2
 8000dd4:	4649      	mov	r1, r9
 8000dd6:	f7ff fa19 	bl	800020c <__aeabi_uidivmod>
 8000dda:	0409      	lsls	r1, r1, #16
 8000ddc:	468c      	mov	ip, r1
 8000dde:	0431      	lsls	r1, r6, #16
 8000de0:	4666      	mov	r6, ip
 8000de2:	9a01      	ldr	r2, [sp, #4]
 8000de4:	0c09      	lsrs	r1, r1, #16
 8000de6:	4342      	muls	r2, r0
 8000de8:	0003      	movs	r3, r0
 8000dea:	4331      	orrs	r1, r6
 8000dec:	428a      	cmp	r2, r1
 8000dee:	d904      	bls.n	8000dfa <__aeabi_ddiv+0x2ea>
 8000df0:	1909      	adds	r1, r1, r4
 8000df2:	3b01      	subs	r3, #1
 8000df4:	428c      	cmp	r4, r1
 8000df6:	d800      	bhi.n	8000dfa <__aeabi_ddiv+0x2ea>
 8000df8:	e111      	b.n	800101e <__aeabi_ddiv+0x50e>
 8000dfa:	1a89      	subs	r1, r1, r2
 8000dfc:	4642      	mov	r2, r8
 8000dfe:	9e00      	ldr	r6, [sp, #0]
 8000e00:	0412      	lsls	r2, r2, #16
 8000e02:	431a      	orrs	r2, r3
 8000e04:	0c33      	lsrs	r3, r6, #16
 8000e06:	001f      	movs	r7, r3
 8000e08:	0c10      	lsrs	r0, r2, #16
 8000e0a:	4690      	mov	r8, r2
 8000e0c:	9302      	str	r3, [sp, #8]
 8000e0e:	0413      	lsls	r3, r2, #16
 8000e10:	0432      	lsls	r2, r6, #16
 8000e12:	0c16      	lsrs	r6, r2, #16
 8000e14:	0032      	movs	r2, r6
 8000e16:	0c1b      	lsrs	r3, r3, #16
 8000e18:	435a      	muls	r2, r3
 8000e1a:	9603      	str	r6, [sp, #12]
 8000e1c:	437b      	muls	r3, r7
 8000e1e:	4346      	muls	r6, r0
 8000e20:	4378      	muls	r0, r7
 8000e22:	0c17      	lsrs	r7, r2, #16
 8000e24:	46bc      	mov	ip, r7
 8000e26:	199b      	adds	r3, r3, r6
 8000e28:	4463      	add	r3, ip
 8000e2a:	429e      	cmp	r6, r3
 8000e2c:	d903      	bls.n	8000e36 <__aeabi_ddiv+0x326>
 8000e2e:	2680      	movs	r6, #128	; 0x80
 8000e30:	0276      	lsls	r6, r6, #9
 8000e32:	46b4      	mov	ip, r6
 8000e34:	4460      	add	r0, ip
 8000e36:	0c1e      	lsrs	r6, r3, #16
 8000e38:	1830      	adds	r0, r6, r0
 8000e3a:	0416      	lsls	r6, r2, #16
 8000e3c:	041b      	lsls	r3, r3, #16
 8000e3e:	0c36      	lsrs	r6, r6, #16
 8000e40:	199e      	adds	r6, r3, r6
 8000e42:	4281      	cmp	r1, r0
 8000e44:	d200      	bcs.n	8000e48 <__aeabi_ddiv+0x338>
 8000e46:	e09c      	b.n	8000f82 <__aeabi_ddiv+0x472>
 8000e48:	d100      	bne.n	8000e4c <__aeabi_ddiv+0x33c>
 8000e4a:	e097      	b.n	8000f7c <__aeabi_ddiv+0x46c>
 8000e4c:	1bae      	subs	r6, r5, r6
 8000e4e:	1a09      	subs	r1, r1, r0
 8000e50:	42b5      	cmp	r5, r6
 8000e52:	4180      	sbcs	r0, r0
 8000e54:	4240      	negs	r0, r0
 8000e56:	1a08      	subs	r0, r1, r0
 8000e58:	4284      	cmp	r4, r0
 8000e5a:	d100      	bne.n	8000e5e <__aeabi_ddiv+0x34e>
 8000e5c:	e111      	b.n	8001082 <__aeabi_ddiv+0x572>
 8000e5e:	4649      	mov	r1, r9
 8000e60:	f7ff f9d4 	bl	800020c <__aeabi_uidivmod>
 8000e64:	9a01      	ldr	r2, [sp, #4]
 8000e66:	040b      	lsls	r3, r1, #16
 8000e68:	4342      	muls	r2, r0
 8000e6a:	0c31      	lsrs	r1, r6, #16
 8000e6c:	0005      	movs	r5, r0
 8000e6e:	4319      	orrs	r1, r3
 8000e70:	428a      	cmp	r2, r1
 8000e72:	d907      	bls.n	8000e84 <__aeabi_ddiv+0x374>
 8000e74:	1909      	adds	r1, r1, r4
 8000e76:	3d01      	subs	r5, #1
 8000e78:	428c      	cmp	r4, r1
 8000e7a:	d803      	bhi.n	8000e84 <__aeabi_ddiv+0x374>
 8000e7c:	428a      	cmp	r2, r1
 8000e7e:	d901      	bls.n	8000e84 <__aeabi_ddiv+0x374>
 8000e80:	1e85      	subs	r5, r0, #2
 8000e82:	1909      	adds	r1, r1, r4
 8000e84:	1a88      	subs	r0, r1, r2
 8000e86:	4649      	mov	r1, r9
 8000e88:	f7ff f9c0 	bl	800020c <__aeabi_uidivmod>
 8000e8c:	0409      	lsls	r1, r1, #16
 8000e8e:	468c      	mov	ip, r1
 8000e90:	0431      	lsls	r1, r6, #16
 8000e92:	4666      	mov	r6, ip
 8000e94:	9a01      	ldr	r2, [sp, #4]
 8000e96:	0c09      	lsrs	r1, r1, #16
 8000e98:	4342      	muls	r2, r0
 8000e9a:	0003      	movs	r3, r0
 8000e9c:	4331      	orrs	r1, r6
 8000e9e:	428a      	cmp	r2, r1
 8000ea0:	d907      	bls.n	8000eb2 <__aeabi_ddiv+0x3a2>
 8000ea2:	1909      	adds	r1, r1, r4
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	428c      	cmp	r4, r1
 8000ea8:	d803      	bhi.n	8000eb2 <__aeabi_ddiv+0x3a2>
 8000eaa:	428a      	cmp	r2, r1
 8000eac:	d901      	bls.n	8000eb2 <__aeabi_ddiv+0x3a2>
 8000eae:	1e83      	subs	r3, r0, #2
 8000eb0:	1909      	adds	r1, r1, r4
 8000eb2:	9e03      	ldr	r6, [sp, #12]
 8000eb4:	1a89      	subs	r1, r1, r2
 8000eb6:	0032      	movs	r2, r6
 8000eb8:	042d      	lsls	r5, r5, #16
 8000eba:	431d      	orrs	r5, r3
 8000ebc:	9f02      	ldr	r7, [sp, #8]
 8000ebe:	042b      	lsls	r3, r5, #16
 8000ec0:	0c1b      	lsrs	r3, r3, #16
 8000ec2:	435a      	muls	r2, r3
 8000ec4:	437b      	muls	r3, r7
 8000ec6:	469c      	mov	ip, r3
 8000ec8:	0c28      	lsrs	r0, r5, #16
 8000eca:	4346      	muls	r6, r0
 8000ecc:	0c13      	lsrs	r3, r2, #16
 8000ece:	44b4      	add	ip, r6
 8000ed0:	4463      	add	r3, ip
 8000ed2:	4378      	muls	r0, r7
 8000ed4:	429e      	cmp	r6, r3
 8000ed6:	d903      	bls.n	8000ee0 <__aeabi_ddiv+0x3d0>
 8000ed8:	2680      	movs	r6, #128	; 0x80
 8000eda:	0276      	lsls	r6, r6, #9
 8000edc:	46b4      	mov	ip, r6
 8000ede:	4460      	add	r0, ip
 8000ee0:	0c1e      	lsrs	r6, r3, #16
 8000ee2:	0412      	lsls	r2, r2, #16
 8000ee4:	041b      	lsls	r3, r3, #16
 8000ee6:	0c12      	lsrs	r2, r2, #16
 8000ee8:	1830      	adds	r0, r6, r0
 8000eea:	189b      	adds	r3, r3, r2
 8000eec:	4281      	cmp	r1, r0
 8000eee:	d306      	bcc.n	8000efe <__aeabi_ddiv+0x3ee>
 8000ef0:	d002      	beq.n	8000ef8 <__aeabi_ddiv+0x3e8>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	431d      	orrs	r5, r3
 8000ef6:	e6ce      	b.n	8000c96 <__aeabi_ddiv+0x186>
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d100      	bne.n	8000efe <__aeabi_ddiv+0x3ee>
 8000efc:	e6cb      	b.n	8000c96 <__aeabi_ddiv+0x186>
 8000efe:	1861      	adds	r1, r4, r1
 8000f00:	1e6e      	subs	r6, r5, #1
 8000f02:	42a1      	cmp	r1, r4
 8000f04:	d200      	bcs.n	8000f08 <__aeabi_ddiv+0x3f8>
 8000f06:	e0a4      	b.n	8001052 <__aeabi_ddiv+0x542>
 8000f08:	4281      	cmp	r1, r0
 8000f0a:	d200      	bcs.n	8000f0e <__aeabi_ddiv+0x3fe>
 8000f0c:	e0c9      	b.n	80010a2 <__aeabi_ddiv+0x592>
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_ddiv+0x402>
 8000f10:	e0d9      	b.n	80010c6 <__aeabi_ddiv+0x5b6>
 8000f12:	0035      	movs	r5, r6
 8000f14:	e7ed      	b.n	8000ef2 <__aeabi_ddiv+0x3e2>
 8000f16:	2501      	movs	r5, #1
 8000f18:	426d      	negs	r5, r5
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	1a89      	subs	r1, r1, r2
 8000f1e:	2938      	cmp	r1, #56	; 0x38
 8000f20:	dd00      	ble.n	8000f24 <__aeabi_ddiv+0x414>
 8000f22:	e64c      	b.n	8000bbe <__aeabi_ddiv+0xae>
 8000f24:	291f      	cmp	r1, #31
 8000f26:	dc00      	bgt.n	8000f2a <__aeabi_ddiv+0x41a>
 8000f28:	e07f      	b.n	800102a <__aeabi_ddiv+0x51a>
 8000f2a:	231f      	movs	r3, #31
 8000f2c:	425b      	negs	r3, r3
 8000f2e:	1a9a      	subs	r2, r3, r2
 8000f30:	4643      	mov	r3, r8
 8000f32:	40d3      	lsrs	r3, r2
 8000f34:	2920      	cmp	r1, #32
 8000f36:	d004      	beq.n	8000f42 <__aeabi_ddiv+0x432>
 8000f38:	4644      	mov	r4, r8
 8000f3a:	4a65      	ldr	r2, [pc, #404]	; (80010d0 <__aeabi_ddiv+0x5c0>)
 8000f3c:	445a      	add	r2, fp
 8000f3e:	4094      	lsls	r4, r2
 8000f40:	4325      	orrs	r5, r4
 8000f42:	1e6a      	subs	r2, r5, #1
 8000f44:	4195      	sbcs	r5, r2
 8000f46:	2207      	movs	r2, #7
 8000f48:	432b      	orrs	r3, r5
 8000f4a:	0015      	movs	r5, r2
 8000f4c:	2400      	movs	r4, #0
 8000f4e:	401d      	ands	r5, r3
 8000f50:	421a      	tst	r2, r3
 8000f52:	d100      	bne.n	8000f56 <__aeabi_ddiv+0x446>
 8000f54:	e0a1      	b.n	800109a <__aeabi_ddiv+0x58a>
 8000f56:	220f      	movs	r2, #15
 8000f58:	2400      	movs	r4, #0
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	2a04      	cmp	r2, #4
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_ddiv+0x452>
 8000f60:	e098      	b.n	8001094 <__aeabi_ddiv+0x584>
 8000f62:	1d1a      	adds	r2, r3, #4
 8000f64:	429a      	cmp	r2, r3
 8000f66:	419b      	sbcs	r3, r3
 8000f68:	425b      	negs	r3, r3
 8000f6a:	18e4      	adds	r4, r4, r3
 8000f6c:	0013      	movs	r3, r2
 8000f6e:	0222      	lsls	r2, r4, #8
 8000f70:	d400      	bmi.n	8000f74 <__aeabi_ddiv+0x464>
 8000f72:	e08f      	b.n	8001094 <__aeabi_ddiv+0x584>
 8000f74:	2301      	movs	r3, #1
 8000f76:	2400      	movs	r4, #0
 8000f78:	2500      	movs	r5, #0
 8000f7a:	e623      	b.n	8000bc4 <__aeabi_ddiv+0xb4>
 8000f7c:	42b5      	cmp	r5, r6
 8000f7e:	d300      	bcc.n	8000f82 <__aeabi_ddiv+0x472>
 8000f80:	e764      	b.n	8000e4c <__aeabi_ddiv+0x33c>
 8000f82:	4643      	mov	r3, r8
 8000f84:	1e5a      	subs	r2, r3, #1
 8000f86:	9b00      	ldr	r3, [sp, #0]
 8000f88:	469c      	mov	ip, r3
 8000f8a:	4465      	add	r5, ip
 8000f8c:	001f      	movs	r7, r3
 8000f8e:	429d      	cmp	r5, r3
 8000f90:	419b      	sbcs	r3, r3
 8000f92:	425b      	negs	r3, r3
 8000f94:	191b      	adds	r3, r3, r4
 8000f96:	18c9      	adds	r1, r1, r3
 8000f98:	428c      	cmp	r4, r1
 8000f9a:	d23a      	bcs.n	8001012 <__aeabi_ddiv+0x502>
 8000f9c:	4288      	cmp	r0, r1
 8000f9e:	d863      	bhi.n	8001068 <__aeabi_ddiv+0x558>
 8000fa0:	d060      	beq.n	8001064 <__aeabi_ddiv+0x554>
 8000fa2:	4690      	mov	r8, r2
 8000fa4:	e752      	b.n	8000e4c <__aeabi_ddiv+0x33c>
 8000fa6:	42aa      	cmp	r2, r5
 8000fa8:	d900      	bls.n	8000fac <__aeabi_ddiv+0x49c>
 8000faa:	e6ea      	b.n	8000d82 <__aeabi_ddiv+0x272>
 8000fac:	4643      	mov	r3, r8
 8000fae:	07de      	lsls	r6, r3, #31
 8000fb0:	0858      	lsrs	r0, r3, #1
 8000fb2:	086b      	lsrs	r3, r5, #1
 8000fb4:	431e      	orrs	r6, r3
 8000fb6:	07ed      	lsls	r5, r5, #31
 8000fb8:	e6ea      	b.n	8000d90 <__aeabi_ddiv+0x280>
 8000fba:	4648      	mov	r0, r9
 8000fbc:	f000 ff1a 	bl	8001df4 <__clzsi2>
 8000fc0:	0001      	movs	r1, r0
 8000fc2:	0002      	movs	r2, r0
 8000fc4:	3115      	adds	r1, #21
 8000fc6:	3220      	adds	r2, #32
 8000fc8:	291c      	cmp	r1, #28
 8000fca:	dc00      	bgt.n	8000fce <__aeabi_ddiv+0x4be>
 8000fcc:	e61a      	b.n	8000c04 <__aeabi_ddiv+0xf4>
 8000fce:	464b      	mov	r3, r9
 8000fd0:	3808      	subs	r0, #8
 8000fd2:	4083      	lsls	r3, r0
 8000fd4:	2500      	movs	r5, #0
 8000fd6:	4698      	mov	r8, r3
 8000fd8:	e620      	b.n	8000c1c <__aeabi_ddiv+0x10c>
 8000fda:	f000 ff0b 	bl	8001df4 <__clzsi2>
 8000fde:	0003      	movs	r3, r0
 8000fe0:	001a      	movs	r2, r3
 8000fe2:	3215      	adds	r2, #21
 8000fe4:	3020      	adds	r0, #32
 8000fe6:	2a1c      	cmp	r2, #28
 8000fe8:	dc00      	bgt.n	8000fec <__aeabi_ddiv+0x4dc>
 8000fea:	e630      	b.n	8000c4e <__aeabi_ddiv+0x13e>
 8000fec:	4654      	mov	r4, sl
 8000fee:	3b08      	subs	r3, #8
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	409c      	lsls	r4, r3
 8000ff4:	e635      	b.n	8000c62 <__aeabi_ddiv+0x152>
 8000ff6:	230f      	movs	r3, #15
 8000ff8:	402b      	ands	r3, r5
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	d100      	bne.n	8001000 <__aeabi_ddiv+0x4f0>
 8000ffe:	e652      	b.n	8000ca6 <__aeabi_ddiv+0x196>
 8001000:	2305      	movs	r3, #5
 8001002:	425b      	negs	r3, r3
 8001004:	42ab      	cmp	r3, r5
 8001006:	419b      	sbcs	r3, r3
 8001008:	3504      	adds	r5, #4
 800100a:	425b      	negs	r3, r3
 800100c:	08ed      	lsrs	r5, r5, #3
 800100e:	4498      	add	r8, r3
 8001010:	e64a      	b.n	8000ca8 <__aeabi_ddiv+0x198>
 8001012:	428c      	cmp	r4, r1
 8001014:	d1c5      	bne.n	8000fa2 <__aeabi_ddiv+0x492>
 8001016:	42af      	cmp	r7, r5
 8001018:	d9c0      	bls.n	8000f9c <__aeabi_ddiv+0x48c>
 800101a:	4690      	mov	r8, r2
 800101c:	e716      	b.n	8000e4c <__aeabi_ddiv+0x33c>
 800101e:	428a      	cmp	r2, r1
 8001020:	d800      	bhi.n	8001024 <__aeabi_ddiv+0x514>
 8001022:	e6ea      	b.n	8000dfa <__aeabi_ddiv+0x2ea>
 8001024:	1e83      	subs	r3, r0, #2
 8001026:	1909      	adds	r1, r1, r4
 8001028:	e6e7      	b.n	8000dfa <__aeabi_ddiv+0x2ea>
 800102a:	4a2a      	ldr	r2, [pc, #168]	; (80010d4 <__aeabi_ddiv+0x5c4>)
 800102c:	0028      	movs	r0, r5
 800102e:	445a      	add	r2, fp
 8001030:	4643      	mov	r3, r8
 8001032:	4095      	lsls	r5, r2
 8001034:	4093      	lsls	r3, r2
 8001036:	40c8      	lsrs	r0, r1
 8001038:	1e6a      	subs	r2, r5, #1
 800103a:	4195      	sbcs	r5, r2
 800103c:	4644      	mov	r4, r8
 800103e:	4303      	orrs	r3, r0
 8001040:	432b      	orrs	r3, r5
 8001042:	40cc      	lsrs	r4, r1
 8001044:	075a      	lsls	r2, r3, #29
 8001046:	d092      	beq.n	8000f6e <__aeabi_ddiv+0x45e>
 8001048:	220f      	movs	r2, #15
 800104a:	401a      	ands	r2, r3
 800104c:	2a04      	cmp	r2, #4
 800104e:	d188      	bne.n	8000f62 <__aeabi_ddiv+0x452>
 8001050:	e78d      	b.n	8000f6e <__aeabi_ddiv+0x45e>
 8001052:	0035      	movs	r5, r6
 8001054:	4281      	cmp	r1, r0
 8001056:	d000      	beq.n	800105a <__aeabi_ddiv+0x54a>
 8001058:	e74b      	b.n	8000ef2 <__aeabi_ddiv+0x3e2>
 800105a:	9a00      	ldr	r2, [sp, #0]
 800105c:	4293      	cmp	r3, r2
 800105e:	d000      	beq.n	8001062 <__aeabi_ddiv+0x552>
 8001060:	e747      	b.n	8000ef2 <__aeabi_ddiv+0x3e2>
 8001062:	e618      	b.n	8000c96 <__aeabi_ddiv+0x186>
 8001064:	42ae      	cmp	r6, r5
 8001066:	d99c      	bls.n	8000fa2 <__aeabi_ddiv+0x492>
 8001068:	2302      	movs	r3, #2
 800106a:	425b      	negs	r3, r3
 800106c:	469c      	mov	ip, r3
 800106e:	9b00      	ldr	r3, [sp, #0]
 8001070:	44e0      	add	r8, ip
 8001072:	469c      	mov	ip, r3
 8001074:	4465      	add	r5, ip
 8001076:	429d      	cmp	r5, r3
 8001078:	419b      	sbcs	r3, r3
 800107a:	425b      	negs	r3, r3
 800107c:	191b      	adds	r3, r3, r4
 800107e:	18c9      	adds	r1, r1, r3
 8001080:	e6e4      	b.n	8000e4c <__aeabi_ddiv+0x33c>
 8001082:	4a15      	ldr	r2, [pc, #84]	; (80010d8 <__aeabi_ddiv+0x5c8>)
 8001084:	445a      	add	r2, fp
 8001086:	2a00      	cmp	r2, #0
 8001088:	dc00      	bgt.n	800108c <__aeabi_ddiv+0x57c>
 800108a:	e744      	b.n	8000f16 <__aeabi_ddiv+0x406>
 800108c:	2301      	movs	r3, #1
 800108e:	2500      	movs	r5, #0
 8001090:	4498      	add	r8, r3
 8001092:	e609      	b.n	8000ca8 <__aeabi_ddiv+0x198>
 8001094:	0765      	lsls	r5, r4, #29
 8001096:	0264      	lsls	r4, r4, #9
 8001098:	0b24      	lsrs	r4, r4, #12
 800109a:	08db      	lsrs	r3, r3, #3
 800109c:	431d      	orrs	r5, r3
 800109e:	2300      	movs	r3, #0
 80010a0:	e590      	b.n	8000bc4 <__aeabi_ddiv+0xb4>
 80010a2:	9e00      	ldr	r6, [sp, #0]
 80010a4:	3d02      	subs	r5, #2
 80010a6:	0072      	lsls	r2, r6, #1
 80010a8:	42b2      	cmp	r2, r6
 80010aa:	41bf      	sbcs	r7, r7
 80010ac:	427f      	negs	r7, r7
 80010ae:	193c      	adds	r4, r7, r4
 80010b0:	1909      	adds	r1, r1, r4
 80010b2:	9200      	str	r2, [sp, #0]
 80010b4:	e7ce      	b.n	8001054 <__aeabi_ddiv+0x544>
 80010b6:	2480      	movs	r4, #128	; 0x80
 80010b8:	4643      	mov	r3, r8
 80010ba:	0324      	lsls	r4, r4, #12
 80010bc:	431c      	orrs	r4, r3
 80010be:	0324      	lsls	r4, r4, #12
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <__aeabi_ddiv+0x5cc>)
 80010c2:	0b24      	lsrs	r4, r4, #12
 80010c4:	e57e      	b.n	8000bc4 <__aeabi_ddiv+0xb4>
 80010c6:	9a00      	ldr	r2, [sp, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d3ea      	bcc.n	80010a2 <__aeabi_ddiv+0x592>
 80010cc:	0035      	movs	r5, r6
 80010ce:	e7c4      	b.n	800105a <__aeabi_ddiv+0x54a>
 80010d0:	0000043e 	.word	0x0000043e
 80010d4:	0000041e 	.word	0x0000041e
 80010d8:	000003ff 	.word	0x000003ff
 80010dc:	000007ff 	.word	0x000007ff

080010e0 <__aeabi_dmul>:
 80010e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e2:	4657      	mov	r7, sl
 80010e4:	464e      	mov	r6, r9
 80010e6:	4645      	mov	r5, r8
 80010e8:	46de      	mov	lr, fp
 80010ea:	b5e0      	push	{r5, r6, r7, lr}
 80010ec:	4698      	mov	r8, r3
 80010ee:	030c      	lsls	r4, r1, #12
 80010f0:	004b      	lsls	r3, r1, #1
 80010f2:	0006      	movs	r6, r0
 80010f4:	4692      	mov	sl, r2
 80010f6:	b087      	sub	sp, #28
 80010f8:	0b24      	lsrs	r4, r4, #12
 80010fa:	0d5b      	lsrs	r3, r3, #21
 80010fc:	0fcf      	lsrs	r7, r1, #31
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d06c      	beq.n	80011dc <__aeabi_dmul+0xfc>
 8001102:	4add      	ldr	r2, [pc, #884]	; (8001478 <__aeabi_dmul+0x398>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d100      	bne.n	800110a <__aeabi_dmul+0x2a>
 8001108:	e086      	b.n	8001218 <__aeabi_dmul+0x138>
 800110a:	0f42      	lsrs	r2, r0, #29
 800110c:	00e4      	lsls	r4, r4, #3
 800110e:	4314      	orrs	r4, r2
 8001110:	2280      	movs	r2, #128	; 0x80
 8001112:	0412      	lsls	r2, r2, #16
 8001114:	4314      	orrs	r4, r2
 8001116:	4ad9      	ldr	r2, [pc, #868]	; (800147c <__aeabi_dmul+0x39c>)
 8001118:	00c5      	lsls	r5, r0, #3
 800111a:	4694      	mov	ip, r2
 800111c:	4463      	add	r3, ip
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2300      	movs	r3, #0
 8001122:	4699      	mov	r9, r3
 8001124:	469b      	mov	fp, r3
 8001126:	4643      	mov	r3, r8
 8001128:	4642      	mov	r2, r8
 800112a:	031e      	lsls	r6, r3, #12
 800112c:	0fd2      	lsrs	r2, r2, #31
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4650      	mov	r0, sl
 8001132:	4690      	mov	r8, r2
 8001134:	0b36      	lsrs	r6, r6, #12
 8001136:	0d5b      	lsrs	r3, r3, #21
 8001138:	d100      	bne.n	800113c <__aeabi_dmul+0x5c>
 800113a:	e078      	b.n	800122e <__aeabi_dmul+0x14e>
 800113c:	4ace      	ldr	r2, [pc, #824]	; (8001478 <__aeabi_dmul+0x398>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d01d      	beq.n	800117e <__aeabi_dmul+0x9e>
 8001142:	49ce      	ldr	r1, [pc, #824]	; (800147c <__aeabi_dmul+0x39c>)
 8001144:	0f42      	lsrs	r2, r0, #29
 8001146:	468c      	mov	ip, r1
 8001148:	9900      	ldr	r1, [sp, #0]
 800114a:	4463      	add	r3, ip
 800114c:	00f6      	lsls	r6, r6, #3
 800114e:	468c      	mov	ip, r1
 8001150:	4316      	orrs	r6, r2
 8001152:	2280      	movs	r2, #128	; 0x80
 8001154:	449c      	add	ip, r3
 8001156:	0412      	lsls	r2, r2, #16
 8001158:	4663      	mov	r3, ip
 800115a:	4316      	orrs	r6, r2
 800115c:	00c2      	lsls	r2, r0, #3
 800115e:	2000      	movs	r0, #0
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	9900      	ldr	r1, [sp, #0]
 8001164:	4643      	mov	r3, r8
 8001166:	3101      	adds	r1, #1
 8001168:	468c      	mov	ip, r1
 800116a:	4649      	mov	r1, r9
 800116c:	407b      	eors	r3, r7
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	290f      	cmp	r1, #15
 8001172:	d900      	bls.n	8001176 <__aeabi_dmul+0x96>
 8001174:	e07e      	b.n	8001274 <__aeabi_dmul+0x194>
 8001176:	4bc2      	ldr	r3, [pc, #776]	; (8001480 <__aeabi_dmul+0x3a0>)
 8001178:	0089      	lsls	r1, r1, #2
 800117a:	5859      	ldr	r1, [r3, r1]
 800117c:	468f      	mov	pc, r1
 800117e:	4652      	mov	r2, sl
 8001180:	9b00      	ldr	r3, [sp, #0]
 8001182:	4332      	orrs	r2, r6
 8001184:	d000      	beq.n	8001188 <__aeabi_dmul+0xa8>
 8001186:	e156      	b.n	8001436 <__aeabi_dmul+0x356>
 8001188:	49bb      	ldr	r1, [pc, #748]	; (8001478 <__aeabi_dmul+0x398>)
 800118a:	2600      	movs	r6, #0
 800118c:	468c      	mov	ip, r1
 800118e:	4463      	add	r3, ip
 8001190:	4649      	mov	r1, r9
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2302      	movs	r3, #2
 8001196:	4319      	orrs	r1, r3
 8001198:	4689      	mov	r9, r1
 800119a:	2002      	movs	r0, #2
 800119c:	e7e1      	b.n	8001162 <__aeabi_dmul+0x82>
 800119e:	4643      	mov	r3, r8
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	0034      	movs	r4, r6
 80011a4:	0015      	movs	r5, r2
 80011a6:	4683      	mov	fp, r0
 80011a8:	465b      	mov	r3, fp
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d05e      	beq.n	800126c <__aeabi_dmul+0x18c>
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	d100      	bne.n	80011b4 <__aeabi_dmul+0xd4>
 80011b2:	e1f3      	b.n	800159c <__aeabi_dmul+0x4bc>
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d000      	beq.n	80011ba <__aeabi_dmul+0xda>
 80011b8:	e118      	b.n	80013ec <__aeabi_dmul+0x30c>
 80011ba:	2200      	movs	r2, #0
 80011bc:	2400      	movs	r4, #0
 80011be:	2500      	movs	r5, #0
 80011c0:	9b01      	ldr	r3, [sp, #4]
 80011c2:	0512      	lsls	r2, r2, #20
 80011c4:	4322      	orrs	r2, r4
 80011c6:	07db      	lsls	r3, r3, #31
 80011c8:	431a      	orrs	r2, r3
 80011ca:	0028      	movs	r0, r5
 80011cc:	0011      	movs	r1, r2
 80011ce:	b007      	add	sp, #28
 80011d0:	bcf0      	pop	{r4, r5, r6, r7}
 80011d2:	46bb      	mov	fp, r7
 80011d4:	46b2      	mov	sl, r6
 80011d6:	46a9      	mov	r9, r5
 80011d8:	46a0      	mov	r8, r4
 80011da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011dc:	0025      	movs	r5, r4
 80011de:	4305      	orrs	r5, r0
 80011e0:	d100      	bne.n	80011e4 <__aeabi_dmul+0x104>
 80011e2:	e141      	b.n	8001468 <__aeabi_dmul+0x388>
 80011e4:	2c00      	cmp	r4, #0
 80011e6:	d100      	bne.n	80011ea <__aeabi_dmul+0x10a>
 80011e8:	e1ad      	b.n	8001546 <__aeabi_dmul+0x466>
 80011ea:	0020      	movs	r0, r4
 80011ec:	f000 fe02 	bl	8001df4 <__clzsi2>
 80011f0:	0001      	movs	r1, r0
 80011f2:	0002      	movs	r2, r0
 80011f4:	390b      	subs	r1, #11
 80011f6:	231d      	movs	r3, #29
 80011f8:	0010      	movs	r0, r2
 80011fa:	1a5b      	subs	r3, r3, r1
 80011fc:	0031      	movs	r1, r6
 80011fe:	0035      	movs	r5, r6
 8001200:	3808      	subs	r0, #8
 8001202:	4084      	lsls	r4, r0
 8001204:	40d9      	lsrs	r1, r3
 8001206:	4085      	lsls	r5, r0
 8001208:	430c      	orrs	r4, r1
 800120a:	489e      	ldr	r0, [pc, #632]	; (8001484 <__aeabi_dmul+0x3a4>)
 800120c:	1a83      	subs	r3, r0, r2
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2300      	movs	r3, #0
 8001212:	4699      	mov	r9, r3
 8001214:	469b      	mov	fp, r3
 8001216:	e786      	b.n	8001126 <__aeabi_dmul+0x46>
 8001218:	0005      	movs	r5, r0
 800121a:	4325      	orrs	r5, r4
 800121c:	d000      	beq.n	8001220 <__aeabi_dmul+0x140>
 800121e:	e11c      	b.n	800145a <__aeabi_dmul+0x37a>
 8001220:	2208      	movs	r2, #8
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2302      	movs	r3, #2
 8001226:	2400      	movs	r4, #0
 8001228:	4691      	mov	r9, r2
 800122a:	469b      	mov	fp, r3
 800122c:	e77b      	b.n	8001126 <__aeabi_dmul+0x46>
 800122e:	4652      	mov	r2, sl
 8001230:	4332      	orrs	r2, r6
 8001232:	d100      	bne.n	8001236 <__aeabi_dmul+0x156>
 8001234:	e10a      	b.n	800144c <__aeabi_dmul+0x36c>
 8001236:	2e00      	cmp	r6, #0
 8001238:	d100      	bne.n	800123c <__aeabi_dmul+0x15c>
 800123a:	e176      	b.n	800152a <__aeabi_dmul+0x44a>
 800123c:	0030      	movs	r0, r6
 800123e:	f000 fdd9 	bl	8001df4 <__clzsi2>
 8001242:	0002      	movs	r2, r0
 8001244:	3a0b      	subs	r2, #11
 8001246:	231d      	movs	r3, #29
 8001248:	0001      	movs	r1, r0
 800124a:	1a9b      	subs	r3, r3, r2
 800124c:	4652      	mov	r2, sl
 800124e:	3908      	subs	r1, #8
 8001250:	40da      	lsrs	r2, r3
 8001252:	408e      	lsls	r6, r1
 8001254:	4316      	orrs	r6, r2
 8001256:	4652      	mov	r2, sl
 8001258:	408a      	lsls	r2, r1
 800125a:	9b00      	ldr	r3, [sp, #0]
 800125c:	4989      	ldr	r1, [pc, #548]	; (8001484 <__aeabi_dmul+0x3a4>)
 800125e:	1a18      	subs	r0, r3, r0
 8001260:	0003      	movs	r3, r0
 8001262:	468c      	mov	ip, r1
 8001264:	4463      	add	r3, ip
 8001266:	2000      	movs	r0, #0
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	e77a      	b.n	8001162 <__aeabi_dmul+0x82>
 800126c:	2400      	movs	r4, #0
 800126e:	2500      	movs	r5, #0
 8001270:	4a81      	ldr	r2, [pc, #516]	; (8001478 <__aeabi_dmul+0x398>)
 8001272:	e7a5      	b.n	80011c0 <__aeabi_dmul+0xe0>
 8001274:	0c2f      	lsrs	r7, r5, #16
 8001276:	042d      	lsls	r5, r5, #16
 8001278:	0c2d      	lsrs	r5, r5, #16
 800127a:	002b      	movs	r3, r5
 800127c:	0c11      	lsrs	r1, r2, #16
 800127e:	0412      	lsls	r2, r2, #16
 8001280:	0c12      	lsrs	r2, r2, #16
 8001282:	4353      	muls	r3, r2
 8001284:	4698      	mov	r8, r3
 8001286:	0013      	movs	r3, r2
 8001288:	0028      	movs	r0, r5
 800128a:	437b      	muls	r3, r7
 800128c:	4699      	mov	r9, r3
 800128e:	4348      	muls	r0, r1
 8001290:	4448      	add	r0, r9
 8001292:	4683      	mov	fp, r0
 8001294:	4640      	mov	r0, r8
 8001296:	000b      	movs	r3, r1
 8001298:	0c00      	lsrs	r0, r0, #16
 800129a:	4682      	mov	sl, r0
 800129c:	4658      	mov	r0, fp
 800129e:	437b      	muls	r3, r7
 80012a0:	4450      	add	r0, sl
 80012a2:	9302      	str	r3, [sp, #8]
 80012a4:	4581      	cmp	r9, r0
 80012a6:	d906      	bls.n	80012b6 <__aeabi_dmul+0x1d6>
 80012a8:	469a      	mov	sl, r3
 80012aa:	2380      	movs	r3, #128	; 0x80
 80012ac:	025b      	lsls	r3, r3, #9
 80012ae:	4699      	mov	r9, r3
 80012b0:	44ca      	add	sl, r9
 80012b2:	4653      	mov	r3, sl
 80012b4:	9302      	str	r3, [sp, #8]
 80012b6:	0c03      	lsrs	r3, r0, #16
 80012b8:	469b      	mov	fp, r3
 80012ba:	4643      	mov	r3, r8
 80012bc:	041b      	lsls	r3, r3, #16
 80012be:	0400      	lsls	r0, r0, #16
 80012c0:	0c1b      	lsrs	r3, r3, #16
 80012c2:	4698      	mov	r8, r3
 80012c4:	0003      	movs	r3, r0
 80012c6:	4443      	add	r3, r8
 80012c8:	9304      	str	r3, [sp, #16]
 80012ca:	0c33      	lsrs	r3, r6, #16
 80012cc:	4699      	mov	r9, r3
 80012ce:	002b      	movs	r3, r5
 80012d0:	0436      	lsls	r6, r6, #16
 80012d2:	0c36      	lsrs	r6, r6, #16
 80012d4:	4373      	muls	r3, r6
 80012d6:	4698      	mov	r8, r3
 80012d8:	0033      	movs	r3, r6
 80012da:	437b      	muls	r3, r7
 80012dc:	469a      	mov	sl, r3
 80012de:	464b      	mov	r3, r9
 80012e0:	435d      	muls	r5, r3
 80012e2:	435f      	muls	r7, r3
 80012e4:	4643      	mov	r3, r8
 80012e6:	4455      	add	r5, sl
 80012e8:	0c18      	lsrs	r0, r3, #16
 80012ea:	1940      	adds	r0, r0, r5
 80012ec:	4582      	cmp	sl, r0
 80012ee:	d903      	bls.n	80012f8 <__aeabi_dmul+0x218>
 80012f0:	2380      	movs	r3, #128	; 0x80
 80012f2:	025b      	lsls	r3, r3, #9
 80012f4:	469a      	mov	sl, r3
 80012f6:	4457      	add	r7, sl
 80012f8:	0c05      	lsrs	r5, r0, #16
 80012fa:	19eb      	adds	r3, r5, r7
 80012fc:	9305      	str	r3, [sp, #20]
 80012fe:	4643      	mov	r3, r8
 8001300:	041d      	lsls	r5, r3, #16
 8001302:	0c2d      	lsrs	r5, r5, #16
 8001304:	0400      	lsls	r0, r0, #16
 8001306:	1940      	adds	r0, r0, r5
 8001308:	0c25      	lsrs	r5, r4, #16
 800130a:	0424      	lsls	r4, r4, #16
 800130c:	0c24      	lsrs	r4, r4, #16
 800130e:	0027      	movs	r7, r4
 8001310:	4357      	muls	r7, r2
 8001312:	436a      	muls	r2, r5
 8001314:	4690      	mov	r8, r2
 8001316:	002a      	movs	r2, r5
 8001318:	0c3b      	lsrs	r3, r7, #16
 800131a:	469a      	mov	sl, r3
 800131c:	434a      	muls	r2, r1
 800131e:	4361      	muls	r1, r4
 8001320:	4441      	add	r1, r8
 8001322:	4451      	add	r1, sl
 8001324:	4483      	add	fp, r0
 8001326:	4588      	cmp	r8, r1
 8001328:	d903      	bls.n	8001332 <__aeabi_dmul+0x252>
 800132a:	2380      	movs	r3, #128	; 0x80
 800132c:	025b      	lsls	r3, r3, #9
 800132e:	4698      	mov	r8, r3
 8001330:	4442      	add	r2, r8
 8001332:	043f      	lsls	r7, r7, #16
 8001334:	0c0b      	lsrs	r3, r1, #16
 8001336:	0c3f      	lsrs	r7, r7, #16
 8001338:	0409      	lsls	r1, r1, #16
 800133a:	19c9      	adds	r1, r1, r7
 800133c:	0027      	movs	r7, r4
 800133e:	4698      	mov	r8, r3
 8001340:	464b      	mov	r3, r9
 8001342:	4377      	muls	r7, r6
 8001344:	435c      	muls	r4, r3
 8001346:	436e      	muls	r6, r5
 8001348:	435d      	muls	r5, r3
 800134a:	0c3b      	lsrs	r3, r7, #16
 800134c:	4699      	mov	r9, r3
 800134e:	19a4      	adds	r4, r4, r6
 8001350:	444c      	add	r4, r9
 8001352:	4442      	add	r2, r8
 8001354:	9503      	str	r5, [sp, #12]
 8001356:	42a6      	cmp	r6, r4
 8001358:	d904      	bls.n	8001364 <__aeabi_dmul+0x284>
 800135a:	2380      	movs	r3, #128	; 0x80
 800135c:	025b      	lsls	r3, r3, #9
 800135e:	4698      	mov	r8, r3
 8001360:	4445      	add	r5, r8
 8001362:	9503      	str	r5, [sp, #12]
 8001364:	9b02      	ldr	r3, [sp, #8]
 8001366:	043f      	lsls	r7, r7, #16
 8001368:	445b      	add	r3, fp
 800136a:	001e      	movs	r6, r3
 800136c:	4283      	cmp	r3, r0
 800136e:	4180      	sbcs	r0, r0
 8001370:	0423      	lsls	r3, r4, #16
 8001372:	4698      	mov	r8, r3
 8001374:	9b05      	ldr	r3, [sp, #20]
 8001376:	0c3f      	lsrs	r7, r7, #16
 8001378:	4447      	add	r7, r8
 800137a:	4698      	mov	r8, r3
 800137c:	1876      	adds	r6, r6, r1
 800137e:	428e      	cmp	r6, r1
 8001380:	4189      	sbcs	r1, r1
 8001382:	4447      	add	r7, r8
 8001384:	4240      	negs	r0, r0
 8001386:	183d      	adds	r5, r7, r0
 8001388:	46a8      	mov	r8, r5
 800138a:	4693      	mov	fp, r2
 800138c:	4249      	negs	r1, r1
 800138e:	468a      	mov	sl, r1
 8001390:	44c3      	add	fp, r8
 8001392:	429f      	cmp	r7, r3
 8001394:	41bf      	sbcs	r7, r7
 8001396:	4580      	cmp	r8, r0
 8001398:	4180      	sbcs	r0, r0
 800139a:	9b03      	ldr	r3, [sp, #12]
 800139c:	44da      	add	sl, fp
 800139e:	4698      	mov	r8, r3
 80013a0:	4653      	mov	r3, sl
 80013a2:	4240      	negs	r0, r0
 80013a4:	427f      	negs	r7, r7
 80013a6:	4307      	orrs	r7, r0
 80013a8:	0c24      	lsrs	r4, r4, #16
 80013aa:	4593      	cmp	fp, r2
 80013ac:	4192      	sbcs	r2, r2
 80013ae:	458a      	cmp	sl, r1
 80013b0:	4189      	sbcs	r1, r1
 80013b2:	193f      	adds	r7, r7, r4
 80013b4:	0ddc      	lsrs	r4, r3, #23
 80013b6:	9b04      	ldr	r3, [sp, #16]
 80013b8:	0275      	lsls	r5, r6, #9
 80013ba:	431d      	orrs	r5, r3
 80013bc:	1e68      	subs	r0, r5, #1
 80013be:	4185      	sbcs	r5, r0
 80013c0:	4653      	mov	r3, sl
 80013c2:	4252      	negs	r2, r2
 80013c4:	4249      	negs	r1, r1
 80013c6:	430a      	orrs	r2, r1
 80013c8:	18bf      	adds	r7, r7, r2
 80013ca:	4447      	add	r7, r8
 80013cc:	0df6      	lsrs	r6, r6, #23
 80013ce:	027f      	lsls	r7, r7, #9
 80013d0:	4335      	orrs	r5, r6
 80013d2:	025a      	lsls	r2, r3, #9
 80013d4:	433c      	orrs	r4, r7
 80013d6:	4315      	orrs	r5, r2
 80013d8:	01fb      	lsls	r3, r7, #7
 80013da:	d400      	bmi.n	80013de <__aeabi_dmul+0x2fe>
 80013dc:	e0c1      	b.n	8001562 <__aeabi_dmul+0x482>
 80013de:	2101      	movs	r1, #1
 80013e0:	086a      	lsrs	r2, r5, #1
 80013e2:	400d      	ands	r5, r1
 80013e4:	4315      	orrs	r5, r2
 80013e6:	07e2      	lsls	r2, r4, #31
 80013e8:	4315      	orrs	r5, r2
 80013ea:	0864      	lsrs	r4, r4, #1
 80013ec:	4926      	ldr	r1, [pc, #152]	; (8001488 <__aeabi_dmul+0x3a8>)
 80013ee:	4461      	add	r1, ip
 80013f0:	2900      	cmp	r1, #0
 80013f2:	dd56      	ble.n	80014a2 <__aeabi_dmul+0x3c2>
 80013f4:	076b      	lsls	r3, r5, #29
 80013f6:	d009      	beq.n	800140c <__aeabi_dmul+0x32c>
 80013f8:	220f      	movs	r2, #15
 80013fa:	402a      	ands	r2, r5
 80013fc:	2a04      	cmp	r2, #4
 80013fe:	d005      	beq.n	800140c <__aeabi_dmul+0x32c>
 8001400:	1d2a      	adds	r2, r5, #4
 8001402:	42aa      	cmp	r2, r5
 8001404:	41ad      	sbcs	r5, r5
 8001406:	426d      	negs	r5, r5
 8001408:	1964      	adds	r4, r4, r5
 800140a:	0015      	movs	r5, r2
 800140c:	01e3      	lsls	r3, r4, #7
 800140e:	d504      	bpl.n	800141a <__aeabi_dmul+0x33a>
 8001410:	2180      	movs	r1, #128	; 0x80
 8001412:	4a1e      	ldr	r2, [pc, #120]	; (800148c <__aeabi_dmul+0x3ac>)
 8001414:	00c9      	lsls	r1, r1, #3
 8001416:	4014      	ands	r4, r2
 8001418:	4461      	add	r1, ip
 800141a:	4a1d      	ldr	r2, [pc, #116]	; (8001490 <__aeabi_dmul+0x3b0>)
 800141c:	4291      	cmp	r1, r2
 800141e:	dd00      	ble.n	8001422 <__aeabi_dmul+0x342>
 8001420:	e724      	b.n	800126c <__aeabi_dmul+0x18c>
 8001422:	0762      	lsls	r2, r4, #29
 8001424:	08ed      	lsrs	r5, r5, #3
 8001426:	0264      	lsls	r4, r4, #9
 8001428:	0549      	lsls	r1, r1, #21
 800142a:	4315      	orrs	r5, r2
 800142c:	0b24      	lsrs	r4, r4, #12
 800142e:	0d4a      	lsrs	r2, r1, #21
 8001430:	e6c6      	b.n	80011c0 <__aeabi_dmul+0xe0>
 8001432:	9701      	str	r7, [sp, #4]
 8001434:	e6b8      	b.n	80011a8 <__aeabi_dmul+0xc8>
 8001436:	4a10      	ldr	r2, [pc, #64]	; (8001478 <__aeabi_dmul+0x398>)
 8001438:	2003      	movs	r0, #3
 800143a:	4694      	mov	ip, r2
 800143c:	4463      	add	r3, ip
 800143e:	464a      	mov	r2, r9
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	2303      	movs	r3, #3
 8001444:	431a      	orrs	r2, r3
 8001446:	4691      	mov	r9, r2
 8001448:	4652      	mov	r2, sl
 800144a:	e68a      	b.n	8001162 <__aeabi_dmul+0x82>
 800144c:	4649      	mov	r1, r9
 800144e:	2301      	movs	r3, #1
 8001450:	4319      	orrs	r1, r3
 8001452:	4689      	mov	r9, r1
 8001454:	2600      	movs	r6, #0
 8001456:	2001      	movs	r0, #1
 8001458:	e683      	b.n	8001162 <__aeabi_dmul+0x82>
 800145a:	220c      	movs	r2, #12
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	2303      	movs	r3, #3
 8001460:	0005      	movs	r5, r0
 8001462:	4691      	mov	r9, r2
 8001464:	469b      	mov	fp, r3
 8001466:	e65e      	b.n	8001126 <__aeabi_dmul+0x46>
 8001468:	2304      	movs	r3, #4
 800146a:	4699      	mov	r9, r3
 800146c:	2300      	movs	r3, #0
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	3301      	adds	r3, #1
 8001472:	2400      	movs	r4, #0
 8001474:	469b      	mov	fp, r3
 8001476:	e656      	b.n	8001126 <__aeabi_dmul+0x46>
 8001478:	000007ff 	.word	0x000007ff
 800147c:	fffffc01 	.word	0xfffffc01
 8001480:	08006414 	.word	0x08006414
 8001484:	fffffc0d 	.word	0xfffffc0d
 8001488:	000003ff 	.word	0x000003ff
 800148c:	feffffff 	.word	0xfeffffff
 8001490:	000007fe 	.word	0x000007fe
 8001494:	2300      	movs	r3, #0
 8001496:	2480      	movs	r4, #128	; 0x80
 8001498:	2500      	movs	r5, #0
 800149a:	4a44      	ldr	r2, [pc, #272]	; (80015ac <__aeabi_dmul+0x4cc>)
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	0324      	lsls	r4, r4, #12
 80014a0:	e68e      	b.n	80011c0 <__aeabi_dmul+0xe0>
 80014a2:	2001      	movs	r0, #1
 80014a4:	1a40      	subs	r0, r0, r1
 80014a6:	2838      	cmp	r0, #56	; 0x38
 80014a8:	dd00      	ble.n	80014ac <__aeabi_dmul+0x3cc>
 80014aa:	e686      	b.n	80011ba <__aeabi_dmul+0xda>
 80014ac:	281f      	cmp	r0, #31
 80014ae:	dd5b      	ble.n	8001568 <__aeabi_dmul+0x488>
 80014b0:	221f      	movs	r2, #31
 80014b2:	0023      	movs	r3, r4
 80014b4:	4252      	negs	r2, r2
 80014b6:	1a51      	subs	r1, r2, r1
 80014b8:	40cb      	lsrs	r3, r1
 80014ba:	0019      	movs	r1, r3
 80014bc:	2820      	cmp	r0, #32
 80014be:	d003      	beq.n	80014c8 <__aeabi_dmul+0x3e8>
 80014c0:	4a3b      	ldr	r2, [pc, #236]	; (80015b0 <__aeabi_dmul+0x4d0>)
 80014c2:	4462      	add	r2, ip
 80014c4:	4094      	lsls	r4, r2
 80014c6:	4325      	orrs	r5, r4
 80014c8:	1e6a      	subs	r2, r5, #1
 80014ca:	4195      	sbcs	r5, r2
 80014cc:	002a      	movs	r2, r5
 80014ce:	430a      	orrs	r2, r1
 80014d0:	2107      	movs	r1, #7
 80014d2:	000d      	movs	r5, r1
 80014d4:	2400      	movs	r4, #0
 80014d6:	4015      	ands	r5, r2
 80014d8:	4211      	tst	r1, r2
 80014da:	d05b      	beq.n	8001594 <__aeabi_dmul+0x4b4>
 80014dc:	210f      	movs	r1, #15
 80014de:	2400      	movs	r4, #0
 80014e0:	4011      	ands	r1, r2
 80014e2:	2904      	cmp	r1, #4
 80014e4:	d053      	beq.n	800158e <__aeabi_dmul+0x4ae>
 80014e6:	1d11      	adds	r1, r2, #4
 80014e8:	4291      	cmp	r1, r2
 80014ea:	4192      	sbcs	r2, r2
 80014ec:	4252      	negs	r2, r2
 80014ee:	18a4      	adds	r4, r4, r2
 80014f0:	000a      	movs	r2, r1
 80014f2:	0223      	lsls	r3, r4, #8
 80014f4:	d54b      	bpl.n	800158e <__aeabi_dmul+0x4ae>
 80014f6:	2201      	movs	r2, #1
 80014f8:	2400      	movs	r4, #0
 80014fa:	2500      	movs	r5, #0
 80014fc:	e660      	b.n	80011c0 <__aeabi_dmul+0xe0>
 80014fe:	2380      	movs	r3, #128	; 0x80
 8001500:	031b      	lsls	r3, r3, #12
 8001502:	421c      	tst	r4, r3
 8001504:	d009      	beq.n	800151a <__aeabi_dmul+0x43a>
 8001506:	421e      	tst	r6, r3
 8001508:	d107      	bne.n	800151a <__aeabi_dmul+0x43a>
 800150a:	4333      	orrs	r3, r6
 800150c:	031c      	lsls	r4, r3, #12
 800150e:	4643      	mov	r3, r8
 8001510:	0015      	movs	r5, r2
 8001512:	0b24      	lsrs	r4, r4, #12
 8001514:	4a25      	ldr	r2, [pc, #148]	; (80015ac <__aeabi_dmul+0x4cc>)
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	e652      	b.n	80011c0 <__aeabi_dmul+0xe0>
 800151a:	2280      	movs	r2, #128	; 0x80
 800151c:	0312      	lsls	r2, r2, #12
 800151e:	4314      	orrs	r4, r2
 8001520:	0324      	lsls	r4, r4, #12
 8001522:	4a22      	ldr	r2, [pc, #136]	; (80015ac <__aeabi_dmul+0x4cc>)
 8001524:	0b24      	lsrs	r4, r4, #12
 8001526:	9701      	str	r7, [sp, #4]
 8001528:	e64a      	b.n	80011c0 <__aeabi_dmul+0xe0>
 800152a:	f000 fc63 	bl	8001df4 <__clzsi2>
 800152e:	0003      	movs	r3, r0
 8001530:	001a      	movs	r2, r3
 8001532:	3215      	adds	r2, #21
 8001534:	3020      	adds	r0, #32
 8001536:	2a1c      	cmp	r2, #28
 8001538:	dc00      	bgt.n	800153c <__aeabi_dmul+0x45c>
 800153a:	e684      	b.n	8001246 <__aeabi_dmul+0x166>
 800153c:	4656      	mov	r6, sl
 800153e:	3b08      	subs	r3, #8
 8001540:	2200      	movs	r2, #0
 8001542:	409e      	lsls	r6, r3
 8001544:	e689      	b.n	800125a <__aeabi_dmul+0x17a>
 8001546:	f000 fc55 	bl	8001df4 <__clzsi2>
 800154a:	0001      	movs	r1, r0
 800154c:	0002      	movs	r2, r0
 800154e:	3115      	adds	r1, #21
 8001550:	3220      	adds	r2, #32
 8001552:	291c      	cmp	r1, #28
 8001554:	dc00      	bgt.n	8001558 <__aeabi_dmul+0x478>
 8001556:	e64e      	b.n	80011f6 <__aeabi_dmul+0x116>
 8001558:	0034      	movs	r4, r6
 800155a:	3808      	subs	r0, #8
 800155c:	2500      	movs	r5, #0
 800155e:	4084      	lsls	r4, r0
 8001560:	e653      	b.n	800120a <__aeabi_dmul+0x12a>
 8001562:	9b00      	ldr	r3, [sp, #0]
 8001564:	469c      	mov	ip, r3
 8001566:	e741      	b.n	80013ec <__aeabi_dmul+0x30c>
 8001568:	4912      	ldr	r1, [pc, #72]	; (80015b4 <__aeabi_dmul+0x4d4>)
 800156a:	0022      	movs	r2, r4
 800156c:	4461      	add	r1, ip
 800156e:	002e      	movs	r6, r5
 8001570:	408d      	lsls	r5, r1
 8001572:	408a      	lsls	r2, r1
 8001574:	40c6      	lsrs	r6, r0
 8001576:	1e69      	subs	r1, r5, #1
 8001578:	418d      	sbcs	r5, r1
 800157a:	4332      	orrs	r2, r6
 800157c:	432a      	orrs	r2, r5
 800157e:	40c4      	lsrs	r4, r0
 8001580:	0753      	lsls	r3, r2, #29
 8001582:	d0b6      	beq.n	80014f2 <__aeabi_dmul+0x412>
 8001584:	210f      	movs	r1, #15
 8001586:	4011      	ands	r1, r2
 8001588:	2904      	cmp	r1, #4
 800158a:	d1ac      	bne.n	80014e6 <__aeabi_dmul+0x406>
 800158c:	e7b1      	b.n	80014f2 <__aeabi_dmul+0x412>
 800158e:	0765      	lsls	r5, r4, #29
 8001590:	0264      	lsls	r4, r4, #9
 8001592:	0b24      	lsrs	r4, r4, #12
 8001594:	08d2      	lsrs	r2, r2, #3
 8001596:	4315      	orrs	r5, r2
 8001598:	2200      	movs	r2, #0
 800159a:	e611      	b.n	80011c0 <__aeabi_dmul+0xe0>
 800159c:	2280      	movs	r2, #128	; 0x80
 800159e:	0312      	lsls	r2, r2, #12
 80015a0:	4314      	orrs	r4, r2
 80015a2:	0324      	lsls	r4, r4, #12
 80015a4:	4a01      	ldr	r2, [pc, #4]	; (80015ac <__aeabi_dmul+0x4cc>)
 80015a6:	0b24      	lsrs	r4, r4, #12
 80015a8:	e60a      	b.n	80011c0 <__aeabi_dmul+0xe0>
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	000007ff 	.word	0x000007ff
 80015b0:	0000043e 	.word	0x0000043e
 80015b4:	0000041e 	.word	0x0000041e

080015b8 <__aeabi_dsub>:
 80015b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ba:	4657      	mov	r7, sl
 80015bc:	464e      	mov	r6, r9
 80015be:	4645      	mov	r5, r8
 80015c0:	46de      	mov	lr, fp
 80015c2:	0004      	movs	r4, r0
 80015c4:	b5e0      	push	{r5, r6, r7, lr}
 80015c6:	001f      	movs	r7, r3
 80015c8:	0010      	movs	r0, r2
 80015ca:	030b      	lsls	r3, r1, #12
 80015cc:	0f62      	lsrs	r2, r4, #29
 80015ce:	004e      	lsls	r6, r1, #1
 80015d0:	0fcd      	lsrs	r5, r1, #31
 80015d2:	0a5b      	lsrs	r3, r3, #9
 80015d4:	0339      	lsls	r1, r7, #12
 80015d6:	4313      	orrs	r3, r2
 80015d8:	0a49      	lsrs	r1, r1, #9
 80015da:	00e2      	lsls	r2, r4, #3
 80015dc:	0f44      	lsrs	r4, r0, #29
 80015de:	4321      	orrs	r1, r4
 80015e0:	4cc2      	ldr	r4, [pc, #776]	; (80018ec <__aeabi_dsub+0x334>)
 80015e2:	4691      	mov	r9, r2
 80015e4:	4692      	mov	sl, r2
 80015e6:	00c0      	lsls	r0, r0, #3
 80015e8:	007a      	lsls	r2, r7, #1
 80015ea:	4680      	mov	r8, r0
 80015ec:	0d76      	lsrs	r6, r6, #21
 80015ee:	0d52      	lsrs	r2, r2, #21
 80015f0:	0fff      	lsrs	r7, r7, #31
 80015f2:	42a2      	cmp	r2, r4
 80015f4:	d100      	bne.n	80015f8 <__aeabi_dsub+0x40>
 80015f6:	e0b4      	b.n	8001762 <__aeabi_dsub+0x1aa>
 80015f8:	2401      	movs	r4, #1
 80015fa:	4067      	eors	r7, r4
 80015fc:	46bb      	mov	fp, r7
 80015fe:	42bd      	cmp	r5, r7
 8001600:	d100      	bne.n	8001604 <__aeabi_dsub+0x4c>
 8001602:	e088      	b.n	8001716 <__aeabi_dsub+0x15e>
 8001604:	1ab4      	subs	r4, r6, r2
 8001606:	46a4      	mov	ip, r4
 8001608:	2c00      	cmp	r4, #0
 800160a:	dc00      	bgt.n	800160e <__aeabi_dsub+0x56>
 800160c:	e0b2      	b.n	8001774 <__aeabi_dsub+0x1bc>
 800160e:	2a00      	cmp	r2, #0
 8001610:	d100      	bne.n	8001614 <__aeabi_dsub+0x5c>
 8001612:	e0c5      	b.n	80017a0 <__aeabi_dsub+0x1e8>
 8001614:	4ab5      	ldr	r2, [pc, #724]	; (80018ec <__aeabi_dsub+0x334>)
 8001616:	4296      	cmp	r6, r2
 8001618:	d100      	bne.n	800161c <__aeabi_dsub+0x64>
 800161a:	e28b      	b.n	8001b34 <__aeabi_dsub+0x57c>
 800161c:	2280      	movs	r2, #128	; 0x80
 800161e:	0412      	lsls	r2, r2, #16
 8001620:	4311      	orrs	r1, r2
 8001622:	4662      	mov	r2, ip
 8001624:	2a38      	cmp	r2, #56	; 0x38
 8001626:	dd00      	ble.n	800162a <__aeabi_dsub+0x72>
 8001628:	e1a1      	b.n	800196e <__aeabi_dsub+0x3b6>
 800162a:	2a1f      	cmp	r2, #31
 800162c:	dd00      	ble.n	8001630 <__aeabi_dsub+0x78>
 800162e:	e216      	b.n	8001a5e <__aeabi_dsub+0x4a6>
 8001630:	2720      	movs	r7, #32
 8001632:	000c      	movs	r4, r1
 8001634:	1abf      	subs	r7, r7, r2
 8001636:	40bc      	lsls	r4, r7
 8001638:	0002      	movs	r2, r0
 800163a:	46a0      	mov	r8, r4
 800163c:	4664      	mov	r4, ip
 800163e:	40b8      	lsls	r0, r7
 8001640:	40e2      	lsrs	r2, r4
 8001642:	4644      	mov	r4, r8
 8001644:	4314      	orrs	r4, r2
 8001646:	0002      	movs	r2, r0
 8001648:	1e50      	subs	r0, r2, #1
 800164a:	4182      	sbcs	r2, r0
 800164c:	4660      	mov	r0, ip
 800164e:	40c1      	lsrs	r1, r0
 8001650:	4322      	orrs	r2, r4
 8001652:	1a5b      	subs	r3, r3, r1
 8001654:	4649      	mov	r1, r9
 8001656:	1a8c      	subs	r4, r1, r2
 8001658:	45a1      	cmp	r9, r4
 800165a:	4192      	sbcs	r2, r2
 800165c:	4252      	negs	r2, r2
 800165e:	1a9b      	subs	r3, r3, r2
 8001660:	4698      	mov	r8, r3
 8001662:	4643      	mov	r3, r8
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	d400      	bmi.n	800166a <__aeabi_dsub+0xb2>
 8001668:	e117      	b.n	800189a <__aeabi_dsub+0x2e2>
 800166a:	4643      	mov	r3, r8
 800166c:	025b      	lsls	r3, r3, #9
 800166e:	0a5b      	lsrs	r3, r3, #9
 8001670:	4698      	mov	r8, r3
 8001672:	4643      	mov	r3, r8
 8001674:	2b00      	cmp	r3, #0
 8001676:	d100      	bne.n	800167a <__aeabi_dsub+0xc2>
 8001678:	e16c      	b.n	8001954 <__aeabi_dsub+0x39c>
 800167a:	4640      	mov	r0, r8
 800167c:	f000 fbba 	bl	8001df4 <__clzsi2>
 8001680:	0002      	movs	r2, r0
 8001682:	3a08      	subs	r2, #8
 8001684:	2120      	movs	r1, #32
 8001686:	0020      	movs	r0, r4
 8001688:	4643      	mov	r3, r8
 800168a:	1a89      	subs	r1, r1, r2
 800168c:	4093      	lsls	r3, r2
 800168e:	40c8      	lsrs	r0, r1
 8001690:	4094      	lsls	r4, r2
 8001692:	4303      	orrs	r3, r0
 8001694:	4296      	cmp	r6, r2
 8001696:	dd00      	ble.n	800169a <__aeabi_dsub+0xe2>
 8001698:	e157      	b.n	800194a <__aeabi_dsub+0x392>
 800169a:	1b96      	subs	r6, r2, r6
 800169c:	1c71      	adds	r1, r6, #1
 800169e:	291f      	cmp	r1, #31
 80016a0:	dd00      	ble.n	80016a4 <__aeabi_dsub+0xec>
 80016a2:	e1cb      	b.n	8001a3c <__aeabi_dsub+0x484>
 80016a4:	2220      	movs	r2, #32
 80016a6:	0018      	movs	r0, r3
 80016a8:	0026      	movs	r6, r4
 80016aa:	1a52      	subs	r2, r2, r1
 80016ac:	4094      	lsls	r4, r2
 80016ae:	4090      	lsls	r0, r2
 80016b0:	40ce      	lsrs	r6, r1
 80016b2:	40cb      	lsrs	r3, r1
 80016b4:	1e62      	subs	r2, r4, #1
 80016b6:	4194      	sbcs	r4, r2
 80016b8:	4330      	orrs	r0, r6
 80016ba:	4698      	mov	r8, r3
 80016bc:	2600      	movs	r6, #0
 80016be:	4304      	orrs	r4, r0
 80016c0:	0763      	lsls	r3, r4, #29
 80016c2:	d009      	beq.n	80016d8 <__aeabi_dsub+0x120>
 80016c4:	230f      	movs	r3, #15
 80016c6:	4023      	ands	r3, r4
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	d005      	beq.n	80016d8 <__aeabi_dsub+0x120>
 80016cc:	1d23      	adds	r3, r4, #4
 80016ce:	42a3      	cmp	r3, r4
 80016d0:	41a4      	sbcs	r4, r4
 80016d2:	4264      	negs	r4, r4
 80016d4:	44a0      	add	r8, r4
 80016d6:	001c      	movs	r4, r3
 80016d8:	4643      	mov	r3, r8
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	d400      	bmi.n	80016e0 <__aeabi_dsub+0x128>
 80016de:	e0df      	b.n	80018a0 <__aeabi_dsub+0x2e8>
 80016e0:	4b82      	ldr	r3, [pc, #520]	; (80018ec <__aeabi_dsub+0x334>)
 80016e2:	3601      	adds	r6, #1
 80016e4:	429e      	cmp	r6, r3
 80016e6:	d100      	bne.n	80016ea <__aeabi_dsub+0x132>
 80016e8:	e0fb      	b.n	80018e2 <__aeabi_dsub+0x32a>
 80016ea:	4642      	mov	r2, r8
 80016ec:	4b80      	ldr	r3, [pc, #512]	; (80018f0 <__aeabi_dsub+0x338>)
 80016ee:	08e4      	lsrs	r4, r4, #3
 80016f0:	401a      	ands	r2, r3
 80016f2:	0013      	movs	r3, r2
 80016f4:	0571      	lsls	r1, r6, #21
 80016f6:	0752      	lsls	r2, r2, #29
 80016f8:	025b      	lsls	r3, r3, #9
 80016fa:	4322      	orrs	r2, r4
 80016fc:	0b1b      	lsrs	r3, r3, #12
 80016fe:	0d49      	lsrs	r1, r1, #21
 8001700:	0509      	lsls	r1, r1, #20
 8001702:	07ed      	lsls	r5, r5, #31
 8001704:	4319      	orrs	r1, r3
 8001706:	4329      	orrs	r1, r5
 8001708:	0010      	movs	r0, r2
 800170a:	bcf0      	pop	{r4, r5, r6, r7}
 800170c:	46bb      	mov	fp, r7
 800170e:	46b2      	mov	sl, r6
 8001710:	46a9      	mov	r9, r5
 8001712:	46a0      	mov	r8, r4
 8001714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001716:	1ab4      	subs	r4, r6, r2
 8001718:	46a4      	mov	ip, r4
 800171a:	2c00      	cmp	r4, #0
 800171c:	dd58      	ble.n	80017d0 <__aeabi_dsub+0x218>
 800171e:	2a00      	cmp	r2, #0
 8001720:	d100      	bne.n	8001724 <__aeabi_dsub+0x16c>
 8001722:	e09e      	b.n	8001862 <__aeabi_dsub+0x2aa>
 8001724:	4a71      	ldr	r2, [pc, #452]	; (80018ec <__aeabi_dsub+0x334>)
 8001726:	4296      	cmp	r6, r2
 8001728:	d100      	bne.n	800172c <__aeabi_dsub+0x174>
 800172a:	e13b      	b.n	80019a4 <__aeabi_dsub+0x3ec>
 800172c:	2280      	movs	r2, #128	; 0x80
 800172e:	0412      	lsls	r2, r2, #16
 8001730:	4311      	orrs	r1, r2
 8001732:	4662      	mov	r2, ip
 8001734:	2a38      	cmp	r2, #56	; 0x38
 8001736:	dd00      	ble.n	800173a <__aeabi_dsub+0x182>
 8001738:	e0c1      	b.n	80018be <__aeabi_dsub+0x306>
 800173a:	2a1f      	cmp	r2, #31
 800173c:	dc00      	bgt.n	8001740 <__aeabi_dsub+0x188>
 800173e:	e1bb      	b.n	8001ab8 <__aeabi_dsub+0x500>
 8001740:	000c      	movs	r4, r1
 8001742:	3a20      	subs	r2, #32
 8001744:	40d4      	lsrs	r4, r2
 8001746:	0022      	movs	r2, r4
 8001748:	4664      	mov	r4, ip
 800174a:	2c20      	cmp	r4, #32
 800174c:	d004      	beq.n	8001758 <__aeabi_dsub+0x1a0>
 800174e:	2740      	movs	r7, #64	; 0x40
 8001750:	1b3f      	subs	r7, r7, r4
 8001752:	40b9      	lsls	r1, r7
 8001754:	4308      	orrs	r0, r1
 8001756:	4680      	mov	r8, r0
 8001758:	4644      	mov	r4, r8
 800175a:	1e61      	subs	r1, r4, #1
 800175c:	418c      	sbcs	r4, r1
 800175e:	4314      	orrs	r4, r2
 8001760:	e0b1      	b.n	80018c6 <__aeabi_dsub+0x30e>
 8001762:	000c      	movs	r4, r1
 8001764:	4304      	orrs	r4, r0
 8001766:	d02a      	beq.n	80017be <__aeabi_dsub+0x206>
 8001768:	46bb      	mov	fp, r7
 800176a:	42bd      	cmp	r5, r7
 800176c:	d02d      	beq.n	80017ca <__aeabi_dsub+0x212>
 800176e:	4c61      	ldr	r4, [pc, #388]	; (80018f4 <__aeabi_dsub+0x33c>)
 8001770:	46a4      	mov	ip, r4
 8001772:	44b4      	add	ip, r6
 8001774:	4664      	mov	r4, ip
 8001776:	2c00      	cmp	r4, #0
 8001778:	d05c      	beq.n	8001834 <__aeabi_dsub+0x27c>
 800177a:	1b94      	subs	r4, r2, r6
 800177c:	46a4      	mov	ip, r4
 800177e:	2e00      	cmp	r6, #0
 8001780:	d000      	beq.n	8001784 <__aeabi_dsub+0x1cc>
 8001782:	e115      	b.n	80019b0 <__aeabi_dsub+0x3f8>
 8001784:	464d      	mov	r5, r9
 8001786:	431d      	orrs	r5, r3
 8001788:	d100      	bne.n	800178c <__aeabi_dsub+0x1d4>
 800178a:	e1c3      	b.n	8001b14 <__aeabi_dsub+0x55c>
 800178c:	1e65      	subs	r5, r4, #1
 800178e:	2c01      	cmp	r4, #1
 8001790:	d100      	bne.n	8001794 <__aeabi_dsub+0x1dc>
 8001792:	e20c      	b.n	8001bae <__aeabi_dsub+0x5f6>
 8001794:	4e55      	ldr	r6, [pc, #340]	; (80018ec <__aeabi_dsub+0x334>)
 8001796:	42b4      	cmp	r4, r6
 8001798:	d100      	bne.n	800179c <__aeabi_dsub+0x1e4>
 800179a:	e1f8      	b.n	8001b8e <__aeabi_dsub+0x5d6>
 800179c:	46ac      	mov	ip, r5
 800179e:	e10e      	b.n	80019be <__aeabi_dsub+0x406>
 80017a0:	000a      	movs	r2, r1
 80017a2:	4302      	orrs	r2, r0
 80017a4:	d100      	bne.n	80017a8 <__aeabi_dsub+0x1f0>
 80017a6:	e136      	b.n	8001a16 <__aeabi_dsub+0x45e>
 80017a8:	0022      	movs	r2, r4
 80017aa:	3a01      	subs	r2, #1
 80017ac:	2c01      	cmp	r4, #1
 80017ae:	d100      	bne.n	80017b2 <__aeabi_dsub+0x1fa>
 80017b0:	e1c6      	b.n	8001b40 <__aeabi_dsub+0x588>
 80017b2:	4c4e      	ldr	r4, [pc, #312]	; (80018ec <__aeabi_dsub+0x334>)
 80017b4:	45a4      	cmp	ip, r4
 80017b6:	d100      	bne.n	80017ba <__aeabi_dsub+0x202>
 80017b8:	e0f4      	b.n	80019a4 <__aeabi_dsub+0x3ec>
 80017ba:	4694      	mov	ip, r2
 80017bc:	e731      	b.n	8001622 <__aeabi_dsub+0x6a>
 80017be:	2401      	movs	r4, #1
 80017c0:	4067      	eors	r7, r4
 80017c2:	46bb      	mov	fp, r7
 80017c4:	42bd      	cmp	r5, r7
 80017c6:	d000      	beq.n	80017ca <__aeabi_dsub+0x212>
 80017c8:	e71c      	b.n	8001604 <__aeabi_dsub+0x4c>
 80017ca:	4c4a      	ldr	r4, [pc, #296]	; (80018f4 <__aeabi_dsub+0x33c>)
 80017cc:	46a4      	mov	ip, r4
 80017ce:	44b4      	add	ip, r6
 80017d0:	4664      	mov	r4, ip
 80017d2:	2c00      	cmp	r4, #0
 80017d4:	d100      	bne.n	80017d8 <__aeabi_dsub+0x220>
 80017d6:	e0cf      	b.n	8001978 <__aeabi_dsub+0x3c0>
 80017d8:	1b94      	subs	r4, r2, r6
 80017da:	46a4      	mov	ip, r4
 80017dc:	2e00      	cmp	r6, #0
 80017de:	d100      	bne.n	80017e2 <__aeabi_dsub+0x22a>
 80017e0:	e15c      	b.n	8001a9c <__aeabi_dsub+0x4e4>
 80017e2:	4e42      	ldr	r6, [pc, #264]	; (80018ec <__aeabi_dsub+0x334>)
 80017e4:	42b2      	cmp	r2, r6
 80017e6:	d100      	bne.n	80017ea <__aeabi_dsub+0x232>
 80017e8:	e1ec      	b.n	8001bc4 <__aeabi_dsub+0x60c>
 80017ea:	2680      	movs	r6, #128	; 0x80
 80017ec:	0436      	lsls	r6, r6, #16
 80017ee:	4333      	orrs	r3, r6
 80017f0:	4664      	mov	r4, ip
 80017f2:	2c38      	cmp	r4, #56	; 0x38
 80017f4:	dd00      	ble.n	80017f8 <__aeabi_dsub+0x240>
 80017f6:	e1b3      	b.n	8001b60 <__aeabi_dsub+0x5a8>
 80017f8:	2c1f      	cmp	r4, #31
 80017fa:	dd00      	ble.n	80017fe <__aeabi_dsub+0x246>
 80017fc:	e238      	b.n	8001c70 <__aeabi_dsub+0x6b8>
 80017fe:	2620      	movs	r6, #32
 8001800:	1b36      	subs	r6, r6, r4
 8001802:	001c      	movs	r4, r3
 8001804:	40b4      	lsls	r4, r6
 8001806:	464f      	mov	r7, r9
 8001808:	46a0      	mov	r8, r4
 800180a:	4664      	mov	r4, ip
 800180c:	40e7      	lsrs	r7, r4
 800180e:	4644      	mov	r4, r8
 8001810:	433c      	orrs	r4, r7
 8001812:	464f      	mov	r7, r9
 8001814:	40b7      	lsls	r7, r6
 8001816:	003e      	movs	r6, r7
 8001818:	1e77      	subs	r7, r6, #1
 800181a:	41be      	sbcs	r6, r7
 800181c:	4334      	orrs	r4, r6
 800181e:	4666      	mov	r6, ip
 8001820:	40f3      	lsrs	r3, r6
 8001822:	18c9      	adds	r1, r1, r3
 8001824:	1824      	adds	r4, r4, r0
 8001826:	4284      	cmp	r4, r0
 8001828:	419b      	sbcs	r3, r3
 800182a:	425b      	negs	r3, r3
 800182c:	4698      	mov	r8, r3
 800182e:	0016      	movs	r6, r2
 8001830:	4488      	add	r8, r1
 8001832:	e04e      	b.n	80018d2 <__aeabi_dsub+0x31a>
 8001834:	4a30      	ldr	r2, [pc, #192]	; (80018f8 <__aeabi_dsub+0x340>)
 8001836:	1c74      	adds	r4, r6, #1
 8001838:	4214      	tst	r4, r2
 800183a:	d000      	beq.n	800183e <__aeabi_dsub+0x286>
 800183c:	e0d6      	b.n	80019ec <__aeabi_dsub+0x434>
 800183e:	464a      	mov	r2, r9
 8001840:	431a      	orrs	r2, r3
 8001842:	2e00      	cmp	r6, #0
 8001844:	d000      	beq.n	8001848 <__aeabi_dsub+0x290>
 8001846:	e15b      	b.n	8001b00 <__aeabi_dsub+0x548>
 8001848:	2a00      	cmp	r2, #0
 800184a:	d100      	bne.n	800184e <__aeabi_dsub+0x296>
 800184c:	e1a5      	b.n	8001b9a <__aeabi_dsub+0x5e2>
 800184e:	000a      	movs	r2, r1
 8001850:	4302      	orrs	r2, r0
 8001852:	d000      	beq.n	8001856 <__aeabi_dsub+0x29e>
 8001854:	e1bb      	b.n	8001bce <__aeabi_dsub+0x616>
 8001856:	464a      	mov	r2, r9
 8001858:	0759      	lsls	r1, r3, #29
 800185a:	08d2      	lsrs	r2, r2, #3
 800185c:	430a      	orrs	r2, r1
 800185e:	08db      	lsrs	r3, r3, #3
 8001860:	e027      	b.n	80018b2 <__aeabi_dsub+0x2fa>
 8001862:	000a      	movs	r2, r1
 8001864:	4302      	orrs	r2, r0
 8001866:	d100      	bne.n	800186a <__aeabi_dsub+0x2b2>
 8001868:	e174      	b.n	8001b54 <__aeabi_dsub+0x59c>
 800186a:	0022      	movs	r2, r4
 800186c:	3a01      	subs	r2, #1
 800186e:	2c01      	cmp	r4, #1
 8001870:	d005      	beq.n	800187e <__aeabi_dsub+0x2c6>
 8001872:	4c1e      	ldr	r4, [pc, #120]	; (80018ec <__aeabi_dsub+0x334>)
 8001874:	45a4      	cmp	ip, r4
 8001876:	d100      	bne.n	800187a <__aeabi_dsub+0x2c2>
 8001878:	e094      	b.n	80019a4 <__aeabi_dsub+0x3ec>
 800187a:	4694      	mov	ip, r2
 800187c:	e759      	b.n	8001732 <__aeabi_dsub+0x17a>
 800187e:	4448      	add	r0, r9
 8001880:	4548      	cmp	r0, r9
 8001882:	4192      	sbcs	r2, r2
 8001884:	185b      	adds	r3, r3, r1
 8001886:	4698      	mov	r8, r3
 8001888:	0004      	movs	r4, r0
 800188a:	4252      	negs	r2, r2
 800188c:	4490      	add	r8, r2
 800188e:	4643      	mov	r3, r8
 8001890:	2602      	movs	r6, #2
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	d500      	bpl.n	8001898 <__aeabi_dsub+0x2e0>
 8001896:	e0c4      	b.n	8001a22 <__aeabi_dsub+0x46a>
 8001898:	3e01      	subs	r6, #1
 800189a:	0763      	lsls	r3, r4, #29
 800189c:	d000      	beq.n	80018a0 <__aeabi_dsub+0x2e8>
 800189e:	e711      	b.n	80016c4 <__aeabi_dsub+0x10c>
 80018a0:	4643      	mov	r3, r8
 80018a2:	46b4      	mov	ip, r6
 80018a4:	0759      	lsls	r1, r3, #29
 80018a6:	08e2      	lsrs	r2, r4, #3
 80018a8:	430a      	orrs	r2, r1
 80018aa:	08db      	lsrs	r3, r3, #3
 80018ac:	490f      	ldr	r1, [pc, #60]	; (80018ec <__aeabi_dsub+0x334>)
 80018ae:	458c      	cmp	ip, r1
 80018b0:	d040      	beq.n	8001934 <__aeabi_dsub+0x37c>
 80018b2:	4661      	mov	r1, ip
 80018b4:	031b      	lsls	r3, r3, #12
 80018b6:	0549      	lsls	r1, r1, #21
 80018b8:	0b1b      	lsrs	r3, r3, #12
 80018ba:	0d49      	lsrs	r1, r1, #21
 80018bc:	e720      	b.n	8001700 <__aeabi_dsub+0x148>
 80018be:	4301      	orrs	r1, r0
 80018c0:	000c      	movs	r4, r1
 80018c2:	1e61      	subs	r1, r4, #1
 80018c4:	418c      	sbcs	r4, r1
 80018c6:	444c      	add	r4, r9
 80018c8:	454c      	cmp	r4, r9
 80018ca:	4192      	sbcs	r2, r2
 80018cc:	4252      	negs	r2, r2
 80018ce:	4690      	mov	r8, r2
 80018d0:	4498      	add	r8, r3
 80018d2:	4643      	mov	r3, r8
 80018d4:	021b      	lsls	r3, r3, #8
 80018d6:	d5e0      	bpl.n	800189a <__aeabi_dsub+0x2e2>
 80018d8:	4b04      	ldr	r3, [pc, #16]	; (80018ec <__aeabi_dsub+0x334>)
 80018da:	3601      	adds	r6, #1
 80018dc:	429e      	cmp	r6, r3
 80018de:	d000      	beq.n	80018e2 <__aeabi_dsub+0x32a>
 80018e0:	e09f      	b.n	8001a22 <__aeabi_dsub+0x46a>
 80018e2:	0031      	movs	r1, r6
 80018e4:	2300      	movs	r3, #0
 80018e6:	2200      	movs	r2, #0
 80018e8:	e70a      	b.n	8001700 <__aeabi_dsub+0x148>
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	000007ff 	.word	0x000007ff
 80018f0:	ff7fffff 	.word	0xff7fffff
 80018f4:	fffff801 	.word	0xfffff801
 80018f8:	000007fe 	.word	0x000007fe
 80018fc:	2a00      	cmp	r2, #0
 80018fe:	d100      	bne.n	8001902 <__aeabi_dsub+0x34a>
 8001900:	e160      	b.n	8001bc4 <__aeabi_dsub+0x60c>
 8001902:	000a      	movs	r2, r1
 8001904:	4302      	orrs	r2, r0
 8001906:	d04d      	beq.n	80019a4 <__aeabi_dsub+0x3ec>
 8001908:	464a      	mov	r2, r9
 800190a:	075c      	lsls	r4, r3, #29
 800190c:	08d2      	lsrs	r2, r2, #3
 800190e:	4322      	orrs	r2, r4
 8001910:	2480      	movs	r4, #128	; 0x80
 8001912:	08db      	lsrs	r3, r3, #3
 8001914:	0324      	lsls	r4, r4, #12
 8001916:	4223      	tst	r3, r4
 8001918:	d007      	beq.n	800192a <__aeabi_dsub+0x372>
 800191a:	08ce      	lsrs	r6, r1, #3
 800191c:	4226      	tst	r6, r4
 800191e:	d104      	bne.n	800192a <__aeabi_dsub+0x372>
 8001920:	465d      	mov	r5, fp
 8001922:	0033      	movs	r3, r6
 8001924:	08c2      	lsrs	r2, r0, #3
 8001926:	0749      	lsls	r1, r1, #29
 8001928:	430a      	orrs	r2, r1
 800192a:	0f51      	lsrs	r1, r2, #29
 800192c:	00d2      	lsls	r2, r2, #3
 800192e:	08d2      	lsrs	r2, r2, #3
 8001930:	0749      	lsls	r1, r1, #29
 8001932:	430a      	orrs	r2, r1
 8001934:	0011      	movs	r1, r2
 8001936:	4319      	orrs	r1, r3
 8001938:	d100      	bne.n	800193c <__aeabi_dsub+0x384>
 800193a:	e1c8      	b.n	8001cce <__aeabi_dsub+0x716>
 800193c:	2180      	movs	r1, #128	; 0x80
 800193e:	0309      	lsls	r1, r1, #12
 8001940:	430b      	orrs	r3, r1
 8001942:	031b      	lsls	r3, r3, #12
 8001944:	49d5      	ldr	r1, [pc, #852]	; (8001c9c <__aeabi_dsub+0x6e4>)
 8001946:	0b1b      	lsrs	r3, r3, #12
 8001948:	e6da      	b.n	8001700 <__aeabi_dsub+0x148>
 800194a:	49d5      	ldr	r1, [pc, #852]	; (8001ca0 <__aeabi_dsub+0x6e8>)
 800194c:	1ab6      	subs	r6, r6, r2
 800194e:	400b      	ands	r3, r1
 8001950:	4698      	mov	r8, r3
 8001952:	e6b5      	b.n	80016c0 <__aeabi_dsub+0x108>
 8001954:	0020      	movs	r0, r4
 8001956:	f000 fa4d 	bl	8001df4 <__clzsi2>
 800195a:	0002      	movs	r2, r0
 800195c:	3218      	adds	r2, #24
 800195e:	2a1f      	cmp	r2, #31
 8001960:	dc00      	bgt.n	8001964 <__aeabi_dsub+0x3ac>
 8001962:	e68f      	b.n	8001684 <__aeabi_dsub+0xcc>
 8001964:	0023      	movs	r3, r4
 8001966:	3808      	subs	r0, #8
 8001968:	4083      	lsls	r3, r0
 800196a:	2400      	movs	r4, #0
 800196c:	e692      	b.n	8001694 <__aeabi_dsub+0xdc>
 800196e:	4308      	orrs	r0, r1
 8001970:	0002      	movs	r2, r0
 8001972:	1e50      	subs	r0, r2, #1
 8001974:	4182      	sbcs	r2, r0
 8001976:	e66d      	b.n	8001654 <__aeabi_dsub+0x9c>
 8001978:	4cca      	ldr	r4, [pc, #808]	; (8001ca4 <__aeabi_dsub+0x6ec>)
 800197a:	1c72      	adds	r2, r6, #1
 800197c:	4222      	tst	r2, r4
 800197e:	d000      	beq.n	8001982 <__aeabi_dsub+0x3ca>
 8001980:	e0ad      	b.n	8001ade <__aeabi_dsub+0x526>
 8001982:	464a      	mov	r2, r9
 8001984:	431a      	orrs	r2, r3
 8001986:	2e00      	cmp	r6, #0
 8001988:	d1b8      	bne.n	80018fc <__aeabi_dsub+0x344>
 800198a:	2a00      	cmp	r2, #0
 800198c:	d100      	bne.n	8001990 <__aeabi_dsub+0x3d8>
 800198e:	e158      	b.n	8001c42 <__aeabi_dsub+0x68a>
 8001990:	000a      	movs	r2, r1
 8001992:	4302      	orrs	r2, r0
 8001994:	d000      	beq.n	8001998 <__aeabi_dsub+0x3e0>
 8001996:	e159      	b.n	8001c4c <__aeabi_dsub+0x694>
 8001998:	464a      	mov	r2, r9
 800199a:	0759      	lsls	r1, r3, #29
 800199c:	08d2      	lsrs	r2, r2, #3
 800199e:	430a      	orrs	r2, r1
 80019a0:	08db      	lsrs	r3, r3, #3
 80019a2:	e786      	b.n	80018b2 <__aeabi_dsub+0x2fa>
 80019a4:	464a      	mov	r2, r9
 80019a6:	0759      	lsls	r1, r3, #29
 80019a8:	08d2      	lsrs	r2, r2, #3
 80019aa:	430a      	orrs	r2, r1
 80019ac:	08db      	lsrs	r3, r3, #3
 80019ae:	e7c1      	b.n	8001934 <__aeabi_dsub+0x37c>
 80019b0:	4dba      	ldr	r5, [pc, #744]	; (8001c9c <__aeabi_dsub+0x6e4>)
 80019b2:	42aa      	cmp	r2, r5
 80019b4:	d100      	bne.n	80019b8 <__aeabi_dsub+0x400>
 80019b6:	e11e      	b.n	8001bf6 <__aeabi_dsub+0x63e>
 80019b8:	2580      	movs	r5, #128	; 0x80
 80019ba:	042d      	lsls	r5, r5, #16
 80019bc:	432b      	orrs	r3, r5
 80019be:	4664      	mov	r4, ip
 80019c0:	2c38      	cmp	r4, #56	; 0x38
 80019c2:	dc5d      	bgt.n	8001a80 <__aeabi_dsub+0x4c8>
 80019c4:	2c1f      	cmp	r4, #31
 80019c6:	dd00      	ble.n	80019ca <__aeabi_dsub+0x412>
 80019c8:	e0d0      	b.n	8001b6c <__aeabi_dsub+0x5b4>
 80019ca:	2520      	movs	r5, #32
 80019cc:	4667      	mov	r7, ip
 80019ce:	1b2d      	subs	r5, r5, r4
 80019d0:	464e      	mov	r6, r9
 80019d2:	001c      	movs	r4, r3
 80019d4:	40fe      	lsrs	r6, r7
 80019d6:	40ac      	lsls	r4, r5
 80019d8:	4334      	orrs	r4, r6
 80019da:	464e      	mov	r6, r9
 80019dc:	40ae      	lsls	r6, r5
 80019de:	0035      	movs	r5, r6
 80019e0:	40fb      	lsrs	r3, r7
 80019e2:	1e6e      	subs	r6, r5, #1
 80019e4:	41b5      	sbcs	r5, r6
 80019e6:	1ac9      	subs	r1, r1, r3
 80019e8:	432c      	orrs	r4, r5
 80019ea:	e04e      	b.n	8001a8a <__aeabi_dsub+0x4d2>
 80019ec:	464a      	mov	r2, r9
 80019ee:	1a14      	subs	r4, r2, r0
 80019f0:	45a1      	cmp	r9, r4
 80019f2:	4192      	sbcs	r2, r2
 80019f4:	4252      	negs	r2, r2
 80019f6:	4690      	mov	r8, r2
 80019f8:	1a5f      	subs	r7, r3, r1
 80019fa:	003a      	movs	r2, r7
 80019fc:	4647      	mov	r7, r8
 80019fe:	1bd2      	subs	r2, r2, r7
 8001a00:	4690      	mov	r8, r2
 8001a02:	0212      	lsls	r2, r2, #8
 8001a04:	d500      	bpl.n	8001a08 <__aeabi_dsub+0x450>
 8001a06:	e08b      	b.n	8001b20 <__aeabi_dsub+0x568>
 8001a08:	4642      	mov	r2, r8
 8001a0a:	4322      	orrs	r2, r4
 8001a0c:	d000      	beq.n	8001a10 <__aeabi_dsub+0x458>
 8001a0e:	e630      	b.n	8001672 <__aeabi_dsub+0xba>
 8001a10:	2300      	movs	r3, #0
 8001a12:	2500      	movs	r5, #0
 8001a14:	e74d      	b.n	80018b2 <__aeabi_dsub+0x2fa>
 8001a16:	464a      	mov	r2, r9
 8001a18:	0759      	lsls	r1, r3, #29
 8001a1a:	08d2      	lsrs	r2, r2, #3
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	08db      	lsrs	r3, r3, #3
 8001a20:	e744      	b.n	80018ac <__aeabi_dsub+0x2f4>
 8001a22:	4642      	mov	r2, r8
 8001a24:	4b9e      	ldr	r3, [pc, #632]	; (8001ca0 <__aeabi_dsub+0x6e8>)
 8001a26:	0861      	lsrs	r1, r4, #1
 8001a28:	401a      	ands	r2, r3
 8001a2a:	0013      	movs	r3, r2
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	4014      	ands	r4, r2
 8001a30:	430c      	orrs	r4, r1
 8001a32:	07da      	lsls	r2, r3, #31
 8001a34:	085b      	lsrs	r3, r3, #1
 8001a36:	4698      	mov	r8, r3
 8001a38:	4314      	orrs	r4, r2
 8001a3a:	e641      	b.n	80016c0 <__aeabi_dsub+0x108>
 8001a3c:	001a      	movs	r2, r3
 8001a3e:	3e1f      	subs	r6, #31
 8001a40:	40f2      	lsrs	r2, r6
 8001a42:	0016      	movs	r6, r2
 8001a44:	2920      	cmp	r1, #32
 8001a46:	d003      	beq.n	8001a50 <__aeabi_dsub+0x498>
 8001a48:	2240      	movs	r2, #64	; 0x40
 8001a4a:	1a51      	subs	r1, r2, r1
 8001a4c:	408b      	lsls	r3, r1
 8001a4e:	431c      	orrs	r4, r3
 8001a50:	1e62      	subs	r2, r4, #1
 8001a52:	4194      	sbcs	r4, r2
 8001a54:	2300      	movs	r3, #0
 8001a56:	4334      	orrs	r4, r6
 8001a58:	4698      	mov	r8, r3
 8001a5a:	2600      	movs	r6, #0
 8001a5c:	e71d      	b.n	800189a <__aeabi_dsub+0x2e2>
 8001a5e:	000c      	movs	r4, r1
 8001a60:	3a20      	subs	r2, #32
 8001a62:	40d4      	lsrs	r4, r2
 8001a64:	0022      	movs	r2, r4
 8001a66:	4664      	mov	r4, ip
 8001a68:	2c20      	cmp	r4, #32
 8001a6a:	d004      	beq.n	8001a76 <__aeabi_dsub+0x4be>
 8001a6c:	2740      	movs	r7, #64	; 0x40
 8001a6e:	1b3f      	subs	r7, r7, r4
 8001a70:	40b9      	lsls	r1, r7
 8001a72:	4308      	orrs	r0, r1
 8001a74:	4680      	mov	r8, r0
 8001a76:	4644      	mov	r4, r8
 8001a78:	1e61      	subs	r1, r4, #1
 8001a7a:	418c      	sbcs	r4, r1
 8001a7c:	4322      	orrs	r2, r4
 8001a7e:	e5e9      	b.n	8001654 <__aeabi_dsub+0x9c>
 8001a80:	464c      	mov	r4, r9
 8001a82:	4323      	orrs	r3, r4
 8001a84:	001c      	movs	r4, r3
 8001a86:	1e63      	subs	r3, r4, #1
 8001a88:	419c      	sbcs	r4, r3
 8001a8a:	1b04      	subs	r4, r0, r4
 8001a8c:	42a0      	cmp	r0, r4
 8001a8e:	419b      	sbcs	r3, r3
 8001a90:	425b      	negs	r3, r3
 8001a92:	1acb      	subs	r3, r1, r3
 8001a94:	4698      	mov	r8, r3
 8001a96:	465d      	mov	r5, fp
 8001a98:	0016      	movs	r6, r2
 8001a9a:	e5e2      	b.n	8001662 <__aeabi_dsub+0xaa>
 8001a9c:	464e      	mov	r6, r9
 8001a9e:	431e      	orrs	r6, r3
 8001aa0:	d100      	bne.n	8001aa4 <__aeabi_dsub+0x4ec>
 8001aa2:	e0ae      	b.n	8001c02 <__aeabi_dsub+0x64a>
 8001aa4:	1e66      	subs	r6, r4, #1
 8001aa6:	2c01      	cmp	r4, #1
 8001aa8:	d100      	bne.n	8001aac <__aeabi_dsub+0x4f4>
 8001aaa:	e0fd      	b.n	8001ca8 <__aeabi_dsub+0x6f0>
 8001aac:	4f7b      	ldr	r7, [pc, #492]	; (8001c9c <__aeabi_dsub+0x6e4>)
 8001aae:	42bc      	cmp	r4, r7
 8001ab0:	d100      	bne.n	8001ab4 <__aeabi_dsub+0x4fc>
 8001ab2:	e107      	b.n	8001cc4 <__aeabi_dsub+0x70c>
 8001ab4:	46b4      	mov	ip, r6
 8001ab6:	e69b      	b.n	80017f0 <__aeabi_dsub+0x238>
 8001ab8:	4664      	mov	r4, ip
 8001aba:	2220      	movs	r2, #32
 8001abc:	1b12      	subs	r2, r2, r4
 8001abe:	000c      	movs	r4, r1
 8001ac0:	4094      	lsls	r4, r2
 8001ac2:	0007      	movs	r7, r0
 8001ac4:	4090      	lsls	r0, r2
 8001ac6:	46a0      	mov	r8, r4
 8001ac8:	4664      	mov	r4, ip
 8001aca:	1e42      	subs	r2, r0, #1
 8001acc:	4190      	sbcs	r0, r2
 8001ace:	4662      	mov	r2, ip
 8001ad0:	40e7      	lsrs	r7, r4
 8001ad2:	4644      	mov	r4, r8
 8001ad4:	40d1      	lsrs	r1, r2
 8001ad6:	433c      	orrs	r4, r7
 8001ad8:	4304      	orrs	r4, r0
 8001ada:	185b      	adds	r3, r3, r1
 8001adc:	e6f3      	b.n	80018c6 <__aeabi_dsub+0x30e>
 8001ade:	4c6f      	ldr	r4, [pc, #444]	; (8001c9c <__aeabi_dsub+0x6e4>)
 8001ae0:	42a2      	cmp	r2, r4
 8001ae2:	d100      	bne.n	8001ae6 <__aeabi_dsub+0x52e>
 8001ae4:	e0d5      	b.n	8001c92 <__aeabi_dsub+0x6da>
 8001ae6:	4448      	add	r0, r9
 8001ae8:	185b      	adds	r3, r3, r1
 8001aea:	4548      	cmp	r0, r9
 8001aec:	4189      	sbcs	r1, r1
 8001aee:	4249      	negs	r1, r1
 8001af0:	185b      	adds	r3, r3, r1
 8001af2:	07dc      	lsls	r4, r3, #31
 8001af4:	0840      	lsrs	r0, r0, #1
 8001af6:	085b      	lsrs	r3, r3, #1
 8001af8:	4698      	mov	r8, r3
 8001afa:	0016      	movs	r6, r2
 8001afc:	4304      	orrs	r4, r0
 8001afe:	e6cc      	b.n	800189a <__aeabi_dsub+0x2e2>
 8001b00:	2a00      	cmp	r2, #0
 8001b02:	d000      	beq.n	8001b06 <__aeabi_dsub+0x54e>
 8001b04:	e082      	b.n	8001c0c <__aeabi_dsub+0x654>
 8001b06:	000a      	movs	r2, r1
 8001b08:	4302      	orrs	r2, r0
 8001b0a:	d140      	bne.n	8001b8e <__aeabi_dsub+0x5d6>
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	2500      	movs	r5, #0
 8001b10:	031b      	lsls	r3, r3, #12
 8001b12:	e713      	b.n	800193c <__aeabi_dsub+0x384>
 8001b14:	074b      	lsls	r3, r1, #29
 8001b16:	08c2      	lsrs	r2, r0, #3
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	465d      	mov	r5, fp
 8001b1c:	08cb      	lsrs	r3, r1, #3
 8001b1e:	e6c5      	b.n	80018ac <__aeabi_dsub+0x2f4>
 8001b20:	464a      	mov	r2, r9
 8001b22:	1a84      	subs	r4, r0, r2
 8001b24:	42a0      	cmp	r0, r4
 8001b26:	4192      	sbcs	r2, r2
 8001b28:	1acb      	subs	r3, r1, r3
 8001b2a:	4252      	negs	r2, r2
 8001b2c:	1a9b      	subs	r3, r3, r2
 8001b2e:	4698      	mov	r8, r3
 8001b30:	465d      	mov	r5, fp
 8001b32:	e59e      	b.n	8001672 <__aeabi_dsub+0xba>
 8001b34:	464a      	mov	r2, r9
 8001b36:	0759      	lsls	r1, r3, #29
 8001b38:	08d2      	lsrs	r2, r2, #3
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	08db      	lsrs	r3, r3, #3
 8001b3e:	e6f9      	b.n	8001934 <__aeabi_dsub+0x37c>
 8001b40:	464a      	mov	r2, r9
 8001b42:	1a14      	subs	r4, r2, r0
 8001b44:	45a1      	cmp	r9, r4
 8001b46:	4192      	sbcs	r2, r2
 8001b48:	1a5b      	subs	r3, r3, r1
 8001b4a:	4252      	negs	r2, r2
 8001b4c:	1a9b      	subs	r3, r3, r2
 8001b4e:	4698      	mov	r8, r3
 8001b50:	2601      	movs	r6, #1
 8001b52:	e586      	b.n	8001662 <__aeabi_dsub+0xaa>
 8001b54:	464a      	mov	r2, r9
 8001b56:	0759      	lsls	r1, r3, #29
 8001b58:	08d2      	lsrs	r2, r2, #3
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	08db      	lsrs	r3, r3, #3
 8001b5e:	e6a5      	b.n	80018ac <__aeabi_dsub+0x2f4>
 8001b60:	464c      	mov	r4, r9
 8001b62:	4323      	orrs	r3, r4
 8001b64:	001c      	movs	r4, r3
 8001b66:	1e63      	subs	r3, r4, #1
 8001b68:	419c      	sbcs	r4, r3
 8001b6a:	e65b      	b.n	8001824 <__aeabi_dsub+0x26c>
 8001b6c:	4665      	mov	r5, ip
 8001b6e:	001e      	movs	r6, r3
 8001b70:	3d20      	subs	r5, #32
 8001b72:	40ee      	lsrs	r6, r5
 8001b74:	2c20      	cmp	r4, #32
 8001b76:	d005      	beq.n	8001b84 <__aeabi_dsub+0x5cc>
 8001b78:	2540      	movs	r5, #64	; 0x40
 8001b7a:	1b2d      	subs	r5, r5, r4
 8001b7c:	40ab      	lsls	r3, r5
 8001b7e:	464c      	mov	r4, r9
 8001b80:	431c      	orrs	r4, r3
 8001b82:	46a2      	mov	sl, r4
 8001b84:	4654      	mov	r4, sl
 8001b86:	1e63      	subs	r3, r4, #1
 8001b88:	419c      	sbcs	r4, r3
 8001b8a:	4334      	orrs	r4, r6
 8001b8c:	e77d      	b.n	8001a8a <__aeabi_dsub+0x4d2>
 8001b8e:	074b      	lsls	r3, r1, #29
 8001b90:	08c2      	lsrs	r2, r0, #3
 8001b92:	431a      	orrs	r2, r3
 8001b94:	465d      	mov	r5, fp
 8001b96:	08cb      	lsrs	r3, r1, #3
 8001b98:	e6cc      	b.n	8001934 <__aeabi_dsub+0x37c>
 8001b9a:	000a      	movs	r2, r1
 8001b9c:	4302      	orrs	r2, r0
 8001b9e:	d100      	bne.n	8001ba2 <__aeabi_dsub+0x5ea>
 8001ba0:	e736      	b.n	8001a10 <__aeabi_dsub+0x458>
 8001ba2:	074b      	lsls	r3, r1, #29
 8001ba4:	08c2      	lsrs	r2, r0, #3
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	465d      	mov	r5, fp
 8001baa:	08cb      	lsrs	r3, r1, #3
 8001bac:	e681      	b.n	80018b2 <__aeabi_dsub+0x2fa>
 8001bae:	464a      	mov	r2, r9
 8001bb0:	1a84      	subs	r4, r0, r2
 8001bb2:	42a0      	cmp	r0, r4
 8001bb4:	4192      	sbcs	r2, r2
 8001bb6:	1acb      	subs	r3, r1, r3
 8001bb8:	4252      	negs	r2, r2
 8001bba:	1a9b      	subs	r3, r3, r2
 8001bbc:	4698      	mov	r8, r3
 8001bbe:	465d      	mov	r5, fp
 8001bc0:	2601      	movs	r6, #1
 8001bc2:	e54e      	b.n	8001662 <__aeabi_dsub+0xaa>
 8001bc4:	074b      	lsls	r3, r1, #29
 8001bc6:	08c2      	lsrs	r2, r0, #3
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	08cb      	lsrs	r3, r1, #3
 8001bcc:	e6b2      	b.n	8001934 <__aeabi_dsub+0x37c>
 8001bce:	464a      	mov	r2, r9
 8001bd0:	1a14      	subs	r4, r2, r0
 8001bd2:	45a1      	cmp	r9, r4
 8001bd4:	4192      	sbcs	r2, r2
 8001bd6:	1a5f      	subs	r7, r3, r1
 8001bd8:	4252      	negs	r2, r2
 8001bda:	1aba      	subs	r2, r7, r2
 8001bdc:	4690      	mov	r8, r2
 8001bde:	0212      	lsls	r2, r2, #8
 8001be0:	d56b      	bpl.n	8001cba <__aeabi_dsub+0x702>
 8001be2:	464a      	mov	r2, r9
 8001be4:	1a84      	subs	r4, r0, r2
 8001be6:	42a0      	cmp	r0, r4
 8001be8:	4192      	sbcs	r2, r2
 8001bea:	1acb      	subs	r3, r1, r3
 8001bec:	4252      	negs	r2, r2
 8001bee:	1a9b      	subs	r3, r3, r2
 8001bf0:	4698      	mov	r8, r3
 8001bf2:	465d      	mov	r5, fp
 8001bf4:	e564      	b.n	80016c0 <__aeabi_dsub+0x108>
 8001bf6:	074b      	lsls	r3, r1, #29
 8001bf8:	08c2      	lsrs	r2, r0, #3
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	465d      	mov	r5, fp
 8001bfe:	08cb      	lsrs	r3, r1, #3
 8001c00:	e698      	b.n	8001934 <__aeabi_dsub+0x37c>
 8001c02:	074b      	lsls	r3, r1, #29
 8001c04:	08c2      	lsrs	r2, r0, #3
 8001c06:	431a      	orrs	r2, r3
 8001c08:	08cb      	lsrs	r3, r1, #3
 8001c0a:	e64f      	b.n	80018ac <__aeabi_dsub+0x2f4>
 8001c0c:	000a      	movs	r2, r1
 8001c0e:	4302      	orrs	r2, r0
 8001c10:	d090      	beq.n	8001b34 <__aeabi_dsub+0x57c>
 8001c12:	464a      	mov	r2, r9
 8001c14:	075c      	lsls	r4, r3, #29
 8001c16:	08d2      	lsrs	r2, r2, #3
 8001c18:	4314      	orrs	r4, r2
 8001c1a:	2280      	movs	r2, #128	; 0x80
 8001c1c:	08db      	lsrs	r3, r3, #3
 8001c1e:	0312      	lsls	r2, r2, #12
 8001c20:	4213      	tst	r3, r2
 8001c22:	d008      	beq.n	8001c36 <__aeabi_dsub+0x67e>
 8001c24:	08ce      	lsrs	r6, r1, #3
 8001c26:	4216      	tst	r6, r2
 8001c28:	d105      	bne.n	8001c36 <__aeabi_dsub+0x67e>
 8001c2a:	08c0      	lsrs	r0, r0, #3
 8001c2c:	0749      	lsls	r1, r1, #29
 8001c2e:	4308      	orrs	r0, r1
 8001c30:	0004      	movs	r4, r0
 8001c32:	465d      	mov	r5, fp
 8001c34:	0033      	movs	r3, r6
 8001c36:	0f61      	lsrs	r1, r4, #29
 8001c38:	00e2      	lsls	r2, r4, #3
 8001c3a:	0749      	lsls	r1, r1, #29
 8001c3c:	08d2      	lsrs	r2, r2, #3
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	e678      	b.n	8001934 <__aeabi_dsub+0x37c>
 8001c42:	074b      	lsls	r3, r1, #29
 8001c44:	08c2      	lsrs	r2, r0, #3
 8001c46:	431a      	orrs	r2, r3
 8001c48:	08cb      	lsrs	r3, r1, #3
 8001c4a:	e632      	b.n	80018b2 <__aeabi_dsub+0x2fa>
 8001c4c:	4448      	add	r0, r9
 8001c4e:	185b      	adds	r3, r3, r1
 8001c50:	4548      	cmp	r0, r9
 8001c52:	4192      	sbcs	r2, r2
 8001c54:	4698      	mov	r8, r3
 8001c56:	4252      	negs	r2, r2
 8001c58:	4490      	add	r8, r2
 8001c5a:	4643      	mov	r3, r8
 8001c5c:	0004      	movs	r4, r0
 8001c5e:	021b      	lsls	r3, r3, #8
 8001c60:	d400      	bmi.n	8001c64 <__aeabi_dsub+0x6ac>
 8001c62:	e61a      	b.n	800189a <__aeabi_dsub+0x2e2>
 8001c64:	4642      	mov	r2, r8
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <__aeabi_dsub+0x6e8>)
 8001c68:	2601      	movs	r6, #1
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	4690      	mov	r8, r2
 8001c6e:	e614      	b.n	800189a <__aeabi_dsub+0x2e2>
 8001c70:	4666      	mov	r6, ip
 8001c72:	001f      	movs	r7, r3
 8001c74:	3e20      	subs	r6, #32
 8001c76:	40f7      	lsrs	r7, r6
 8001c78:	2c20      	cmp	r4, #32
 8001c7a:	d005      	beq.n	8001c88 <__aeabi_dsub+0x6d0>
 8001c7c:	2640      	movs	r6, #64	; 0x40
 8001c7e:	1b36      	subs	r6, r6, r4
 8001c80:	40b3      	lsls	r3, r6
 8001c82:	464c      	mov	r4, r9
 8001c84:	431c      	orrs	r4, r3
 8001c86:	46a2      	mov	sl, r4
 8001c88:	4654      	mov	r4, sl
 8001c8a:	1e63      	subs	r3, r4, #1
 8001c8c:	419c      	sbcs	r4, r3
 8001c8e:	433c      	orrs	r4, r7
 8001c90:	e5c8      	b.n	8001824 <__aeabi_dsub+0x26c>
 8001c92:	0011      	movs	r1, r2
 8001c94:	2300      	movs	r3, #0
 8001c96:	2200      	movs	r2, #0
 8001c98:	e532      	b.n	8001700 <__aeabi_dsub+0x148>
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	000007ff 	.word	0x000007ff
 8001ca0:	ff7fffff 	.word	0xff7fffff
 8001ca4:	000007fe 	.word	0x000007fe
 8001ca8:	464a      	mov	r2, r9
 8001caa:	1814      	adds	r4, r2, r0
 8001cac:	4284      	cmp	r4, r0
 8001cae:	4192      	sbcs	r2, r2
 8001cb0:	185b      	adds	r3, r3, r1
 8001cb2:	4698      	mov	r8, r3
 8001cb4:	4252      	negs	r2, r2
 8001cb6:	4490      	add	r8, r2
 8001cb8:	e5e9      	b.n	800188e <__aeabi_dsub+0x2d6>
 8001cba:	4642      	mov	r2, r8
 8001cbc:	4322      	orrs	r2, r4
 8001cbe:	d100      	bne.n	8001cc2 <__aeabi_dsub+0x70a>
 8001cc0:	e6a6      	b.n	8001a10 <__aeabi_dsub+0x458>
 8001cc2:	e5ea      	b.n	800189a <__aeabi_dsub+0x2e2>
 8001cc4:	074b      	lsls	r3, r1, #29
 8001cc6:	08c2      	lsrs	r2, r0, #3
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	08cb      	lsrs	r3, r1, #3
 8001ccc:	e632      	b.n	8001934 <__aeabi_dsub+0x37c>
 8001cce:	2200      	movs	r2, #0
 8001cd0:	4901      	ldr	r1, [pc, #4]	; (8001cd8 <__aeabi_dsub+0x720>)
 8001cd2:	0013      	movs	r3, r2
 8001cd4:	e514      	b.n	8001700 <__aeabi_dsub+0x148>
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	000007ff 	.word	0x000007ff

08001cdc <__aeabi_d2iz>:
 8001cdc:	000a      	movs	r2, r1
 8001cde:	b530      	push	{r4, r5, lr}
 8001ce0:	4c13      	ldr	r4, [pc, #76]	; (8001d30 <__aeabi_d2iz+0x54>)
 8001ce2:	0053      	lsls	r3, r2, #1
 8001ce4:	0309      	lsls	r1, r1, #12
 8001ce6:	0005      	movs	r5, r0
 8001ce8:	0b09      	lsrs	r1, r1, #12
 8001cea:	2000      	movs	r0, #0
 8001cec:	0d5b      	lsrs	r3, r3, #21
 8001cee:	0fd2      	lsrs	r2, r2, #31
 8001cf0:	42a3      	cmp	r3, r4
 8001cf2:	dd04      	ble.n	8001cfe <__aeabi_d2iz+0x22>
 8001cf4:	480f      	ldr	r0, [pc, #60]	; (8001d34 <__aeabi_d2iz+0x58>)
 8001cf6:	4283      	cmp	r3, r0
 8001cf8:	dd02      	ble.n	8001d00 <__aeabi_d2iz+0x24>
 8001cfa:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <__aeabi_d2iz+0x5c>)
 8001cfc:	18d0      	adds	r0, r2, r3
 8001cfe:	bd30      	pop	{r4, r5, pc}
 8001d00:	2080      	movs	r0, #128	; 0x80
 8001d02:	0340      	lsls	r0, r0, #13
 8001d04:	4301      	orrs	r1, r0
 8001d06:	480d      	ldr	r0, [pc, #52]	; (8001d3c <__aeabi_d2iz+0x60>)
 8001d08:	1ac0      	subs	r0, r0, r3
 8001d0a:	281f      	cmp	r0, #31
 8001d0c:	dd08      	ble.n	8001d20 <__aeabi_d2iz+0x44>
 8001d0e:	480c      	ldr	r0, [pc, #48]	; (8001d40 <__aeabi_d2iz+0x64>)
 8001d10:	1ac3      	subs	r3, r0, r3
 8001d12:	40d9      	lsrs	r1, r3
 8001d14:	000b      	movs	r3, r1
 8001d16:	4258      	negs	r0, r3
 8001d18:	2a00      	cmp	r2, #0
 8001d1a:	d1f0      	bne.n	8001cfe <__aeabi_d2iz+0x22>
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	e7ee      	b.n	8001cfe <__aeabi_d2iz+0x22>
 8001d20:	4c08      	ldr	r4, [pc, #32]	; (8001d44 <__aeabi_d2iz+0x68>)
 8001d22:	40c5      	lsrs	r5, r0
 8001d24:	46a4      	mov	ip, r4
 8001d26:	4463      	add	r3, ip
 8001d28:	4099      	lsls	r1, r3
 8001d2a:	000b      	movs	r3, r1
 8001d2c:	432b      	orrs	r3, r5
 8001d2e:	e7f2      	b.n	8001d16 <__aeabi_d2iz+0x3a>
 8001d30:	000003fe 	.word	0x000003fe
 8001d34:	0000041d 	.word	0x0000041d
 8001d38:	7fffffff 	.word	0x7fffffff
 8001d3c:	00000433 	.word	0x00000433
 8001d40:	00000413 	.word	0x00000413
 8001d44:	fffffbed 	.word	0xfffffbed

08001d48 <__aeabi_i2d>:
 8001d48:	b570      	push	{r4, r5, r6, lr}
 8001d4a:	2800      	cmp	r0, #0
 8001d4c:	d016      	beq.n	8001d7c <__aeabi_i2d+0x34>
 8001d4e:	17c3      	asrs	r3, r0, #31
 8001d50:	18c5      	adds	r5, r0, r3
 8001d52:	405d      	eors	r5, r3
 8001d54:	0fc4      	lsrs	r4, r0, #31
 8001d56:	0028      	movs	r0, r5
 8001d58:	f000 f84c 	bl	8001df4 <__clzsi2>
 8001d5c:	4a11      	ldr	r2, [pc, #68]	; (8001da4 <__aeabi_i2d+0x5c>)
 8001d5e:	1a12      	subs	r2, r2, r0
 8001d60:	280a      	cmp	r0, #10
 8001d62:	dc16      	bgt.n	8001d92 <__aeabi_i2d+0x4a>
 8001d64:	0003      	movs	r3, r0
 8001d66:	002e      	movs	r6, r5
 8001d68:	3315      	adds	r3, #21
 8001d6a:	409e      	lsls	r6, r3
 8001d6c:	230b      	movs	r3, #11
 8001d6e:	1a18      	subs	r0, r3, r0
 8001d70:	40c5      	lsrs	r5, r0
 8001d72:	0553      	lsls	r3, r2, #21
 8001d74:	032d      	lsls	r5, r5, #12
 8001d76:	0b2d      	lsrs	r5, r5, #12
 8001d78:	0d5b      	lsrs	r3, r3, #21
 8001d7a:	e003      	b.n	8001d84 <__aeabi_i2d+0x3c>
 8001d7c:	2400      	movs	r4, #0
 8001d7e:	2300      	movs	r3, #0
 8001d80:	2500      	movs	r5, #0
 8001d82:	2600      	movs	r6, #0
 8001d84:	051b      	lsls	r3, r3, #20
 8001d86:	432b      	orrs	r3, r5
 8001d88:	07e4      	lsls	r4, r4, #31
 8001d8a:	4323      	orrs	r3, r4
 8001d8c:	0030      	movs	r0, r6
 8001d8e:	0019      	movs	r1, r3
 8001d90:	bd70      	pop	{r4, r5, r6, pc}
 8001d92:	380b      	subs	r0, #11
 8001d94:	4085      	lsls	r5, r0
 8001d96:	0553      	lsls	r3, r2, #21
 8001d98:	032d      	lsls	r5, r5, #12
 8001d9a:	2600      	movs	r6, #0
 8001d9c:	0b2d      	lsrs	r5, r5, #12
 8001d9e:	0d5b      	lsrs	r3, r3, #21
 8001da0:	e7f0      	b.n	8001d84 <__aeabi_i2d+0x3c>
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	0000041e 	.word	0x0000041e

08001da8 <__aeabi_ui2d>:
 8001da8:	b510      	push	{r4, lr}
 8001daa:	1e04      	subs	r4, r0, #0
 8001dac:	d010      	beq.n	8001dd0 <__aeabi_ui2d+0x28>
 8001dae:	f000 f821 	bl	8001df4 <__clzsi2>
 8001db2:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <__aeabi_ui2d+0x48>)
 8001db4:	1a1b      	subs	r3, r3, r0
 8001db6:	280a      	cmp	r0, #10
 8001db8:	dc11      	bgt.n	8001dde <__aeabi_ui2d+0x36>
 8001dba:	220b      	movs	r2, #11
 8001dbc:	0021      	movs	r1, r4
 8001dbe:	1a12      	subs	r2, r2, r0
 8001dc0:	40d1      	lsrs	r1, r2
 8001dc2:	3015      	adds	r0, #21
 8001dc4:	030a      	lsls	r2, r1, #12
 8001dc6:	055b      	lsls	r3, r3, #21
 8001dc8:	4084      	lsls	r4, r0
 8001dca:	0b12      	lsrs	r2, r2, #12
 8001dcc:	0d5b      	lsrs	r3, r3, #21
 8001dce:	e001      	b.n	8001dd4 <__aeabi_ui2d+0x2c>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	051b      	lsls	r3, r3, #20
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	0020      	movs	r0, r4
 8001dda:	0019      	movs	r1, r3
 8001ddc:	bd10      	pop	{r4, pc}
 8001dde:	0022      	movs	r2, r4
 8001de0:	380b      	subs	r0, #11
 8001de2:	4082      	lsls	r2, r0
 8001de4:	055b      	lsls	r3, r3, #21
 8001de6:	0312      	lsls	r2, r2, #12
 8001de8:	2400      	movs	r4, #0
 8001dea:	0b12      	lsrs	r2, r2, #12
 8001dec:	0d5b      	lsrs	r3, r3, #21
 8001dee:	e7f1      	b.n	8001dd4 <__aeabi_ui2d+0x2c>
 8001df0:	0000041e 	.word	0x0000041e

08001df4 <__clzsi2>:
 8001df4:	211c      	movs	r1, #28
 8001df6:	2301      	movs	r3, #1
 8001df8:	041b      	lsls	r3, r3, #16
 8001dfa:	4298      	cmp	r0, r3
 8001dfc:	d301      	bcc.n	8001e02 <__clzsi2+0xe>
 8001dfe:	0c00      	lsrs	r0, r0, #16
 8001e00:	3910      	subs	r1, #16
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	4298      	cmp	r0, r3
 8001e06:	d301      	bcc.n	8001e0c <__clzsi2+0x18>
 8001e08:	0a00      	lsrs	r0, r0, #8
 8001e0a:	3908      	subs	r1, #8
 8001e0c:	091b      	lsrs	r3, r3, #4
 8001e0e:	4298      	cmp	r0, r3
 8001e10:	d301      	bcc.n	8001e16 <__clzsi2+0x22>
 8001e12:	0900      	lsrs	r0, r0, #4
 8001e14:	3904      	subs	r1, #4
 8001e16:	a202      	add	r2, pc, #8	; (adr r2, 8001e20 <__clzsi2+0x2c>)
 8001e18:	5c10      	ldrb	r0, [r2, r0]
 8001e1a:	1840      	adds	r0, r0, r1
 8001e1c:	4770      	bx	lr
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	02020304 	.word	0x02020304
 8001e24:	01010101 	.word	0x01010101
	...

08001e30 <display_d1>:
#include "display.h"

static ticks = 0;

void display_d1(bool on)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	0002      	movs	r2, r0
 8001e38:	1dfb      	adds	r3, r7, #7
 8001e3a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, DP_D1_Pin, on);
 8001e3c:	1dfb      	adds	r3, r7, #7
 8001e3e:	781a      	ldrb	r2, [r3, #0]
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	015b      	lsls	r3, r3, #5
 8001e44:	4803      	ldr	r0, [pc, #12]	; (8001e54 <display_d1+0x24>)
 8001e46:	0019      	movs	r1, r3
 8001e48:	f002 fde5 	bl	8004a16 <HAL_GPIO_WritePin>
}
 8001e4c:	46c0      	nop			; (mov r8, r8)
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	b002      	add	sp, #8
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	50000400 	.word	0x50000400

08001e58 <display_d2>:

void display_d2(bool on)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	0002      	movs	r2, r0
 8001e60:	1dfb      	adds	r3, r7, #7
 8001e62:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, DP_D2_Pin, on);
 8001e64:	1dfb      	adds	r3, r7, #7
 8001e66:	781a      	ldrb	r2, [r3, #0]
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	4803      	ldr	r0, [pc, #12]	; (8001e7c <display_d2+0x24>)
 8001e6e:	0019      	movs	r1, r3
 8001e70:	f002 fdd1 	bl	8004a16 <HAL_GPIO_WritePin>
}
 8001e74:	46c0      	nop			; (mov r8, r8)
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b002      	add	sp, #8
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	50000400 	.word	0x50000400

08001e80 <display_d3>:

void display_d3(bool on)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	0002      	movs	r2, r0
 8001e88:	1dfb      	adds	r3, r7, #7
 8001e8a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, DP_D3_Pin, on);
 8001e8c:	1dfb      	adds	r3, r7, #7
 8001e8e:	781a      	ldrb	r2, [r3, #0]
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	4803      	ldr	r0, [pc, #12]	; (8001ea4 <display_d3+0x24>)
 8001e96:	0019      	movs	r1, r3
 8001e98:	f002 fdbd 	bl	8004a16 <HAL_GPIO_WritePin>
}
 8001e9c:	46c0      	nop			; (mov r8, r8)
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b002      	add	sp, #8
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	50000400 	.word	0x50000400

08001ea8 <display_d4>:

void display_d4(bool on)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	0002      	movs	r2, r0
 8001eb0:	1dfb      	adds	r3, r7, #7
 8001eb2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, DP_D4_Pin, on);
 8001eb4:	1dfb      	adds	r3, r7, #7
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	4804      	ldr	r0, [pc, #16]	; (8001ecc <display_d4+0x24>)
 8001eba:	001a      	movs	r2, r3
 8001ebc:	2104      	movs	r1, #4
 8001ebe:	f002 fdaa 	bl	8004a16 <HAL_GPIO_WritePin>
}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	b002      	add	sp, #8
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	50000400 	.word	0x50000400

08001ed0 <display_d5>:

void display_d5(bool on)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	0002      	movs	r2, r0
 8001ed8:	1dfb      	adds	r3, r7, #7
 8001eda:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, DP_D5_Pin, on);
 8001edc:	1dfb      	adds	r3, r7, #7
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4804      	ldr	r0, [pc, #16]	; (8001ef4 <display_d5+0x24>)
 8001ee2:	001a      	movs	r2, r3
 8001ee4:	2102      	movs	r1, #2
 8001ee6:	f002 fd96 	bl	8004a16 <HAL_GPIO_WritePin>
}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b002      	add	sp, #8
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	50000400 	.word	0x50000400

08001ef8 <display_a>:

void display_a(bool on)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	0002      	movs	r2, r0
 8001f00:	1dfb      	adds	r3, r7, #7
 8001f02:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, DP_A_Pin, on);
 8001f04:	1dfb      	adds	r3, r7, #7
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	4804      	ldr	r0, [pc, #16]	; (8001f1c <display_a+0x24>)
 8001f0a:	001a      	movs	r2, r3
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	f002 fd82 	bl	8004a16 <HAL_GPIO_WritePin>
}
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b002      	add	sp, #8
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	50000400 	.word	0x50000400

08001f20 <display_b>:

void display_b(bool on)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	0002      	movs	r2, r0
 8001f28:	1dfb      	adds	r3, r7, #7
 8001f2a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, DP_B_Pin, on);
 8001f2c:	1dfb      	adds	r3, r7, #7
 8001f2e:	781a      	ldrb	r2, [r3, #0]
 8001f30:	23a0      	movs	r3, #160	; 0xa0
 8001f32:	05db      	lsls	r3, r3, #23
 8001f34:	2180      	movs	r1, #128	; 0x80
 8001f36:	0018      	movs	r0, r3
 8001f38:	f002 fd6d 	bl	8004a16 <HAL_GPIO_WritePin>
}
 8001f3c:	46c0      	nop			; (mov r8, r8)
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	b002      	add	sp, #8
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <display_c>:

void display_c(bool on)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	0002      	movs	r2, r0
 8001f4c:	1dfb      	adds	r3, r7, #7
 8001f4e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, DP_C_Pin, on);
 8001f50:	1dfb      	adds	r3, r7, #7
 8001f52:	781a      	ldrb	r2, [r3, #0]
 8001f54:	23a0      	movs	r3, #160	; 0xa0
 8001f56:	05db      	lsls	r3, r3, #23
 8001f58:	2140      	movs	r1, #64	; 0x40
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f002 fd5b 	bl	8004a16 <HAL_GPIO_WritePin>
}
 8001f60:	46c0      	nop			; (mov r8, r8)
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b002      	add	sp, #8
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <display_d>:

void display_d(bool on)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	0002      	movs	r2, r0
 8001f70:	1dfb      	adds	r3, r7, #7
 8001f72:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, DP_D_Pin, on);
 8001f74:	1dfb      	adds	r3, r7, #7
 8001f76:	781a      	ldrb	r2, [r3, #0]
 8001f78:	23a0      	movs	r3, #160	; 0xa0
 8001f7a:	05db      	lsls	r3, r3, #23
 8001f7c:	2120      	movs	r1, #32
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f002 fd49 	bl	8004a16 <HAL_GPIO_WritePin>
}
 8001f84:	46c0      	nop			; (mov r8, r8)
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b002      	add	sp, #8
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <display_e>:

void display_e(bool on)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	0002      	movs	r2, r0
 8001f94:	1dfb      	adds	r3, r7, #7
 8001f96:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, DP_E_Pin, on);
 8001f98:	1dfb      	adds	r3, r7, #7
 8001f9a:	781a      	ldrb	r2, [r3, #0]
 8001f9c:	23a0      	movs	r3, #160	; 0xa0
 8001f9e:	05db      	lsls	r3, r3, #23
 8001fa0:	2110      	movs	r1, #16
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	f002 fd37 	bl	8004a16 <HAL_GPIO_WritePin>
}
 8001fa8:	46c0      	nop			; (mov r8, r8)
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b002      	add	sp, #8
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <display_f>:

void display_f(bool on)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	0002      	movs	r2, r0
 8001fb8:	1dfb      	adds	r3, r7, #7
 8001fba:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, DP_F_Pin, on);
 8001fbc:	1dfb      	adds	r3, r7, #7
 8001fbe:	781a      	ldrb	r2, [r3, #0]
 8001fc0:	23a0      	movs	r3, #160	; 0xa0
 8001fc2:	05db      	lsls	r3, r3, #23
 8001fc4:	2108      	movs	r1, #8
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f002 fd25 	bl	8004a16 <HAL_GPIO_WritePin>
}
 8001fcc:	46c0      	nop			; (mov r8, r8)
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b002      	add	sp, #8
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <display_g>:

void display_g(bool on)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	0002      	movs	r2, r0
 8001fdc:	1dfb      	adds	r3, r7, #7
 8001fde:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, DP_G_Pin, on);
 8001fe0:	1dfb      	adds	r3, r7, #7
 8001fe2:	781a      	ldrb	r2, [r3, #0]
 8001fe4:	23a0      	movs	r3, #160	; 0xa0
 8001fe6:	05db      	lsls	r3, r3, #23
 8001fe8:	2104      	movs	r1, #4
 8001fea:	0018      	movs	r0, r3
 8001fec:	f002 fd13 	bl	8004a16 <HAL_GPIO_WritePin>
}
 8001ff0:	46c0      	nop			; (mov r8, r8)
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	b002      	add	sp, #8
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <display_dp>:

void display_dp(bool on)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	0002      	movs	r2, r0
 8002000:	1dfb      	adds	r3, r7, #7
 8002002:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, DP_DOT_Pin, on);
 8002004:	1dfb      	adds	r3, r7, #7
 8002006:	781a      	ldrb	r2, [r3, #0]
 8002008:	23a0      	movs	r3, #160	; 0xa0
 800200a:	05db      	lsls	r3, r3, #23
 800200c:	2102      	movs	r1, #2
 800200e:	0018      	movs	r0, r3
 8002010:	f002 fd01 	bl	8004a16 <HAL_GPIO_WritePin>
}
 8002014:	46c0      	nop			; (mov r8, r8)
 8002016:	46bd      	mov	sp, r7
 8002018:	b002      	add	sp, #8
 800201a:	bd80      	pop	{r7, pc}

0800201c <display_number>:

void display_number(uint8_t number, bool dot)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	0002      	movs	r2, r0
 8002024:	1dfb      	adds	r3, r7, #7
 8002026:	701a      	strb	r2, [r3, #0]
 8002028:	1dbb      	adds	r3, r7, #6
 800202a:	1c0a      	adds	r2, r1, #0
 800202c:	701a      	strb	r2, [r3, #0]
	switch (number)
 800202e:	1dfb      	adds	r3, r7, #7
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b14      	cmp	r3, #20
 8002034:	d900      	bls.n	8002038 <display_number+0x1c>
 8002036:	e1d5      	b.n	80023e4 <display_number+0x3c8>
 8002038:	009a      	lsls	r2, r3, #2
 800203a:	4be9      	ldr	r3, [pc, #932]	; (80023e0 <display_number+0x3c4>)
 800203c:	18d3      	adds	r3, r2, r3
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	469f      	mov	pc, r3
	{
		case 0:
			display_a(true);
 8002042:	2001      	movs	r0, #1
 8002044:	f7ff ff58 	bl	8001ef8 <display_a>
			display_b(true);
 8002048:	2001      	movs	r0, #1
 800204a:	f7ff ff69 	bl	8001f20 <display_b>
			display_c(true);
 800204e:	2001      	movs	r0, #1
 8002050:	f7ff ff78 	bl	8001f44 <display_c>
			display_d(true);
 8002054:	2001      	movs	r0, #1
 8002056:	f7ff ff87 	bl	8001f68 <display_d>
			display_e(true);
 800205a:	2001      	movs	r0, #1
 800205c:	f7ff ff96 	bl	8001f8c <display_e>
			display_f(true);
 8002060:	2001      	movs	r0, #1
 8002062:	f7ff ffa5 	bl	8001fb0 <display_f>
			display_g(false);
 8002066:	2000      	movs	r0, #0
 8002068:	f7ff ffb4 	bl	8001fd4 <display_g>
			break;
 800206c:	e1d0      	b.n	8002410 <display_number+0x3f4>
		case 1:
			display_a(false);
 800206e:	2000      	movs	r0, #0
 8002070:	f7ff ff42 	bl	8001ef8 <display_a>
			display_b(true);
 8002074:	2001      	movs	r0, #1
 8002076:	f7ff ff53 	bl	8001f20 <display_b>
			display_c(true);
 800207a:	2001      	movs	r0, #1
 800207c:	f7ff ff62 	bl	8001f44 <display_c>
			display_d(false);
 8002080:	2000      	movs	r0, #0
 8002082:	f7ff ff71 	bl	8001f68 <display_d>
			display_e(false);
 8002086:	2000      	movs	r0, #0
 8002088:	f7ff ff80 	bl	8001f8c <display_e>
			display_f(false);
 800208c:	2000      	movs	r0, #0
 800208e:	f7ff ff8f 	bl	8001fb0 <display_f>
			display_g(false);
 8002092:	2000      	movs	r0, #0
 8002094:	f7ff ff9e 	bl	8001fd4 <display_g>
			break;
 8002098:	e1ba      	b.n	8002410 <display_number+0x3f4>
		case 2:
			display_a(true);
 800209a:	2001      	movs	r0, #1
 800209c:	f7ff ff2c 	bl	8001ef8 <display_a>
			display_b(true);
 80020a0:	2001      	movs	r0, #1
 80020a2:	f7ff ff3d 	bl	8001f20 <display_b>
			display_c(false);
 80020a6:	2000      	movs	r0, #0
 80020a8:	f7ff ff4c 	bl	8001f44 <display_c>
			display_d(true);
 80020ac:	2001      	movs	r0, #1
 80020ae:	f7ff ff5b 	bl	8001f68 <display_d>
			display_e(true);
 80020b2:	2001      	movs	r0, #1
 80020b4:	f7ff ff6a 	bl	8001f8c <display_e>
			display_f(false);
 80020b8:	2000      	movs	r0, #0
 80020ba:	f7ff ff79 	bl	8001fb0 <display_f>
			display_g(true);
 80020be:	2001      	movs	r0, #1
 80020c0:	f7ff ff88 	bl	8001fd4 <display_g>
			break;
 80020c4:	e1a4      	b.n	8002410 <display_number+0x3f4>
		case 3:
			display_a(true);
 80020c6:	2001      	movs	r0, #1
 80020c8:	f7ff ff16 	bl	8001ef8 <display_a>
			display_b(true);
 80020cc:	2001      	movs	r0, #1
 80020ce:	f7ff ff27 	bl	8001f20 <display_b>
			display_c(true);
 80020d2:	2001      	movs	r0, #1
 80020d4:	f7ff ff36 	bl	8001f44 <display_c>
			display_d(true);
 80020d8:	2001      	movs	r0, #1
 80020da:	f7ff ff45 	bl	8001f68 <display_d>
			display_e(false);
 80020de:	2000      	movs	r0, #0
 80020e0:	f7ff ff54 	bl	8001f8c <display_e>
			display_f(false);
 80020e4:	2000      	movs	r0, #0
 80020e6:	f7ff ff63 	bl	8001fb0 <display_f>
			display_g(true);
 80020ea:	2001      	movs	r0, #1
 80020ec:	f7ff ff72 	bl	8001fd4 <display_g>
			break;
 80020f0:	e18e      	b.n	8002410 <display_number+0x3f4>
		case 4:
			display_a(false);
 80020f2:	2000      	movs	r0, #0
 80020f4:	f7ff ff00 	bl	8001ef8 <display_a>
			display_b(true);
 80020f8:	2001      	movs	r0, #1
 80020fa:	f7ff ff11 	bl	8001f20 <display_b>
			display_c(true);
 80020fe:	2001      	movs	r0, #1
 8002100:	f7ff ff20 	bl	8001f44 <display_c>
			display_d(false);
 8002104:	2000      	movs	r0, #0
 8002106:	f7ff ff2f 	bl	8001f68 <display_d>
			display_e(false);
 800210a:	2000      	movs	r0, #0
 800210c:	f7ff ff3e 	bl	8001f8c <display_e>
			display_f(true);
 8002110:	2001      	movs	r0, #1
 8002112:	f7ff ff4d 	bl	8001fb0 <display_f>
			display_g(true);
 8002116:	2001      	movs	r0, #1
 8002118:	f7ff ff5c 	bl	8001fd4 <display_g>
			break;
 800211c:	e178      	b.n	8002410 <display_number+0x3f4>
		case 5:
			display_a(true);
 800211e:	2001      	movs	r0, #1
 8002120:	f7ff feea 	bl	8001ef8 <display_a>
			display_b(false);
 8002124:	2000      	movs	r0, #0
 8002126:	f7ff fefb 	bl	8001f20 <display_b>
			display_c(true);
 800212a:	2001      	movs	r0, #1
 800212c:	f7ff ff0a 	bl	8001f44 <display_c>
			display_d(true);
 8002130:	2001      	movs	r0, #1
 8002132:	f7ff ff19 	bl	8001f68 <display_d>
			display_e(false);
 8002136:	2000      	movs	r0, #0
 8002138:	f7ff ff28 	bl	8001f8c <display_e>
			display_f(true);
 800213c:	2001      	movs	r0, #1
 800213e:	f7ff ff37 	bl	8001fb0 <display_f>
			display_g(true);
 8002142:	2001      	movs	r0, #1
 8002144:	f7ff ff46 	bl	8001fd4 <display_g>
			break;
 8002148:	e162      	b.n	8002410 <display_number+0x3f4>
		case 6:
			display_a(true);
 800214a:	2001      	movs	r0, #1
 800214c:	f7ff fed4 	bl	8001ef8 <display_a>
			display_b(false);
 8002150:	2000      	movs	r0, #0
 8002152:	f7ff fee5 	bl	8001f20 <display_b>
			display_c(true);
 8002156:	2001      	movs	r0, #1
 8002158:	f7ff fef4 	bl	8001f44 <display_c>
			display_d(true);
 800215c:	2001      	movs	r0, #1
 800215e:	f7ff ff03 	bl	8001f68 <display_d>
			display_e(true);
 8002162:	2001      	movs	r0, #1
 8002164:	f7ff ff12 	bl	8001f8c <display_e>
			display_f(true);
 8002168:	2001      	movs	r0, #1
 800216a:	f7ff ff21 	bl	8001fb0 <display_f>
			display_g(true);
 800216e:	2001      	movs	r0, #1
 8002170:	f7ff ff30 	bl	8001fd4 <display_g>
			break;
 8002174:	e14c      	b.n	8002410 <display_number+0x3f4>
		case 7:
			display_a(true);
 8002176:	2001      	movs	r0, #1
 8002178:	f7ff febe 	bl	8001ef8 <display_a>
			display_b(true);
 800217c:	2001      	movs	r0, #1
 800217e:	f7ff fecf 	bl	8001f20 <display_b>
			display_c(true);
 8002182:	2001      	movs	r0, #1
 8002184:	f7ff fede 	bl	8001f44 <display_c>
			display_d(false);
 8002188:	2000      	movs	r0, #0
 800218a:	f7ff feed 	bl	8001f68 <display_d>
			display_e(false);
 800218e:	2000      	movs	r0, #0
 8002190:	f7ff fefc 	bl	8001f8c <display_e>
			display_f(false);
 8002194:	2000      	movs	r0, #0
 8002196:	f7ff ff0b 	bl	8001fb0 <display_f>
			display_g(false);
 800219a:	2000      	movs	r0, #0
 800219c:	f7ff ff1a 	bl	8001fd4 <display_g>
			break;
 80021a0:	e136      	b.n	8002410 <display_number+0x3f4>
		case 8:
			display_a(true);
 80021a2:	2001      	movs	r0, #1
 80021a4:	f7ff fea8 	bl	8001ef8 <display_a>
			display_b(true);
 80021a8:	2001      	movs	r0, #1
 80021aa:	f7ff feb9 	bl	8001f20 <display_b>
			display_c(true);
 80021ae:	2001      	movs	r0, #1
 80021b0:	f7ff fec8 	bl	8001f44 <display_c>
			display_d(true);
 80021b4:	2001      	movs	r0, #1
 80021b6:	f7ff fed7 	bl	8001f68 <display_d>
			display_e(true);
 80021ba:	2001      	movs	r0, #1
 80021bc:	f7ff fee6 	bl	8001f8c <display_e>
			display_f(true);
 80021c0:	2001      	movs	r0, #1
 80021c2:	f7ff fef5 	bl	8001fb0 <display_f>
			display_g(true);
 80021c6:	2001      	movs	r0, #1
 80021c8:	f7ff ff04 	bl	8001fd4 <display_g>
			break;
 80021cc:	e120      	b.n	8002410 <display_number+0x3f4>
		case 9:
			display_a(true);
 80021ce:	2001      	movs	r0, #1
 80021d0:	f7ff fe92 	bl	8001ef8 <display_a>
			display_b(true);
 80021d4:	2001      	movs	r0, #1
 80021d6:	f7ff fea3 	bl	8001f20 <display_b>
			display_c(true);
 80021da:	2001      	movs	r0, #1
 80021dc:	f7ff feb2 	bl	8001f44 <display_c>
			display_d(true);
 80021e0:	2001      	movs	r0, #1
 80021e2:	f7ff fec1 	bl	8001f68 <display_d>
			display_e(false);
 80021e6:	2000      	movs	r0, #0
 80021e8:	f7ff fed0 	bl	8001f8c <display_e>
			display_f(true);
 80021ec:	2001      	movs	r0, #1
 80021ee:	f7ff fedf 	bl	8001fb0 <display_f>
			display_g(true);
 80021f2:	2001      	movs	r0, #1
 80021f4:	f7ff feee 	bl	8001fd4 <display_g>
			break;
 80021f8:	e10a      	b.n	8002410 <display_number+0x3f4>
		case 10: // A
			display_a(true);
 80021fa:	2001      	movs	r0, #1
 80021fc:	f7ff fe7c 	bl	8001ef8 <display_a>
			display_b(true);
 8002200:	2001      	movs	r0, #1
 8002202:	f7ff fe8d 	bl	8001f20 <display_b>
			display_c(true);
 8002206:	2001      	movs	r0, #1
 8002208:	f7ff fe9c 	bl	8001f44 <display_c>
			display_d(true);
 800220c:	2001      	movs	r0, #1
 800220e:	f7ff feab 	bl	8001f68 <display_d>
			display_e(false);
 8002212:	2000      	movs	r0, #0
 8002214:	f7ff feba 	bl	8001f8c <display_e>
			display_f(true);
 8002218:	2001      	movs	r0, #1
 800221a:	f7ff fec9 	bl	8001fb0 <display_f>
			display_g(true);
 800221e:	2001      	movs	r0, #1
 8002220:	f7ff fed8 	bl	8001fd4 <display_g>
			break;
 8002224:	e0f4      	b.n	8002410 <display_number+0x3f4>
		case 11: // B
			display_a(true);
 8002226:	2001      	movs	r0, #1
 8002228:	f7ff fe66 	bl	8001ef8 <display_a>
			display_b(true);
 800222c:	2001      	movs	r0, #1
 800222e:	f7ff fe77 	bl	8001f20 <display_b>
			display_c(true);
 8002232:	2001      	movs	r0, #1
 8002234:	f7ff fe86 	bl	8001f44 <display_c>
			display_d(true);
 8002238:	2001      	movs	r0, #1
 800223a:	f7ff fe95 	bl	8001f68 <display_d>
			display_e(true);
 800223e:	2001      	movs	r0, #1
 8002240:	f7ff fea4 	bl	8001f8c <display_e>
			display_f(true);
 8002244:	2001      	movs	r0, #1
 8002246:	f7ff feb3 	bl	8001fb0 <display_f>
			display_g(true);
 800224a:	2001      	movs	r0, #1
 800224c:	f7ff fec2 	bl	8001fd4 <display_g>
			break;
 8002250:	e0de      	b.n	8002410 <display_number+0x3f4>
		case 12: // C
			display_a(true);
 8002252:	2001      	movs	r0, #1
 8002254:	f7ff fe50 	bl	8001ef8 <display_a>
			display_b(false);
 8002258:	2000      	movs	r0, #0
 800225a:	f7ff fe61 	bl	8001f20 <display_b>
			display_c(false);
 800225e:	2000      	movs	r0, #0
 8002260:	f7ff fe70 	bl	8001f44 <display_c>
			display_d(true);
 8002264:	2001      	movs	r0, #1
 8002266:	f7ff fe7f 	bl	8001f68 <display_d>
			display_e(true);
 800226a:	2001      	movs	r0, #1
 800226c:	f7ff fe8e 	bl	8001f8c <display_e>
			display_f(true);
 8002270:	2001      	movs	r0, #1
 8002272:	f7ff fe9d 	bl	8001fb0 <display_f>
			display_g(true);
 8002276:	2001      	movs	r0, #1
 8002278:	f7ff feac 	bl	8001fd4 <display_g>
			break;
 800227c:	e0c8      	b.n	8002410 <display_number+0x3f4>
		case 13: // D
			display_a(true);
 800227e:	2001      	movs	r0, #1
 8002280:	f7ff fe3a 	bl	8001ef8 <display_a>
			display_b(true);
 8002284:	2001      	movs	r0, #1
 8002286:	f7ff fe4b 	bl	8001f20 <display_b>
			display_c(true);
 800228a:	2001      	movs	r0, #1
 800228c:	f7ff fe5a 	bl	8001f44 <display_c>
			display_d(true);
 8002290:	2001      	movs	r0, #1
 8002292:	f7ff fe69 	bl	8001f68 <display_d>
			display_e(true);
 8002296:	2001      	movs	r0, #1
 8002298:	f7ff fe78 	bl	8001f8c <display_e>
			display_f(true);
 800229c:	2001      	movs	r0, #1
 800229e:	f7ff fe87 	bl	8001fb0 <display_f>
			display_g(false);
 80022a2:	2000      	movs	r0, #0
 80022a4:	f7ff fe96 	bl	8001fd4 <display_g>
			break;
 80022a8:	e0b2      	b.n	8002410 <display_number+0x3f4>
		case 14: // E
			display_a(true);
 80022aa:	2001      	movs	r0, #1
 80022ac:	f7ff fe24 	bl	8001ef8 <display_a>
			display_b(false);
 80022b0:	2000      	movs	r0, #0
 80022b2:	f7ff fe35 	bl	8001f20 <display_b>
			display_c(false);
 80022b6:	2000      	movs	r0, #0
 80022b8:	f7ff fe44 	bl	8001f44 <display_c>
			display_d(true);
 80022bc:	2001      	movs	r0, #1
 80022be:	f7ff fe53 	bl	8001f68 <display_d>
			display_e(true);
 80022c2:	2001      	movs	r0, #1
 80022c4:	f7ff fe62 	bl	8001f8c <display_e>
			display_f(true);
 80022c8:	2001      	movs	r0, #1
 80022ca:	f7ff fe71 	bl	8001fb0 <display_f>
			display_g(true);
 80022ce:	2001      	movs	r0, #1
 80022d0:	f7ff fe80 	bl	8001fd4 <display_g>
			break;
 80022d4:	e09c      	b.n	8002410 <display_number+0x3f4>
		case 15: // F
			display_a(true);
 80022d6:	2001      	movs	r0, #1
 80022d8:	f7ff fe0e 	bl	8001ef8 <display_a>
			display_b(false);
 80022dc:	2000      	movs	r0, #0
 80022de:	f7ff fe1f 	bl	8001f20 <display_b>
			display_c(false);
 80022e2:	2000      	movs	r0, #0
 80022e4:	f7ff fe2e 	bl	8001f44 <display_c>
			display_d(false);
 80022e8:	2000      	movs	r0, #0
 80022ea:	f7ff fe3d 	bl	8001f68 <display_d>
			display_e(true);
 80022ee:	2001      	movs	r0, #1
 80022f0:	f7ff fe4c 	bl	8001f8c <display_e>
			display_f(true);
 80022f4:	2001      	movs	r0, #1
 80022f6:	f7ff fe5b 	bl	8001fb0 <display_f>
			display_g(true);
 80022fa:	2001      	movs	r0, #1
 80022fc:	f7ff fe6a 	bl	8001fd4 <display_g>
			break;
 8002300:	e086      	b.n	8002410 <display_number+0x3f4>
		case 16: // T
			display_a(true);
 8002302:	2001      	movs	r0, #1
 8002304:	f7ff fdf8 	bl	8001ef8 <display_a>
			display_b(false);
 8002308:	2000      	movs	r0, #0
 800230a:	f7ff fe09 	bl	8001f20 <display_b>
			display_c(false);
 800230e:	2000      	movs	r0, #0
 8002310:	f7ff fe18 	bl	8001f44 <display_c>
			display_d(false);
 8002314:	2000      	movs	r0, #0
 8002316:	f7ff fe27 	bl	8001f68 <display_d>
			display_e(false);
 800231a:	2000      	movs	r0, #0
 800231c:	f7ff fe36 	bl	8001f8c <display_e>
			display_f(false);
 8002320:	2000      	movs	r0, #0
 8002322:	f7ff fe45 	bl	8001fb0 <display_f>
			display_g(false);
 8002326:	2000      	movs	r0, #0
 8002328:	f7ff fe54 	bl	8001fd4 <display_g>
			break;
 800232c:	e070      	b.n	8002410 <display_number+0x3f4>
		case 17: // L
			display_a(false);
 800232e:	2000      	movs	r0, #0
 8002330:	f7ff fde2 	bl	8001ef8 <display_a>
			display_b(false);
 8002334:	2000      	movs	r0, #0
 8002336:	f7ff fdf3 	bl	8001f20 <display_b>
			display_c(false);
 800233a:	2000      	movs	r0, #0
 800233c:	f7ff fe02 	bl	8001f44 <display_c>
			display_d(true);
 8002340:	2001      	movs	r0, #1
 8002342:	f7ff fe11 	bl	8001f68 <display_d>
			display_e(true);
 8002346:	2001      	movs	r0, #1
 8002348:	f7ff fe20 	bl	8001f8c <display_e>
			display_f(true);
 800234c:	2001      	movs	r0, #1
 800234e:	f7ff fe2f 	bl	8001fb0 <display_f>
			display_g(false);
 8002352:	2000      	movs	r0, #0
 8002354:	f7ff fe3e 	bl	8001fd4 <display_g>
			break;
 8002358:	e05a      	b.n	8002410 <display_number+0x3f4>
		case 18: // U
			display_a(false);
 800235a:	2000      	movs	r0, #0
 800235c:	f7ff fdcc 	bl	8001ef8 <display_a>
			display_b(true);
 8002360:	2001      	movs	r0, #1
 8002362:	f7ff fddd 	bl	8001f20 <display_b>
			display_c(true);
 8002366:	2001      	movs	r0, #1
 8002368:	f7ff fdec 	bl	8001f44 <display_c>
			display_d(true);
 800236c:	2001      	movs	r0, #1
 800236e:	f7ff fdfb 	bl	8001f68 <display_d>
			display_e(true);
 8002372:	2001      	movs	r0, #1
 8002374:	f7ff fe0a 	bl	8001f8c <display_e>
			display_f(true);
 8002378:	2001      	movs	r0, #1
 800237a:	f7ff fe19 	bl	8001fb0 <display_f>
			display_g(false);
 800237e:	2000      	movs	r0, #0
 8002380:	f7ff fe28 	bl	8001fd4 <display_g>
			break;
 8002384:	e044      	b.n	8002410 <display_number+0x3f4>
		case 19: // -
			display_a(false);
 8002386:	2000      	movs	r0, #0
 8002388:	f7ff fdb6 	bl	8001ef8 <display_a>
			display_b(false);
 800238c:	2000      	movs	r0, #0
 800238e:	f7ff fdc7 	bl	8001f20 <display_b>
			display_c(false);
 8002392:	2000      	movs	r0, #0
 8002394:	f7ff fdd6 	bl	8001f44 <display_c>
			display_d(false);
 8002398:	2000      	movs	r0, #0
 800239a:	f7ff fde5 	bl	8001f68 <display_d>
			display_e(false);
 800239e:	2000      	movs	r0, #0
 80023a0:	f7ff fdf4 	bl	8001f8c <display_e>
			display_f(false);
 80023a4:	2000      	movs	r0, #0
 80023a6:	f7ff fe03 	bl	8001fb0 <display_f>
			display_g(true);
 80023aa:	2001      	movs	r0, #1
 80023ac:	f7ff fe12 	bl	8001fd4 <display_g>
			break;
 80023b0:	e02e      	b.n	8002410 <display_number+0x3f4>
		case 20: // +
			display_a(false);
 80023b2:	2000      	movs	r0, #0
 80023b4:	f7ff fda0 	bl	8001ef8 <display_a>
			display_b(false);
 80023b8:	2000      	movs	r0, #0
 80023ba:	f7ff fdb1 	bl	8001f20 <display_b>
			display_c(false);
 80023be:	2000      	movs	r0, #0
 80023c0:	f7ff fdc0 	bl	8001f44 <display_c>
			display_d(false);
 80023c4:	2000      	movs	r0, #0
 80023c6:	f7ff fdcf 	bl	8001f68 <display_d>
			display_e(false);
 80023ca:	2000      	movs	r0, #0
 80023cc:	f7ff fdde 	bl	8001f8c <display_e>
			display_f(true);
 80023d0:	2001      	movs	r0, #1
 80023d2:	f7ff fded 	bl	8001fb0 <display_f>
			display_g(true);
 80023d6:	2001      	movs	r0, #1
 80023d8:	f7ff fdfc 	bl	8001fd4 <display_g>
			break;
 80023dc:	e018      	b.n	8002410 <display_number+0x3f4>
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	08006454 	.word	0x08006454
		default:
			display_a(false);
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7ff fd87 	bl	8001ef8 <display_a>
			display_b(false);
 80023ea:	2000      	movs	r0, #0
 80023ec:	f7ff fd98 	bl	8001f20 <display_b>
			display_c(false);
 80023f0:	2000      	movs	r0, #0
 80023f2:	f7ff fda7 	bl	8001f44 <display_c>
			display_d(false);
 80023f6:	2000      	movs	r0, #0
 80023f8:	f7ff fdb6 	bl	8001f68 <display_d>
			display_e(false);
 80023fc:	2000      	movs	r0, #0
 80023fe:	f7ff fdc5 	bl	8001f8c <display_e>
			display_f(false);
 8002402:	2000      	movs	r0, #0
 8002404:	f7ff fdd4 	bl	8001fb0 <display_f>
			display_g(false);
 8002408:	2000      	movs	r0, #0
 800240a:	f7ff fde3 	bl	8001fd4 <display_g>
			break;
 800240e:	46c0      	nop			; (mov r8, r8)
	}

	display_dp(dot);
 8002410:	1dbb      	adds	r3, r7, #6
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	0018      	movs	r0, r3
 8002416:	f7ff fdef 	bl	8001ff8 <display_dp>
}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	46bd      	mov	sp, r7
 800241e:	b002      	add	sp, #8
 8002420:	bd80      	pop	{r7, pc}
 8002422:	46c0      	nop			; (mov r8, r8)

08002424 <display_channel>:

void display_channel(double value)
{
 8002424:	b590      	push	{r4, r7, lr}
 8002426:	b089      	sub	sp, #36	; 0x24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6038      	str	r0, [r7, #0]
 800242c:	6079      	str	r1, [r7, #4]
	int temp = (int)(round(value * 100.0)) % 100;// / 100.0;
 800242e:	2200      	movs	r2, #0
 8002430:	4b9e      	ldr	r3, [pc, #632]	; (80026ac <display_channel+0x288>)
 8002432:	6838      	ldr	r0, [r7, #0]
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	f7fe fe53 	bl	80010e0 <__aeabi_dmul>
 800243a:	0002      	movs	r2, r0
 800243c:	000b      	movs	r3, r1
 800243e:	0010      	movs	r0, r2
 8002440:	0019      	movs	r1, r3
 8002442:	f003 ff59 	bl	80062f8 <round>
 8002446:	0002      	movs	r2, r0
 8002448:	000b      	movs	r3, r1
 800244a:	0010      	movs	r0, r2
 800244c:	0019      	movs	r1, r3
 800244e:	f7ff fc45 	bl	8001cdc <__aeabi_d2iz>
 8002452:	0003      	movs	r3, r0
 8002454:	2164      	movs	r1, #100	; 0x64
 8002456:	0018      	movs	r0, r3
 8002458:	f7fd ffc2 	bl	80003e0 <__aeabi_idivmod>
 800245c:	000b      	movs	r3, r1
 800245e:	61bb      	str	r3, [r7, #24]
	bool plus = ((temp > 30) && (temp < 50));
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	2b1e      	cmp	r3, #30
 8002464:	dd04      	ble.n	8002470 <display_channel+0x4c>
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	2b31      	cmp	r3, #49	; 0x31
 800246a:	dc01      	bgt.n	8002470 <display_channel+0x4c>
 800246c:	2201      	movs	r2, #1
 800246e:	e000      	b.n	8002472 <display_channel+0x4e>
 8002470:	2200      	movs	r2, #0
 8002472:	2317      	movs	r3, #23
 8002474:	18fb      	adds	r3, r7, r3
 8002476:	701a      	strb	r2, [r3, #0]
 8002478:	781a      	ldrb	r2, [r3, #0]
 800247a:	2101      	movs	r1, #1
 800247c:	400a      	ands	r2, r1
 800247e:	701a      	strb	r2, [r3, #0]
	bool minus = ((temp > 62) && (temp < 85));
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	2b3e      	cmp	r3, #62	; 0x3e
 8002484:	dd04      	ble.n	8002490 <display_channel+0x6c>
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	2b54      	cmp	r3, #84	; 0x54
 800248a:	dc01      	bgt.n	8002490 <display_channel+0x6c>
 800248c:	2201      	movs	r2, #1
 800248e:	e000      	b.n	8002492 <display_channel+0x6e>
 8002490:	2200      	movs	r2, #0
 8002492:	2316      	movs	r3, #22
 8002494:	18fb      	adds	r3, r7, r3
 8002496:	701a      	strb	r2, [r3, #0]
 8002498:	781a      	ldrb	r2, [r3, #0]
 800249a:	2101      	movs	r1, #1
 800249c:	400a      	ands	r2, r1
 800249e:	701a      	strb	r2, [r3, #0]

	//bool plus = temp

	int v = round(value) * 100;
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	0010      	movs	r0, r2
 80024a6:	0019      	movs	r1, r3
 80024a8:	f003 ff26 	bl	80062f8 <round>
 80024ac:	2200      	movs	r2, #0
 80024ae:	4b7f      	ldr	r3, [pc, #508]	; (80026ac <display_channel+0x288>)
 80024b0:	f7fe fe16 	bl	80010e0 <__aeabi_dmul>
 80024b4:	0002      	movs	r2, r0
 80024b6:	000b      	movs	r3, r1
 80024b8:	0010      	movs	r0, r2
 80024ba:	0019      	movs	r1, r3
 80024bc:	f7ff fc0e 	bl	8001cdc <__aeabi_d2iz>
 80024c0:	0003      	movs	r3, r0
 80024c2:	613b      	str	r3, [r7, #16]

	//value = value * 100;
	uint8_t n1 = -1;
 80024c4:	241f      	movs	r4, #31
 80024c6:	193b      	adds	r3, r7, r4
 80024c8:	22ff      	movs	r2, #255	; 0xff
 80024ca:	701a      	strb	r2, [r3, #0]
	uint8_t n2 = (v % 10000 - v % v % 1000) / 1000;
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4978      	ldr	r1, [pc, #480]	; (80026b0 <display_channel+0x28c>)
 80024d0:	0018      	movs	r0, r3
 80024d2:	f7fd ff85 	bl	80003e0 <__aeabi_idivmod>
 80024d6:	000b      	movs	r3, r1
 80024d8:	001a      	movs	r2, r3
 80024da:	23fa      	movs	r3, #250	; 0xfa
 80024dc:	0099      	lsls	r1, r3, #2
 80024de:	0010      	movs	r0, r2
 80024e0:	f7fd fe98 	bl	8000214 <__divsi3>
 80024e4:	0003      	movs	r3, r0
 80024e6:	001a      	movs	r2, r3
 80024e8:	230f      	movs	r3, #15
 80024ea:	18fb      	adds	r3, r7, r3
 80024ec:	701a      	strb	r2, [r3, #0]
	uint8_t n3 = (v % 1000 - v % v % 100) / 100;
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	22fa      	movs	r2, #250	; 0xfa
 80024f2:	0091      	lsls	r1, r2, #2
 80024f4:	0018      	movs	r0, r3
 80024f6:	f7fd ff73 	bl	80003e0 <__aeabi_idivmod>
 80024fa:	000b      	movs	r3, r1
 80024fc:	2164      	movs	r1, #100	; 0x64
 80024fe:	0018      	movs	r0, r3
 8002500:	f7fd fe88 	bl	8000214 <__divsi3>
 8002504:	0003      	movs	r3, r0
 8002506:	001a      	movs	r2, r3
 8002508:	230e      	movs	r3, #14
 800250a:	18fb      	adds	r3, r7, r3
 800250c:	701a      	strb	r2, [r3, #0]
	//uint8_t n4 = (value % 100 - value % value % 10) / 10;
	//uint8_t n5 = (value % 10 - value % value % 1) / 1;


	if (plus)
 800250e:	2317      	movs	r3, #23
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <display_channel+0xfc>
	{
		n1 = 20;
 8002518:	193b      	adds	r3, r7, r4
 800251a:	2214      	movs	r2, #20
 800251c:	701a      	strb	r2, [r3, #0]
 800251e:	e008      	b.n	8002532 <display_channel+0x10e>
	}
	else if (minus)
 8002520:	2316      	movs	r3, #22
 8002522:	18fb      	adds	r3, r7, r3
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <display_channel+0x10e>
	{
		n1 = 19;
 800252a:	231f      	movs	r3, #31
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	2213      	movs	r2, #19
 8002530:	701a      	strb	r2, [r3, #0]
	}

	if (ticks == 1)
 8002532:	4b60      	ldr	r3, [pc, #384]	; (80026b4 <display_channel+0x290>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d126      	bne.n	8002588 <display_channel+0x164>
	{
		display_d1(plus || minus);
 800253a:	2317      	movs	r3, #23
 800253c:	18fb      	adds	r3, r7, r3
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d104      	bne.n	800254e <display_channel+0x12a>
 8002544:	2316      	movs	r3, #22
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <display_channel+0x12e>
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <display_channel+0x130>
 8002552:	2300      	movs	r3, #0
 8002554:	1c1a      	adds	r2, r3, #0
 8002556:	2301      	movs	r3, #1
 8002558:	4013      	ands	r3, r2
 800255a:	b2db      	uxtb	r3, r3
 800255c:	0018      	movs	r0, r3
 800255e:	f7ff fc67 	bl	8001e30 <display_d1>
		display_d2(false);
 8002562:	2000      	movs	r0, #0
 8002564:	f7ff fc78 	bl	8001e58 <display_d2>
		display_d3(false);
 8002568:	2000      	movs	r0, #0
 800256a:	f7ff fc89 	bl	8001e80 <display_d3>
		display_d4(false);
 800256e:	2000      	movs	r0, #0
 8002570:	f7ff fc9a 	bl	8001ea8 <display_d4>
		display_d5(false);
 8002574:	2000      	movs	r0, #0
 8002576:	f7ff fcab 	bl	8001ed0 <display_d5>
		display_number(n1, false);
 800257a:	231f      	movs	r3, #31
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2100      	movs	r1, #0
 8002582:	0018      	movs	r0, r3
 8002584:	f7ff fd4a 	bl	800201c <display_number>
	}
	if (ticks == 2)
 8002588:	4b4a      	ldr	r3, [pc, #296]	; (80026b4 <display_channel+0x290>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d126      	bne.n	80025de <display_channel+0x1ba>
	{
		display_d1(false);
 8002590:	2000      	movs	r0, #0
 8002592:	f7ff fc4d 	bl	8001e30 <display_d1>
		display_d2(!((n1 == 0) && (n2 == 0)));
 8002596:	231f      	movs	r3, #31
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d104      	bne.n	80025aa <display_channel+0x186>
 80025a0:	230f      	movs	r3, #15
 80025a2:	18fb      	adds	r3, r7, r3
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <display_channel+0x18a>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <display_channel+0x18c>
 80025ae:	2300      	movs	r3, #0
 80025b0:	1c1a      	adds	r2, r3, #0
 80025b2:	2301      	movs	r3, #1
 80025b4:	4013      	ands	r3, r2
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	0018      	movs	r0, r3
 80025ba:	f7ff fc4d 	bl	8001e58 <display_d2>
		display_d3(false);
 80025be:	2000      	movs	r0, #0
 80025c0:	f7ff fc5e 	bl	8001e80 <display_d3>
		display_d4(false);
 80025c4:	2000      	movs	r0, #0
 80025c6:	f7ff fc6f 	bl	8001ea8 <display_d4>
		display_d5(false);
 80025ca:	2000      	movs	r0, #0
 80025cc:	f7ff fc80 	bl	8001ed0 <display_d5>
		display_number(n2, false);
 80025d0:	230f      	movs	r3, #15
 80025d2:	18fb      	adds	r3, r7, r3
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2100      	movs	r1, #0
 80025d8:	0018      	movs	r0, r3
 80025da:	f7ff fd1f 	bl	800201c <display_number>
	}
	if (ticks == 3)
 80025de:	4b35      	ldr	r3, [pc, #212]	; (80026b4 <display_channel+0x290>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d12b      	bne.n	800263e <display_channel+0x21a>
	{
		display_d1(false);
 80025e6:	2000      	movs	r0, #0
 80025e8:	f7ff fc22 	bl	8001e30 <display_d1>
		display_d2(false);
 80025ec:	2000      	movs	r0, #0
 80025ee:	f7ff fc33 	bl	8001e58 <display_d2>
		display_d3( !((n1 == 0) && (n2 == 0) && (n3 == 0))  );
 80025f2:	231f      	movs	r3, #31
 80025f4:	18fb      	adds	r3, r7, r3
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d109      	bne.n	8002610 <display_channel+0x1ec>
 80025fc:	230f      	movs	r3, #15
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d104      	bne.n	8002610 <display_channel+0x1ec>
 8002606:	230e      	movs	r3, #14
 8002608:	18fb      	adds	r3, r7, r3
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <display_channel+0x1f0>
 8002610:	2301      	movs	r3, #1
 8002612:	e000      	b.n	8002616 <display_channel+0x1f2>
 8002614:	2300      	movs	r3, #0
 8002616:	1c1a      	adds	r2, r3, #0
 8002618:	2301      	movs	r3, #1
 800261a:	4013      	ands	r3, r2
 800261c:	b2db      	uxtb	r3, r3
 800261e:	0018      	movs	r0, r3
 8002620:	f7ff fc2e 	bl	8001e80 <display_d3>
		display_d4(false);
 8002624:	2000      	movs	r0, #0
 8002626:	f7ff fc3f 	bl	8001ea8 <display_d4>
		display_d5(false);
 800262a:	2000      	movs	r0, #0
 800262c:	f7ff fc50 	bl	8001ed0 <display_d5>
		display_number(n3, false);
 8002630:	230e      	movs	r3, #14
 8002632:	18fb      	adds	r3, r7, r3
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2100      	movs	r1, #0
 8002638:	0018      	movs	r0, r3
 800263a:	f7ff fcef 	bl	800201c <display_number>
	}
	if (ticks == 4)
 800263e:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <display_channel+0x290>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b04      	cmp	r3, #4
 8002644:	d10e      	bne.n	8002664 <display_channel+0x240>
	{
		display_d1(false);
 8002646:	2000      	movs	r0, #0
 8002648:	f7ff fbf2 	bl	8001e30 <display_d1>
		display_d2(false);
 800264c:	2000      	movs	r0, #0
 800264e:	f7ff fc03 	bl	8001e58 <display_d2>
		display_d3(false);
 8002652:	2000      	movs	r0, #0
 8002654:	f7ff fc14 	bl	8001e80 <display_d3>
		display_d4(false);
 8002658:	2000      	movs	r0, #0
 800265a:	f7ff fc25 	bl	8001ea8 <display_d4>
		display_d5(false);
 800265e:	2000      	movs	r0, #0
 8002660:	f7ff fc36 	bl	8001ed0 <display_d5>
		//display_number(n4, false);
	}
	if (ticks == 5)
 8002664:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <display_channel+0x290>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b05      	cmp	r3, #5
 800266a:	d10e      	bne.n	800268a <display_channel+0x266>
	{
		display_d1(false);
 800266c:	2000      	movs	r0, #0
 800266e:	f7ff fbdf 	bl	8001e30 <display_d1>
		display_d2(false);
 8002672:	2000      	movs	r0, #0
 8002674:	f7ff fbf0 	bl	8001e58 <display_d2>
		display_d3(false);
 8002678:	2000      	movs	r0, #0
 800267a:	f7ff fc01 	bl	8001e80 <display_d3>
		display_d4(false);
 800267e:	2000      	movs	r0, #0
 8002680:	f7ff fc12 	bl	8001ea8 <display_d4>
		display_d5(false);
 8002684:	2000      	movs	r0, #0
 8002686:	f7ff fc23 	bl	8001ed0 <display_d5>
		//display_number(n5, false);
	}

	if (ticks == 5)
 800268a:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <display_channel+0x290>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b05      	cmp	r3, #5
 8002690:	d102      	bne.n	8002698 <display_channel+0x274>
	{
		ticks = 0;
 8002692:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <display_channel+0x290>)
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
	}
	ticks++;
 8002698:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <display_channel+0x290>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <display_channel+0x290>)
 80026a0:	601a      	str	r2, [r3, #0]
}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b009      	add	sp, #36	; 0x24
 80026a8:	bd90      	pop	{r4, r7, pc}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	40590000 	.word	0x40590000
 80026b0:	00002710 	.word	0x00002710
 80026b4:	20000064 	.word	0x20000064

080026b8 <display>:

void display(int value, bool dot)
{
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	000a      	movs	r2, r1
 80026c2:	1cfb      	adds	r3, r7, #3
 80026c4:	701a      	strb	r2, [r3, #0]
	uint8_t n1 = (value % 100000 - value % value % 10000) / 10000;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4990      	ldr	r1, [pc, #576]	; (800290c <display+0x254>)
 80026ca:	0018      	movs	r0, r3
 80026cc:	f7fd fe88 	bl	80003e0 <__aeabi_idivmod>
 80026d0:	000b      	movs	r3, r1
 80026d2:	498f      	ldr	r1, [pc, #572]	; (8002910 <display+0x258>)
 80026d4:	0018      	movs	r0, r3
 80026d6:	f7fd fd9d 	bl	8000214 <__divsi3>
 80026da:	0003      	movs	r3, r0
 80026dc:	001a      	movs	r2, r3
 80026de:	240f      	movs	r4, #15
 80026e0:	193b      	adds	r3, r7, r4
 80026e2:	701a      	strb	r2, [r3, #0]
	uint8_t n2 = (value % 10000 - value % value % 1000) / 1000;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	498a      	ldr	r1, [pc, #552]	; (8002910 <display+0x258>)
 80026e8:	0018      	movs	r0, r3
 80026ea:	f7fd fe79 	bl	80003e0 <__aeabi_idivmod>
 80026ee:	000b      	movs	r3, r1
 80026f0:	001a      	movs	r2, r3
 80026f2:	23fa      	movs	r3, #250	; 0xfa
 80026f4:	0099      	lsls	r1, r3, #2
 80026f6:	0010      	movs	r0, r2
 80026f8:	f7fd fd8c 	bl	8000214 <__divsi3>
 80026fc:	0003      	movs	r3, r0
 80026fe:	001a      	movs	r2, r3
 8002700:	230e      	movs	r3, #14
 8002702:	18fb      	adds	r3, r7, r3
 8002704:	701a      	strb	r2, [r3, #0]
	uint8_t n3 = (value % 1000 - value % value % 100) / 100;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	22fa      	movs	r2, #250	; 0xfa
 800270a:	0091      	lsls	r1, r2, #2
 800270c:	0018      	movs	r0, r3
 800270e:	f7fd fe67 	bl	80003e0 <__aeabi_idivmod>
 8002712:	000b      	movs	r3, r1
 8002714:	2164      	movs	r1, #100	; 0x64
 8002716:	0018      	movs	r0, r3
 8002718:	f7fd fd7c 	bl	8000214 <__divsi3>
 800271c:	0003      	movs	r3, r0
 800271e:	001a      	movs	r2, r3
 8002720:	230d      	movs	r3, #13
 8002722:	18fb      	adds	r3, r7, r3
 8002724:	701a      	strb	r2, [r3, #0]
	uint8_t n4 = (value % 100 - value % value % 10) / 10;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2164      	movs	r1, #100	; 0x64
 800272a:	0018      	movs	r0, r3
 800272c:	f7fd fe58 	bl	80003e0 <__aeabi_idivmod>
 8002730:	000b      	movs	r3, r1
 8002732:	210a      	movs	r1, #10
 8002734:	0018      	movs	r0, r3
 8002736:	f7fd fd6d 	bl	8000214 <__divsi3>
 800273a:	0003      	movs	r3, r0
 800273c:	001a      	movs	r2, r3
 800273e:	230c      	movs	r3, #12
 8002740:	18fb      	adds	r3, r7, r3
 8002742:	701a      	strb	r2, [r3, #0]
	uint8_t n5 = (value % 10 - value % value % 1) / 1;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	210a      	movs	r1, #10
 8002748:	0018      	movs	r0, r3
 800274a:	f7fd fe49 	bl	80003e0 <__aeabi_idivmod>
 800274e:	000b      	movs	r3, r1
 8002750:	001a      	movs	r2, r3
 8002752:	230b      	movs	r3, #11
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	701a      	strb	r2, [r3, #0]

	if (ticks == 1)
 8002758:	4b6e      	ldr	r3, [pc, #440]	; (8002914 <display+0x25c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d119      	bne.n	8002794 <display+0xdc>
	{
		display_d1(n1 != 0);
 8002760:	193b      	adds	r3, r7, r4
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	1e5a      	subs	r2, r3, #1
 8002766:	4193      	sbcs	r3, r2
 8002768:	b2db      	uxtb	r3, r3
 800276a:	0018      	movs	r0, r3
 800276c:	f7ff fb60 	bl	8001e30 <display_d1>
		display_d2(false);
 8002770:	2000      	movs	r0, #0
 8002772:	f7ff fb71 	bl	8001e58 <display_d2>
		display_d3(false);
 8002776:	2000      	movs	r0, #0
 8002778:	f7ff fb82 	bl	8001e80 <display_d3>
		display_d4(false);
 800277c:	2000      	movs	r0, #0
 800277e:	f7ff fb93 	bl	8001ea8 <display_d4>
		display_d5(false);
 8002782:	2000      	movs	r0, #0
 8002784:	f7ff fba4 	bl	8001ed0 <display_d5>
		display_number(n1, false);
 8002788:	193b      	adds	r3, r7, r4
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2100      	movs	r1, #0
 800278e:	0018      	movs	r0, r3
 8002790:	f7ff fc44 	bl	800201c <display_number>
	}
	if (ticks == 2)
 8002794:	4b5f      	ldr	r3, [pc, #380]	; (8002914 <display+0x25c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d126      	bne.n	80027ea <display+0x132>
	{
		display_d1(false);
 800279c:	2000      	movs	r0, #0
 800279e:	f7ff fb47 	bl	8001e30 <display_d1>
		display_d2(!((n1 == 0) && (n2 == 0)));
 80027a2:	230f      	movs	r3, #15
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d104      	bne.n	80027b6 <display+0xfe>
 80027ac:	230e      	movs	r3, #14
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <display+0x102>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <display+0x104>
 80027ba:	2300      	movs	r3, #0
 80027bc:	1c1a      	adds	r2, r3, #0
 80027be:	2301      	movs	r3, #1
 80027c0:	4013      	ands	r3, r2
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	0018      	movs	r0, r3
 80027c6:	f7ff fb47 	bl	8001e58 <display_d2>
		display_d3(false);
 80027ca:	2000      	movs	r0, #0
 80027cc:	f7ff fb58 	bl	8001e80 <display_d3>
		display_d4(false);
 80027d0:	2000      	movs	r0, #0
 80027d2:	f7ff fb69 	bl	8001ea8 <display_d4>
		display_d5(false);
 80027d6:	2000      	movs	r0, #0
 80027d8:	f7ff fb7a 	bl	8001ed0 <display_d5>
		display_number(n2, false);
 80027dc:	230e      	movs	r3, #14
 80027de:	18fb      	adds	r3, r7, r3
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2100      	movs	r1, #0
 80027e4:	0018      	movs	r0, r3
 80027e6:	f7ff fc19 	bl	800201c <display_number>
	}
	if (ticks == 3)
 80027ea:	4b4a      	ldr	r3, [pc, #296]	; (8002914 <display+0x25c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	d12d      	bne.n	800284e <display+0x196>
	{
		display_d1(false);
 80027f2:	2000      	movs	r0, #0
 80027f4:	f7ff fb1c 	bl	8001e30 <display_d1>
		display_d2(false);
 80027f8:	2000      	movs	r0, #0
 80027fa:	f7ff fb2d 	bl	8001e58 <display_d2>
		display_d3( !((n1 == 0) && (n2 == 0) && (n3 == 0))  );
 80027fe:	230f      	movs	r3, #15
 8002800:	18fb      	adds	r3, r7, r3
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d109      	bne.n	800281c <display+0x164>
 8002808:	230e      	movs	r3, #14
 800280a:	18fb      	adds	r3, r7, r3
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d104      	bne.n	800281c <display+0x164>
 8002812:	230d      	movs	r3, #13
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <display+0x168>
 800281c:	2301      	movs	r3, #1
 800281e:	e000      	b.n	8002822 <display+0x16a>
 8002820:	2300      	movs	r3, #0
 8002822:	1c1a      	adds	r2, r3, #0
 8002824:	2301      	movs	r3, #1
 8002826:	4013      	ands	r3, r2
 8002828:	b2db      	uxtb	r3, r3
 800282a:	0018      	movs	r0, r3
 800282c:	f7ff fb28 	bl	8001e80 <display_d3>
		display_d4(false);
 8002830:	2000      	movs	r0, #0
 8002832:	f7ff fb39 	bl	8001ea8 <display_d4>
		display_d5(false);
 8002836:	2000      	movs	r0, #0
 8002838:	f7ff fb4a 	bl	8001ed0 <display_d5>
		display_number(n3, dot);
 800283c:	1cfb      	adds	r3, r7, #3
 800283e:	781a      	ldrb	r2, [r3, #0]
 8002840:	230d      	movs	r3, #13
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	0011      	movs	r1, r2
 8002848:	0018      	movs	r0, r3
 800284a:	f7ff fbe7 	bl	800201c <display_number>
	}
	if (ticks == 4)
 800284e:	4b31      	ldr	r3, [pc, #196]	; (8002914 <display+0x25c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b04      	cmp	r3, #4
 8002854:	d130      	bne.n	80028b8 <display+0x200>
	{
		display_d1(false);
 8002856:	2000      	movs	r0, #0
 8002858:	f7ff faea 	bl	8001e30 <display_d1>
		display_d2(false);
 800285c:	2000      	movs	r0, #0
 800285e:	f7ff fafb 	bl	8001e58 <display_d2>
		display_d3(false);
 8002862:	2000      	movs	r0, #0
 8002864:	f7ff fb0c 	bl	8001e80 <display_d3>
		display_d4( !((n1 == 0) && (n2 == 0) && (n3 == 0) && (n4 == 0))   );
 8002868:	230f      	movs	r3, #15
 800286a:	18fb      	adds	r3, r7, r3
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10e      	bne.n	8002890 <display+0x1d8>
 8002872:	230e      	movs	r3, #14
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d109      	bne.n	8002890 <display+0x1d8>
 800287c:	230d      	movs	r3, #13
 800287e:	18fb      	adds	r3, r7, r3
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d104      	bne.n	8002890 <display+0x1d8>
 8002886:	230c      	movs	r3, #12
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <display+0x1dc>
 8002890:	2301      	movs	r3, #1
 8002892:	e000      	b.n	8002896 <display+0x1de>
 8002894:	2300      	movs	r3, #0
 8002896:	1c1a      	adds	r2, r3, #0
 8002898:	2301      	movs	r3, #1
 800289a:	4013      	ands	r3, r2
 800289c:	b2db      	uxtb	r3, r3
 800289e:	0018      	movs	r0, r3
 80028a0:	f7ff fb02 	bl	8001ea8 <display_d4>
		display_d5(false);
 80028a4:	2000      	movs	r0, #0
 80028a6:	f7ff fb13 	bl	8001ed0 <display_d5>
		display_number(n4, false);
 80028aa:	230c      	movs	r3, #12
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2100      	movs	r1, #0
 80028b2:	0018      	movs	r0, r3
 80028b4:	f7ff fbb2 	bl	800201c <display_number>
	}
	if (ticks == 5)
 80028b8:	4b16      	ldr	r3, [pc, #88]	; (8002914 <display+0x25c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b05      	cmp	r3, #5
 80028be:	d115      	bne.n	80028ec <display+0x234>
	{
		display_d1(false);
 80028c0:	2000      	movs	r0, #0
 80028c2:	f7ff fab5 	bl	8001e30 <display_d1>
		display_d2(false);
 80028c6:	2000      	movs	r0, #0
 80028c8:	f7ff fac6 	bl	8001e58 <display_d2>
		display_d3(false);
 80028cc:	2000      	movs	r0, #0
 80028ce:	f7ff fad7 	bl	8001e80 <display_d3>
		display_d4(false);
 80028d2:	2000      	movs	r0, #0
 80028d4:	f7ff fae8 	bl	8001ea8 <display_d4>
		display_d5(true);
 80028d8:	2001      	movs	r0, #1
 80028da:	f7ff faf9 	bl	8001ed0 <display_d5>
		display_number(n5, false);
 80028de:	230b      	movs	r3, #11
 80028e0:	18fb      	adds	r3, r7, r3
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2100      	movs	r1, #0
 80028e6:	0018      	movs	r0, r3
 80028e8:	f7ff fb98 	bl	800201c <display_number>
	}

	if (ticks == 5)
 80028ec:	4b09      	ldr	r3, [pc, #36]	; (8002914 <display+0x25c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2b05      	cmp	r3, #5
 80028f2:	d102      	bne.n	80028fa <display+0x242>
	{
		ticks = 0;
 80028f4:	4b07      	ldr	r3, [pc, #28]	; (8002914 <display+0x25c>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
	}
	ticks++;
 80028fa:	4b06      	ldr	r3, [pc, #24]	; (8002914 <display+0x25c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	4b04      	ldr	r3, [pc, #16]	; (8002914 <display+0x25c>)
 8002902:	601a      	str	r2, [r3, #0]
}
 8002904:	46c0      	nop			; (mov r8, r8)
 8002906:	46bd      	mov	sp, r7
 8002908:	b005      	add	sp, #20
 800290a:	bd90      	pop	{r4, r7, pc}
 800290c:	000186a0 	.word	0x000186a0
 8002910:	00002710 	.word	0x00002710
 8002914:	20000064 	.word	0x20000064

08002918 <filter>:
/* USER CODE BEGIN 0 */

int abc = 35000;

int filter(int64_t in, int64_t average, int alpha)
{
 8002918:	b5b0      	push	{r4, r5, r7, lr}
 800291a:	b08a      	sub	sp, #40	; 0x28
 800291c:	af00      	add	r7, sp, #0
 800291e:	61b8      	str	r0, [r7, #24]
 8002920:	61f9      	str	r1, [r7, #28]
 8002922:	613a      	str	r2, [r7, #16]
 8002924:	617b      	str	r3, [r7, #20]
	int64_t tmp;
	tmp = (int64_t)in * (alpha) + (int64_t)average * (65536 - alpha);
 8002926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	17db      	asrs	r3, r3, #31
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	68b8      	ldr	r0, [r7, #8]
 8002934:	68f9      	ldr	r1, [r7, #12]
 8002936:	f7fd fd59 	bl	80003ec <__aeabi_lmul>
 800293a:	0002      	movs	r2, r0
 800293c:	000b      	movs	r3, r1
 800293e:	60ba      	str	r2, [r7, #8]
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002944:	2280      	movs	r2, #128	; 0x80
 8002946:	0252      	lsls	r2, r2, #9
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	603b      	str	r3, [r7, #0]
 800294c:	17db      	asrs	r3, r3, #31
 800294e:	607b      	str	r3, [r7, #4]
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	6838      	ldr	r0, [r7, #0]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	f7fd fd48 	bl	80003ec <__aeabi_lmul>
 800295c:	0002      	movs	r2, r0
 800295e:	000b      	movs	r3, r1
 8002960:	68b8      	ldr	r0, [r7, #8]
 8002962:	68f9      	ldr	r1, [r7, #12]
 8002964:	1880      	adds	r0, r0, r2
 8002966:	4159      	adcs	r1, r3
 8002968:	0002      	movs	r2, r0
 800296a:	000b      	movs	r3, r1
 800296c:	623a      	str	r2, [r7, #32]
 800296e:	627b      	str	r3, [r7, #36]	; 0x24

	return (int32_t)((tmp + 32768) / 65536);
 8002970:	6a3a      	ldr	r2, [r7, #32]
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	2080      	movs	r0, #128	; 0x80
 8002976:	0200      	lsls	r0, r0, #8
 8002978:	2100      	movs	r1, #0
 800297a:	1812      	adds	r2, r2, r0
 800297c:	414b      	adcs	r3, r1
 800297e:	2b00      	cmp	r3, #0
 8002980:	da03      	bge.n	800298a <filter+0x72>
 8002982:	4807      	ldr	r0, [pc, #28]	; (80029a0 <filter+0x88>)
 8002984:	2100      	movs	r1, #0
 8002986:	1812      	adds	r2, r2, r0
 8002988:	414b      	adcs	r3, r1
 800298a:	0419      	lsls	r1, r3, #16
 800298c:	0c14      	lsrs	r4, r2, #16
 800298e:	430c      	orrs	r4, r1
 8002990:	141d      	asrs	r5, r3, #16
 8002992:	0022      	movs	r2, r4
 8002994:	002b      	movs	r3, r5
 8002996:	0013      	movs	r3, r2
}
 8002998:	0018      	movs	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	b00a      	add	sp, #40	; 0x28
 800299e:	bdb0      	pop	{r4, r5, r7, pc}
 80029a0:	0000ffff 	.word	0x0000ffff

080029a4 <compare>:

int compare(const void * a, const void * b)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
	return (*(int*)a - *(int*)b);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	1ad3      	subs	r3, r2, r3
}
 80029b8:	0018      	movs	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b002      	add	sp, #8
 80029be:	bd80      	pop	{r7, pc}

080029c0 <filterFMFrequency>:

int filterFMFrequency()
{
 80029c0:	b590      	push	{r4, r7, lr}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
	int buffer[] = { 10000, 10000, 10000, 10000, 10000 };
 80029c6:	003b      	movs	r3, r7
 80029c8:	4a10      	ldr	r2, [pc, #64]	; (8002a0c <filterFMFrequency+0x4c>)
 80029ca:	ca13      	ldmia	r2!, {r0, r1, r4}
 80029cc:	c313      	stmia	r3!, {r0, r1, r4}
 80029ce:	ca03      	ldmia	r2!, {r0, r1}
 80029d0:	c303      	stmia	r3!, {r0, r1}

	for(int i = 0; i < 5; i++)
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	e00a      	b.n	80029ee <filterFMFrequency+0x2e>
	{
		buffer[i] = FM_FREQUENCIES_BUFFER[i];
 80029d8:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <filterFMFrequency+0x50>)
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	0092      	lsls	r2, r2, #2
 80029de:	58d1      	ldr	r1, [r2, r3]
 80029e0:	003b      	movs	r3, r7
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	0092      	lsls	r2, r2, #2
 80029e6:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++)
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	3301      	adds	r3, #1
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	ddf1      	ble.n	80029d8 <filterFMFrequency+0x18>
	}

	qsort(buffer, 5, sizeof(int), compare);
 80029f4:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <filterFMFrequency+0x54>)
 80029f6:	0038      	movs	r0, r7
 80029f8:	2204      	movs	r2, #4
 80029fa:	2105      	movs	r1, #5
 80029fc:	f003 fb1c 	bl	8006038 <qsort>
	return buffer[2];
 8002a00:	003b      	movs	r3, r7
 8002a02:	689b      	ldr	r3, [r3, #8]
}
 8002a04:	0018      	movs	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b007      	add	sp, #28
 8002a0a:	bd90      	pop	{r4, r7, pc}
 8002a0c:	080063ac 	.word	0x080063ac
 8002a10:	20000008 	.word	0x20000008
 8002a14:	080029a5 	.word	0x080029a5

08002a18 <filterAMFrequency>:

int filterAMFrequency()
{
 8002a18:	b590      	push	{r4, r7, lr}
 8002a1a:	b087      	sub	sp, #28
 8002a1c:	af00      	add	r7, sp, #0
	int buffer[] = { 1000, 1000, 1000, 1000, 1000 };
 8002a1e:	003b      	movs	r3, r7
 8002a20:	4a10      	ldr	r2, [pc, #64]	; (8002a64 <filterAMFrequency+0x4c>)
 8002a22:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a24:	c313      	stmia	r3!, {r0, r1, r4}
 8002a26:	ca03      	ldmia	r2!, {r0, r1}
 8002a28:	c303      	stmia	r3!, {r0, r1}

	for(int i = 0; i < 5; i++)
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
 8002a2e:	e00a      	b.n	8002a46 <filterAMFrequency+0x2e>
	{
		buffer[i] = AM_FREQUENCIES_BUFFER[i];
 8002a30:	4b0d      	ldr	r3, [pc, #52]	; (8002a68 <filterAMFrequency+0x50>)
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	0092      	lsls	r2, r2, #2
 8002a36:	58d1      	ldr	r1, [r2, r3]
 8002a38:	003b      	movs	r3, r7
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	0092      	lsls	r2, r2, #2
 8002a3e:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++)
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	3301      	adds	r3, #1
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	ddf1      	ble.n	8002a30 <filterAMFrequency+0x18>
	}

	qsort(buffer, 5, sizeof(int), compare);
 8002a4c:	4b07      	ldr	r3, [pc, #28]	; (8002a6c <filterAMFrequency+0x54>)
 8002a4e:	0038      	movs	r0, r7
 8002a50:	2204      	movs	r2, #4
 8002a52:	2105      	movs	r1, #5
 8002a54:	f003 faf0 	bl	8006038 <qsort>
	return buffer[2];
 8002a58:	003b      	movs	r3, r7
 8002a5a:	689b      	ldr	r3, [r3, #8]
}
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b007      	add	sp, #28
 8002a62:	bd90      	pop	{r4, r7, pc}
 8002a64:	080063c0 	.word	0x080063c0
 8002a68:	20000020 	.word	0x20000020
 8002a6c:	080029a5 	.word	0x080029a5

08002a70 <getCalibrationValue>:

double getCalibrationValue()
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
	uint32_t y = 0;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < 5; i++)
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	e01d      	b.n	8002abc <getCalibrationValue+0x4c>
	{
		HAL_ADC_Start(&hadc1);
 8002a80:	4b1d      	ldr	r3, [pc, #116]	; (8002af8 <getCalibrationValue+0x88>)
 8002a82:	0018      	movs	r0, r3
 8002a84:	f001 fa28 	bl	8003ed8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002a88:	2301      	movs	r3, #1
 8002a8a:	425a      	negs	r2, r3
 8002a8c:	4b1a      	ldr	r3, [pc, #104]	; (8002af8 <getCalibrationValue+0x88>)
 8002a8e:	0011      	movs	r1, r2
 8002a90:	0018      	movs	r0, r3
 8002a92:	f001 fa6f 	bl	8003f74 <HAL_ADC_PollForConversion>
		int x = HAL_ADC_GetValue(&hadc1);
 8002a96:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <getCalibrationValue+0x88>)
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f001 faf9 	bl	8004090 <HAL_ADC_GetValue>
 8002a9e:	0003      	movs	r3, r0
 8002aa0:	607b      	str	r3, [r7, #4]

		y += x / 5;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2105      	movs	r1, #5
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f7fd fbb4 	bl	8000214 <__divsi3>
 8002aac:	0003      	movs	r3, r0
 8002aae:	001a      	movs	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	189b      	adds	r3, r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 5; i++)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	ddde      	ble.n	8002a80 <getCalibrationValue+0x10>
	}

	// +/- 0.5%
	double value = 0.995 + 0.000002442 * y;
 8002ac2:	6978      	ldr	r0, [r7, #20]
 8002ac4:	f7ff f970 	bl	8001da8 <__aeabi_ui2d>
 8002ac8:	4a0c      	ldr	r2, [pc, #48]	; (8002afc <getCalibrationValue+0x8c>)
 8002aca:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <getCalibrationValue+0x90>)
 8002acc:	f7fe fb08 	bl	80010e0 <__aeabi_dmul>
 8002ad0:	0002      	movs	r2, r0
 8002ad2:	000b      	movs	r3, r1
 8002ad4:	0010      	movs	r0, r2
 8002ad6:	0019      	movs	r1, r3
 8002ad8:	4a0a      	ldr	r2, [pc, #40]	; (8002b04 <getCalibrationValue+0x94>)
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <getCalibrationValue+0x98>)
 8002adc:	f7fd fcae 	bl	800043c <__aeabi_dadd>
 8002ae0:	0002      	movs	r2, r0
 8002ae2:	000b      	movs	r3, r1
 8002ae4:	60ba      	str	r2, [r7, #8]
 8002ae6:	60fb      	str	r3, [r7, #12]

	return value;
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	68fb      	ldr	r3, [r7, #12]
}
 8002aec:	0010      	movs	r0, r2
 8002aee:	0019      	movs	r1, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b006      	add	sp, #24
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	20000124 	.word	0x20000124
 8002afc:	b2904f5d 	.word	0xb2904f5d
 8002b00:	3ec47c27 	.word	0x3ec47c27
 8002b04:	3d70a3d7 	.word	0x3d70a3d7
 8002b08:	3fefd70a 	.word	0x3fefd70a

08002b0c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
  {
 8002b0c:	b5b0      	push	{r4, r5, r7, lr}
 8002b0e:	b08c      	sub	sp, #48	; 0x30
 8002b10:	af02      	add	r7, sp, #8
 8002b12:	61f8      	str	r0, [r7, #28]
  	if (htim->Instance == TIM14)
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a97      	ldr	r2, [pc, #604]	; (8002d78 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d155      	bne.n	8002bca <HAL_TIM_PeriodElapsedCallback+0xbe>
  	{
  		// 64 = PRESCALER / 7 = DEPENDING ON CPU-FREQUENCY / 10.7 MHz = IF
  		int f = 1 * (int)round((((TIM3->CNT * 64 * 7 * FREQUENCY_CALIBRATION) - 1070000) / 1000.0) / 1.0);
 8002b1e:	4b97      	ldr	r3, [pc, #604]	; (8002d7c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8002b20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b22:	0013      	movs	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	1a9b      	subs	r3, r3, r2
 8002b28:	019b      	lsls	r3, r3, #6
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f7ff f93c 	bl	8001da8 <__aeabi_ui2d>
 8002b30:	4b93      	ldr	r3, [pc, #588]	; (8002d80 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f7fe fad3 	bl	80010e0 <__aeabi_dmul>
 8002b3a:	0002      	movs	r2, r0
 8002b3c:	000b      	movs	r3, r1
 8002b3e:	0010      	movs	r0, r2
 8002b40:	0019      	movs	r1, r3
 8002b42:	2200      	movs	r2, #0
 8002b44:	4b8f      	ldr	r3, [pc, #572]	; (8002d84 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002b46:	f7fe fd37 	bl	80015b8 <__aeabi_dsub>
 8002b4a:	0002      	movs	r2, r0
 8002b4c:	000b      	movs	r3, r1
 8002b4e:	0010      	movs	r0, r2
 8002b50:	0019      	movs	r1, r3
 8002b52:	2200      	movs	r2, #0
 8002b54:	4b8c      	ldr	r3, [pc, #560]	; (8002d88 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002b56:	f7fd ffdb 	bl	8000b10 <__aeabi_ddiv>
 8002b5a:	0002      	movs	r2, r0
 8002b5c:	000b      	movs	r3, r1
 8002b5e:	0010      	movs	r0, r2
 8002b60:	0019      	movs	r1, r3
 8002b62:	f003 fbc9 	bl	80062f8 <round>
 8002b66:	0002      	movs	r2, r0
 8002b68:	000b      	movs	r3, r1
 8002b6a:	0010      	movs	r0, r2
 8002b6c:	0019      	movs	r1, r3
 8002b6e:	f7ff f8b5 	bl	8001cdc <__aeabi_d2iz>
 8002b72:	0003      	movs	r3, r0
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24

  		if ((f < (FM_FREQUENCY + 3)) || (f > (FM_FREQUENCY - 3)))
 8002b76:	4b85      	ldr	r3, [pc, #532]	; (8002d8c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	3302      	adds	r3, #2
 8002b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	dd05      	ble.n	8002b8e <HAL_TIM_PeriodElapsedCallback+0x82>
 8002b82:	4b82      	ldr	r3, [pc, #520]	; (8002d8c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	3b02      	subs	r3, #2
 8002b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	db16      	blt.n	8002bbc <HAL_TIM_PeriodElapsedCallback+0xb0>
  		{
  			FM_FREQUENCY = f;
 8002b8e:	4b7f      	ldr	r3, [pc, #508]	; (8002d8c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b92:	601a      	str	r2, [r3, #0]
  			FM_FREQUENCIES_BUFFER[FM_FREQUENCIES_BUFFER_POSITION] = FM_FREQUENCY;
 8002b94:	4b7e      	ldr	r3, [pc, #504]	; (8002d90 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	4b7c      	ldr	r3, [pc, #496]	; (8002d8c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002b9a:	6819      	ldr	r1, [r3, #0]
 8002b9c:	4b7d      	ldr	r3, [pc, #500]	; (8002d94 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002b9e:	0092      	lsls	r2, r2, #2
 8002ba0:	50d1      	str	r1, [r2, r3]

  			if (FM_FREQUENCIES_BUFFER_POSITION == 4)
 8002ba2:	4b7b      	ldr	r3, [pc, #492]	; (8002d90 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d103      	bne.n	8002bb2 <HAL_TIM_PeriodElapsedCallback+0xa6>
  			{
  				FM_FREQUENCIES_BUFFER_POSITION = 0;
 8002baa:	4b79      	ldr	r3, [pc, #484]	; (8002d90 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	e004      	b.n	8002bbc <HAL_TIM_PeriodElapsedCallback+0xb0>
  			}
  			else
  			{
  				FM_FREQUENCIES_BUFFER_POSITION++;
 8002bb2:	4b77      	ldr	r3, [pc, #476]	; (8002d90 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	4b75      	ldr	r3, [pc, #468]	; (8002d90 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002bba:	601a      	str	r2, [r3, #0]
  			}
  		}

  		TIM3->CNT = 0;
 8002bbc:	4b6f      	ldr	r3, [pc, #444]	; (8002d7c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	625a      	str	r2, [r3, #36]	; 0x24
  		TIM14->CNT = 0;
 8002bc2:	4b6d      	ldr	r3, [pc, #436]	; (8002d78 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	625a      	str	r2, [r3, #36]	; 0x24
				display(FM_FREQUENCY_FILTERED_AVERAGE, 1);
			}
  		}
  	}

  }
 8002bc8:	e0d2      	b.n	8002d70 <HAL_TIM_PeriodElapsedCallback+0x264>
  	else if (htim->Instance == TIM16)
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a72      	ldr	r2, [pc, #456]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d140      	bne.n	8002c56 <HAL_TIM_PeriodElapsedCallback+0x14a>
  		AM_FREQUENCY = ((TIM1->CNT * 7 * FREQUENCY_CALIBRATION) / 100.0) - 455;
 8002bd4:	4b71      	ldr	r3, [pc, #452]	; (8002d9c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002bd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bd8:	0013      	movs	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	1a9b      	subs	r3, r3, r2
 8002bde:	0018      	movs	r0, r3
 8002be0:	f7ff f8e2 	bl	8001da8 <__aeabi_ui2d>
 8002be4:	4b66      	ldr	r3, [pc, #408]	; (8002d80 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f7fe fa79 	bl	80010e0 <__aeabi_dmul>
 8002bee:	0002      	movs	r2, r0
 8002bf0:	000b      	movs	r3, r1
 8002bf2:	0010      	movs	r0, r2
 8002bf4:	0019      	movs	r1, r3
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	4b69      	ldr	r3, [pc, #420]	; (8002da0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002bfa:	f7fd ff89 	bl	8000b10 <__aeabi_ddiv>
 8002bfe:	0002      	movs	r2, r0
 8002c00:	000b      	movs	r3, r1
 8002c02:	0010      	movs	r0, r2
 8002c04:	0019      	movs	r1, r3
 8002c06:	2200      	movs	r2, #0
 8002c08:	4b66      	ldr	r3, [pc, #408]	; (8002da4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002c0a:	f7fe fcd5 	bl	80015b8 <__aeabi_dsub>
 8002c0e:	0002      	movs	r2, r0
 8002c10:	000b      	movs	r3, r1
 8002c12:	0010      	movs	r0, r2
 8002c14:	0019      	movs	r1, r3
 8002c16:	f7ff f861 	bl	8001cdc <__aeabi_d2iz>
 8002c1a:	0002      	movs	r2, r0
 8002c1c:	4b62      	ldr	r3, [pc, #392]	; (8002da8 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002c1e:	601a      	str	r2, [r3, #0]
  		AM_FREQUENCIES_BUFFER[AM_FREQUENCIES_BUFFER_POSITION] = AM_FREQUENCY;
 8002c20:	4b62      	ldr	r3, [pc, #392]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	4b60      	ldr	r3, [pc, #384]	; (8002da8 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002c26:	6819      	ldr	r1, [r3, #0]
 8002c28:	4b61      	ldr	r3, [pc, #388]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002c2a:	0092      	lsls	r2, r2, #2
 8002c2c:	50d1      	str	r1, [r2, r3]
  		if (AM_FREQUENCIES_BUFFER_POSITION == 4)
 8002c2e:	4b5f      	ldr	r3, [pc, #380]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d103      	bne.n	8002c3e <HAL_TIM_PeriodElapsedCallback+0x132>
  			AM_FREQUENCIES_BUFFER_POSITION = 0;
 8002c36:	4b5d      	ldr	r3, [pc, #372]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	e004      	b.n	8002c48 <HAL_TIM_PeriodElapsedCallback+0x13c>
  			AM_FREQUENCIES_BUFFER_POSITION++;
 8002c3e:	4b5b      	ldr	r3, [pc, #364]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	4b59      	ldr	r3, [pc, #356]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002c46:	601a      	str	r2, [r3, #0]
  		TIM1->CNT = 0;
 8002c48:	4b54      	ldr	r3, [pc, #336]	; (8002d9c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	625a      	str	r2, [r3, #36]	; 0x24
  		TIM16->CNT = 0;
 8002c4e:	4b52      	ldr	r3, [pc, #328]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	625a      	str	r2, [r3, #36]	; 0x24
  }
 8002c54:	e08c      	b.n	8002d70 <HAL_TIM_PeriodElapsedCallback+0x264>
  	else if (htim->Instance == TIM17)
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a56      	ldr	r2, [pc, #344]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d000      	beq.n	8002c62 <HAL_TIM_PeriodElapsedCallback+0x156>
 8002c60:	e086      	b.n	8002d70 <HAL_TIM_PeriodElapsedCallback+0x264>
  		FREQUENCY_CALIBRATION = getCalibrationValue();
 8002c62:	f7ff ff05 	bl	8002a70 <getCalibrationValue>
 8002c66:	0002      	movs	r2, r0
 8002c68:	000b      	movs	r3, r1
 8002c6a:	4945      	ldr	r1, [pc, #276]	; (8002d80 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8002c6c:	600a      	str	r2, [r1, #0]
 8002c6e:	604b      	str	r3, [r1, #4]
  		FM_FREQUENCY_FILTERED = filterFMFrequency();
 8002c70:	f7ff fea6 	bl	80029c0 <filterFMFrequency>
 8002c74:	0002      	movs	r2, r0
 8002c76:	4b50      	ldr	r3, [pc, #320]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002c78:	601a      	str	r2, [r3, #0]
  		FM_FREQUENCY_FILTERED_AVERAGE = filter(FM_FREQUENCY_FILTERED_AVERAGE, FM_FREQUENCY_FILTERED, abc);
 8002c7a:	4b50      	ldr	r3, [pc, #320]	; (8002dbc <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	17db      	asrs	r3, r3, #31
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	4b4c      	ldr	r3, [pc, #304]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	17db      	asrs	r3, r3, #31
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	4b4c      	ldr	r3, [pc, #304]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6938      	ldr	r0, [r7, #16]
 8002c9a:	6979      	ldr	r1, [r7, #20]
 8002c9c:	f7ff fe3c 	bl	8002918 <filter>
 8002ca0:	0002      	movs	r2, r0
 8002ca2:	4b46      	ldr	r3, [pc, #280]	; (8002dbc <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002ca4:	601a      	str	r2, [r3, #0]
  		FM_CHANNEL = (0.0333333 * ((FM_FREQUENCY_FILTERED_AVERAGE / 5) * 5.)) - 290.;
 8002ca6:	4b45      	ldr	r3, [pc, #276]	; (8002dbc <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2105      	movs	r1, #5
 8002cac:	0018      	movs	r0, r3
 8002cae:	f7fd fab1 	bl	8000214 <__divsi3>
 8002cb2:	0003      	movs	r3, r0
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f7ff f847 	bl	8001d48 <__aeabi_i2d>
 8002cba:	2200      	movs	r2, #0
 8002cbc:	4b41      	ldr	r3, [pc, #260]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002cbe:	f7fe fa0f 	bl	80010e0 <__aeabi_dmul>
 8002cc2:	0002      	movs	r2, r0
 8002cc4:	000b      	movs	r3, r1
 8002cc6:	0010      	movs	r0, r2
 8002cc8:	0019      	movs	r1, r3
 8002cca:	4a3f      	ldr	r2, [pc, #252]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002ccc:	4b3f      	ldr	r3, [pc, #252]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002cce:	f7fe fa07 	bl	80010e0 <__aeabi_dmul>
 8002cd2:	0002      	movs	r2, r0
 8002cd4:	000b      	movs	r3, r1
 8002cd6:	0010      	movs	r0, r2
 8002cd8:	0019      	movs	r1, r3
 8002cda:	2200      	movs	r2, #0
 8002cdc:	4b3c      	ldr	r3, [pc, #240]	; (8002dd0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002cde:	f7fe fc6b 	bl	80015b8 <__aeabi_dsub>
 8002ce2:	0002      	movs	r2, r0
 8002ce4:	000b      	movs	r3, r1
 8002ce6:	493b      	ldr	r1, [pc, #236]	; (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002ce8:	600a      	str	r2, [r1, #0]
 8002cea:	604b      	str	r3, [r1, #4]
  		AM_FREQUENCY_FILTERED = filterAMFrequency();
 8002cec:	f7ff fe94 	bl	8002a18 <filterAMFrequency>
 8002cf0:	0002      	movs	r2, r0
 8002cf2:	4b39      	ldr	r3, [pc, #228]	; (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002cf4:	601a      	str	r2, [r3, #0]
  		AM_FREQUENCY_FILTERED_AVERAGE = filter(AM_FREQUENCY_FILTERED_AVERAGE, AM_FREQUENCY_FILTERED, abc);
 8002cf6:	4b39      	ldr	r3, [pc, #228]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	001c      	movs	r4, r3
 8002cfc:	17db      	asrs	r3, r3, #31
 8002cfe:	001d      	movs	r5, r3
 8002d00:	4b35      	ldr	r3, [pc, #212]	; (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	603b      	str	r3, [r7, #0]
 8002d06:	17db      	asrs	r3, r3, #31
 8002d08:	607b      	str	r3, [r7, #4]
 8002d0a:	4b2d      	ldr	r3, [pc, #180]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	0020      	movs	r0, r4
 8002d16:	0029      	movs	r1, r5
 8002d18:	f7ff fdfe 	bl	8002918 <filter>
 8002d1c:	0002      	movs	r2, r0
 8002d1e:	4b2f      	ldr	r3, [pc, #188]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002d20:	601a      	str	r2, [r3, #0]
  		SHOW_AM = !HAL_GPIO_ReadPin(GPIOB, AM_FM_Pin);
 8002d22:	4b2f      	ldr	r3, [pc, #188]	; (8002de0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002d24:	2180      	movs	r1, #128	; 0x80
 8002d26:	0018      	movs	r0, r3
 8002d28:	f001 fe58 	bl	80049dc <HAL_GPIO_ReadPin>
 8002d2c:	0003      	movs	r3, r0
 8002d2e:	425a      	negs	r2, r3
 8002d30:	4153      	adcs	r3, r2
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	4b2b      	ldr	r3, [pc, #172]	; (8002de4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002d36:	701a      	strb	r2, [r3, #0]
  		if (SHOW_AM)
 8002d38:	4b2a      	ldr	r3, [pc, #168]	; (8002de4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d006      	beq.n	8002d4e <HAL_TIM_PeriodElapsedCallback+0x242>
  			display(AM_FREQUENCY_FILTERED_AVERAGE, 0);
 8002d40:	4b26      	ldr	r3, [pc, #152]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2100      	movs	r1, #0
 8002d46:	0018      	movs	r0, r3
 8002d48:	f7ff fcb6 	bl	80026b8 <display>
  }
 8002d4c:	e010      	b.n	8002d70 <HAL_TIM_PeriodElapsedCallback+0x264>
  			if (SHOW_FM_CHANNEL)
 8002d4e:	4b26      	ldr	r3, [pc, #152]	; (8002de8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d006      	beq.n	8002d64 <HAL_TIM_PeriodElapsedCallback+0x258>
  				display_channel(FM_CHANNEL, 0);
 8002d56:	4b1f      	ldr	r3, [pc, #124]	; (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	6859      	ldr	r1, [r3, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f7ff fb61 	bl	8002424 <display_channel>
  }
 8002d62:	e005      	b.n	8002d70 <HAL_TIM_PeriodElapsedCallback+0x264>
				display(FM_FREQUENCY_FILTERED_AVERAGE, 1);
 8002d64:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2101      	movs	r1, #1
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f7ff fca4 	bl	80026b8 <display>
  }
 8002d70:	46c0      	nop			; (mov r8, r8)
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b00a      	add	sp, #40	; 0x28
 8002d76:	bdb0      	pop	{r4, r5, r7, pc}
 8002d78:	40002000 	.word	0x40002000
 8002d7c:	40000400 	.word	0x40000400
 8002d80:	20000000 	.word	0x20000000
 8002d84:	413053b0 	.word	0x413053b0
 8002d88:	408f4000 	.word	0x408f4000
 8002d8c:	2000006c 	.word	0x2000006c
 8002d90:	20000070 	.word	0x20000070
 8002d94:	20000008 	.word	0x20000008
 8002d98:	40014400 	.word	0x40014400
 8002d9c:	40012c00 	.word	0x40012c00
 8002da0:	40590000 	.word	0x40590000
 8002da4:	407c7000 	.word	0x407c7000
 8002da8:	20000080 	.word	0x20000080
 8002dac:	20000084 	.word	0x20000084
 8002db0:	20000020 	.word	0x20000020
 8002db4:	40014800 	.word	0x40014800
 8002db8:	20000074 	.word	0x20000074
 8002dbc:	2000001c 	.word	0x2000001c
 8002dc0:	20000038 	.word	0x20000038
 8002dc4:	40140000 	.word	0x40140000
 8002dc8:	f2bc4a9f 	.word	0xf2bc4a9f
 8002dcc:	3fa1110f 	.word	0x3fa1110f
 8002dd0:	40722000 	.word	0x40722000
 8002dd4:	20000078 	.word	0x20000078
 8002dd8:	20000088 	.word	0x20000088
 8002ddc:	20000034 	.word	0x20000034
 8002de0:	50000400 	.word	0x50000400
 8002de4:	20000069 	.word	0x20000069
 8002de8:	20000068 	.word	0x20000068

08002dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002df0:	f000 fcd2 	bl	8003798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002df4:	f000 f854 	bl	8002ea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002df8:	f000 fa60 	bl	80032bc <MX_GPIO_Init>
  MX_TIM1_Init();
 8002dfc:	f000 f926 	bl	800304c <MX_TIM1_Init>
  MX_TIM3_Init();
 8002e00:	f000 f988 	bl	8003114 <MX_TIM3_Init>
  MX_TIM14_Init();
 8002e04:	f000 f9e4 	bl	80031d0 <MX_TIM14_Init>
  MX_TIM16_Init();
 8002e08:	f000 fa08 	bl	800321c <MX_TIM16_Init>
  MX_TIM17_Init();
 8002e0c:	f000 fa2e 	bl	800326c <MX_TIM17_Init>
  MX_ADC1_Init();
 8002e10:	f000 f8b2 	bl	8002f78 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1); 					// AM FRECQUENCY ETR
 8002e14:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <main+0x98>)
 8002e16:	0018      	movs	r0, r3
 8002e18:	f002 fc76 	bl	8005708 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3); 					// FM FRECQUENCY ETR
 8002e1c:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <main+0x9c>)
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f002 fc72 	bl	8005708 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim14); 				// FM FRECQUENCY COUNT PERIOD
 8002e24:	4b19      	ldr	r3, [pc, #100]	; (8002e8c <main+0xa0>)
 8002e26:	0018      	movs	r0, r3
 8002e28:	f002 fcb4 	bl	8005794 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16); 				// AM FRECQUENCY COUNT PERIOD
 8002e2c:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <main+0xa4>)
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f002 fcb0 	bl	8005794 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim17);				// DISPLAY MULTIPLEXING
 8002e34:	4b17      	ldr	r3, [pc, #92]	; (8002e94 <main+0xa8>)
 8002e36:	0018      	movs	r0, r3
 8002e38:	f002 fcac 	bl	8005794 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (!HAL_GPIO_ReadPin(GPIOB, BUTTON_FM_CHANNEL_Pin))
 8002e3c:	2380      	movs	r3, #128	; 0x80
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	4a15      	ldr	r2, [pc, #84]	; (8002e98 <main+0xac>)
 8002e42:	0019      	movs	r1, r3
 8002e44:	0010      	movs	r0, r2
 8002e46:	f001 fdc9 	bl	80049dc <HAL_GPIO_ReadPin>
 8002e4a:	1e03      	subs	r3, r0, #0
 8002e4c:	d1f6      	bne.n	8002e3c <main+0x50>
	  {
		  SHOW_FM_CHANNEL = !SHOW_FM_CHANNEL;
 8002e4e:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <main+0xb0>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	1e5a      	subs	r2, r3, #1
 8002e54:	4193      	sbcs	r3, r2
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2201      	movs	r2, #1
 8002e5a:	4053      	eors	r3, r2
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	1c1a      	adds	r2, r3, #0
 8002e60:	2301      	movs	r3, #1
 8002e62:	4013      	ands	r3, r2
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <main+0xb0>)
 8002e68:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(150);
 8002e6a:	2096      	movs	r0, #150	; 0x96
 8002e6c:	f000 fd1a 	bl	80038a4 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, LED_FM_CHANNEL_Pin, SHOW_FM_CHANNEL);
 8002e70:	4b0a      	ldr	r3, [pc, #40]	; (8002e9c <main+0xb0>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	001a      	movs	r2, r3
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4807      	ldr	r0, [pc, #28]	; (8002e98 <main+0xac>)
 8002e7c:	0019      	movs	r1, r3
 8002e7e:	f001 fdca 	bl	8004a16 <HAL_GPIO_WritePin>
	  if (!HAL_GPIO_ReadPin(GPIOB, BUTTON_FM_CHANNEL_Pin))
 8002e82:	e7db      	b.n	8002e3c <main+0x50>
 8002e84:	20000188 	.word	0x20000188
 8002e88:	200000d8 	.word	0x200000d8
 8002e8c:	200001d4 	.word	0x200001d4
 8002e90:	20000220 	.word	0x20000220
 8002e94:	2000008c 	.word	0x2000008c
 8002e98:	50000400 	.word	0x50000400
 8002e9c:	20000068 	.word	0x20000068

08002ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ea0:	b590      	push	{r4, r7, lr}
 8002ea2:	b099      	sub	sp, #100	; 0x64
 8002ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ea6:	242c      	movs	r4, #44	; 0x2c
 8002ea8:	193b      	adds	r3, r7, r4
 8002eaa:	0018      	movs	r0, r3
 8002eac:	2334      	movs	r3, #52	; 0x34
 8002eae:	001a      	movs	r2, r3
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	f003 f881 	bl	8005fb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002eb6:	231c      	movs	r3, #28
 8002eb8:	18fb      	adds	r3, r7, r3
 8002eba:	0018      	movs	r0, r3
 8002ebc:	2310      	movs	r3, #16
 8002ebe:	001a      	movs	r2, r3
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	f003 f879 	bl	8005fb8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ec6:	1d3b      	adds	r3, r7, #4
 8002ec8:	0018      	movs	r0, r3
 8002eca:	2318      	movs	r3, #24
 8002ecc:	001a      	movs	r2, r3
 8002ece:	2100      	movs	r1, #0
 8002ed0:	f003 f872 	bl	8005fb8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f001 fdb9 	bl	8004a50 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ede:	193b      	adds	r3, r7, r4
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ee4:	193b      	adds	r3, r7, r4
 8002ee6:	2280      	movs	r2, #128	; 0x80
 8002ee8:	0252      	lsls	r2, r2, #9
 8002eea:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002eec:	0021      	movs	r1, r4
 8002eee:	187b      	adds	r3, r7, r1
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ef4:	187b      	adds	r3, r7, r1
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002efa:	187b      	adds	r3, r7, r1
 8002efc:	2230      	movs	r2, #48	; 0x30
 8002efe:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 63;
 8002f00:	187b      	adds	r3, r7, r1
 8002f02:	223f      	movs	r2, #63	; 0x3f
 8002f04:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f06:	187b      	adds	r3, r7, r1
 8002f08:	2280      	movs	r2, #128	; 0x80
 8002f0a:	0292      	lsls	r2, r2, #10
 8002f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8002f0e:	187b      	adds	r3, r7, r1
 8002f10:	22c0      	movs	r2, #192	; 0xc0
 8002f12:	05d2      	lsls	r2, r2, #23
 8002f14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f16:	187b      	adds	r3, r7, r1
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f001 fdd9 	bl	8004ad0 <HAL_RCC_OscConfig>
 8002f1e:	1e03      	subs	r3, r0, #0
 8002f20:	d001      	beq.n	8002f26 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002f22:	f000 fa53 	bl	80033cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f26:	211c      	movs	r1, #28
 8002f28:	187b      	adds	r3, r7, r1
 8002f2a:	2207      	movs	r2, #7
 8002f2c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f2e:	187b      	adds	r3, r7, r1
 8002f30:	2202      	movs	r2, #2
 8002f32:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f34:	187b      	adds	r3, r7, r1
 8002f36:	2200      	movs	r2, #0
 8002f38:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f3a:	187b      	adds	r3, r7, r1
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f40:	187b      	adds	r3, r7, r1
 8002f42:	2102      	movs	r1, #2
 8002f44:	0018      	movs	r0, r3
 8002f46:	f002 f8d9 	bl	80050fc <HAL_RCC_ClockConfig>
 8002f4a:	1e03      	subs	r3, r0, #0
 8002f4c:	d001      	beq.n	8002f52 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002f4e:	f000 fa3d 	bl	80033cc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002f52:	1d3b      	adds	r3, r7, #4
 8002f54:	2280      	movs	r2, #128	; 0x80
 8002f56:	01d2      	lsls	r2, r2, #7
 8002f58:	601a      	str	r2, [r3, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002f5a:	1d3b      	adds	r3, r7, #4
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f60:	1d3b      	adds	r3, r7, #4
 8002f62:	0018      	movs	r0, r3
 8002f64:	f002 fa52 	bl	800540c <HAL_RCCEx_PeriphCLKConfig>
 8002f68:	1e03      	subs	r3, r0, #0
 8002f6a:	d001      	beq.n	8002f70 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002f6c:	f000 fa2e 	bl	80033cc <Error_Handler>
  }
}
 8002f70:	46c0      	nop			; (mov r8, r8)
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b019      	add	sp, #100	; 0x64
 8002f76:	bd90      	pop	{r4, r7, pc}

08002f78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f7e:	1d3b      	adds	r3, r7, #4
 8002f80:	0018      	movs	r0, r3
 8002f82:	230c      	movs	r3, #12
 8002f84:	001a      	movs	r2, r3
 8002f86:	2100      	movs	r1, #0
 8002f88:	f003 f816 	bl	8005fb8 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002f8c:	4b2d      	ldr	r3, [pc, #180]	; (8003044 <MX_ADC1_Init+0xcc>)
 8002f8e:	4a2e      	ldr	r2, [pc, #184]	; (8003048 <MX_ADC1_Init+0xd0>)
 8002f90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002f92:	4b2c      	ldr	r3, [pc, #176]	; (8003044 <MX_ADC1_Init+0xcc>)
 8002f94:	2280      	movs	r2, #128	; 0x80
 8002f96:	0612      	lsls	r2, r2, #24
 8002f98:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002f9a:	4b2a      	ldr	r3, [pc, #168]	; (8003044 <MX_ADC1_Init+0xcc>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002fa0:	4b28      	ldr	r3, [pc, #160]	; (8003044 <MX_ADC1_Init+0xcc>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002fa6:	4b27      	ldr	r3, [pc, #156]	; (8003044 <MX_ADC1_Init+0xcc>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002fac:	4b25      	ldr	r3, [pc, #148]	; (8003044 <MX_ADC1_Init+0xcc>)
 8002fae:	2204      	movs	r2, #4
 8002fb0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002fb2:	4b24      	ldr	r3, [pc, #144]	; (8003044 <MX_ADC1_Init+0xcc>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002fb8:	4b22      	ldr	r3, [pc, #136]	; (8003044 <MX_ADC1_Init+0xcc>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002fbe:	4b21      	ldr	r3, [pc, #132]	; (8003044 <MX_ADC1_Init+0xcc>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8002fc4:	4b1f      	ldr	r3, [pc, #124]	; (8003044 <MX_ADC1_Init+0xcc>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002fca:	4b1e      	ldr	r3, [pc, #120]	; (8003044 <MX_ADC1_Init+0xcc>)
 8002fcc:	2220      	movs	r2, #32
 8002fce:	2100      	movs	r1, #0
 8002fd0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002fd2:	4b1c      	ldr	r3, [pc, #112]	; (8003044 <MX_ADC1_Init+0xcc>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002fd8:	4b1a      	ldr	r3, [pc, #104]	; (8003044 <MX_ADC1_Init+0xcc>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002fde:	4b19      	ldr	r3, [pc, #100]	; (8003044 <MX_ADC1_Init+0xcc>)
 8002fe0:	222c      	movs	r2, #44	; 0x2c
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002fe6:	4b17      	ldr	r3, [pc, #92]	; (8003044 <MX_ADC1_Init+0xcc>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002fec:	4b15      	ldr	r3, [pc, #84]	; (8003044 <MX_ADC1_Init+0xcc>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002ff2:	4b14      	ldr	r3, [pc, #80]	; (8003044 <MX_ADC1_Init+0xcc>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002ff8:	4b12      	ldr	r3, [pc, #72]	; (8003044 <MX_ADC1_Init+0xcc>)
 8002ffa:	223c      	movs	r2, #60	; 0x3c
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003000:	4b10      	ldr	r3, [pc, #64]	; (8003044 <MX_ADC1_Init+0xcc>)
 8003002:	2200      	movs	r2, #0
 8003004:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003006:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <MX_ADC1_Init+0xcc>)
 8003008:	0018      	movs	r0, r3
 800300a:	f000 fd8d 	bl	8003b28 <HAL_ADC_Init>
 800300e:	1e03      	subs	r3, r0, #0
 8003010:	d001      	beq.n	8003016 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8003012:	f000 f9db 	bl	80033cc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003016:	1d3b      	adds	r3, r7, #4
 8003018:	2201      	movs	r2, #1
 800301a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800301c:	1d3b      	adds	r3, r7, #4
 800301e:	2200      	movs	r2, #0
 8003020:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003022:	1d3b      	adds	r3, r7, #4
 8003024:	2200      	movs	r2, #0
 8003026:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003028:	1d3a      	adds	r2, r7, #4
 800302a:	4b06      	ldr	r3, [pc, #24]	; (8003044 <MX_ADC1_Init+0xcc>)
 800302c:	0011      	movs	r1, r2
 800302e:	0018      	movs	r0, r3
 8003030:	f001 f83a 	bl	80040a8 <HAL_ADC_ConfigChannel>
 8003034:	1e03      	subs	r3, r0, #0
 8003036:	d001      	beq.n	800303c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8003038:	f000 f9c8 	bl	80033cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800303c:	46c0      	nop			; (mov r8, r8)
 800303e:	46bd      	mov	sp, r7
 8003040:	b004      	add	sp, #16
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20000124 	.word	0x20000124
 8003048:	40012400 	.word	0x40012400

0800304c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b088      	sub	sp, #32
 8003050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003052:	2310      	movs	r3, #16
 8003054:	18fb      	adds	r3, r7, r3
 8003056:	0018      	movs	r0, r3
 8003058:	2310      	movs	r3, #16
 800305a:	001a      	movs	r2, r3
 800305c:	2100      	movs	r1, #0
 800305e:	f002 ffab 	bl	8005fb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003062:	1d3b      	adds	r3, r7, #4
 8003064:	0018      	movs	r0, r3
 8003066:	230c      	movs	r3, #12
 8003068:	001a      	movs	r2, r3
 800306a:	2100      	movs	r1, #0
 800306c:	f002 ffa4 	bl	8005fb8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003070:	4b25      	ldr	r3, [pc, #148]	; (8003108 <MX_TIM1_Init+0xbc>)
 8003072:	4a26      	ldr	r2, [pc, #152]	; (800310c <MX_TIM1_Init+0xc0>)
 8003074:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003076:	4b24      	ldr	r3, [pc, #144]	; (8003108 <MX_TIM1_Init+0xbc>)
 8003078:	2200      	movs	r2, #0
 800307a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800307c:	4b22      	ldr	r3, [pc, #136]	; (8003108 <MX_TIM1_Init+0xbc>)
 800307e:	2200      	movs	r2, #0
 8003080:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003082:	4b21      	ldr	r3, [pc, #132]	; (8003108 <MX_TIM1_Init+0xbc>)
 8003084:	4a22      	ldr	r2, [pc, #136]	; (8003110 <MX_TIM1_Init+0xc4>)
 8003086:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003088:	4b1f      	ldr	r3, [pc, #124]	; (8003108 <MX_TIM1_Init+0xbc>)
 800308a:	2200      	movs	r2, #0
 800308c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800308e:	4b1e      	ldr	r3, [pc, #120]	; (8003108 <MX_TIM1_Init+0xbc>)
 8003090:	2200      	movs	r2, #0
 8003092:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003094:	4b1c      	ldr	r3, [pc, #112]	; (8003108 <MX_TIM1_Init+0xbc>)
 8003096:	2280      	movs	r2, #128	; 0x80
 8003098:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800309a:	4b1b      	ldr	r3, [pc, #108]	; (8003108 <MX_TIM1_Init+0xbc>)
 800309c:	0018      	movs	r0, r3
 800309e:	f002 fadb 	bl	8005658 <HAL_TIM_Base_Init>
 80030a2:	1e03      	subs	r3, r0, #0
 80030a4:	d001      	beq.n	80030aa <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80030a6:	f000 f991 	bl	80033cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80030aa:	2110      	movs	r1, #16
 80030ac:	187b      	adds	r3, r7, r1
 80030ae:	2280      	movs	r2, #128	; 0x80
 80030b0:	0192      	lsls	r2, r2, #6
 80030b2:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80030b4:	187b      	adds	r3, r7, r1
 80030b6:	2200      	movs	r2, #0
 80030b8:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80030ba:	187b      	adds	r3, r7, r1
 80030bc:	2200      	movs	r2, #0
 80030be:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 80030c0:	187b      	adds	r3, r7, r1
 80030c2:	2200      	movs	r2, #0
 80030c4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80030c6:	187a      	adds	r2, r7, r1
 80030c8:	4b0f      	ldr	r3, [pc, #60]	; (8003108 <MX_TIM1_Init+0xbc>)
 80030ca:	0011      	movs	r1, r2
 80030cc:	0018      	movs	r0, r3
 80030ce:	f002 fce1 	bl	8005a94 <HAL_TIM_ConfigClockSource>
 80030d2:	1e03      	subs	r3, r0, #0
 80030d4:	d001      	beq.n	80030da <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80030d6:	f000 f979 	bl	80033cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030da:	1d3b      	adds	r3, r7, #4
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80030e0:	1d3b      	adds	r3, r7, #4
 80030e2:	2200      	movs	r2, #0
 80030e4:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030e6:	1d3b      	adds	r3, r7, #4
 80030e8:	2200      	movs	r2, #0
 80030ea:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80030ec:	1d3a      	adds	r2, r7, #4
 80030ee:	4b06      	ldr	r3, [pc, #24]	; (8003108 <MX_TIM1_Init+0xbc>)
 80030f0:	0011      	movs	r1, r2
 80030f2:	0018      	movs	r0, r3
 80030f4:	f002 fec2 	bl	8005e7c <HAL_TIMEx_MasterConfigSynchronization>
 80030f8:	1e03      	subs	r3, r0, #0
 80030fa:	d001      	beq.n	8003100 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80030fc:	f000 f966 	bl	80033cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003100:	46c0      	nop			; (mov r8, r8)
 8003102:	46bd      	mov	sp, r7
 8003104:	b008      	add	sp, #32
 8003106:	bd80      	pop	{r7, pc}
 8003108:	20000188 	.word	0x20000188
 800310c:	40012c00 	.word	0x40012c00
 8003110:	0000ffff 	.word	0x0000ffff

08003114 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800311a:	2310      	movs	r3, #16
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	0018      	movs	r0, r3
 8003120:	2310      	movs	r3, #16
 8003122:	001a      	movs	r2, r3
 8003124:	2100      	movs	r1, #0
 8003126:	f002 ff47 	bl	8005fb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800312a:	1d3b      	adds	r3, r7, #4
 800312c:	0018      	movs	r0, r3
 800312e:	230c      	movs	r3, #12
 8003130:	001a      	movs	r2, r3
 8003132:	2100      	movs	r1, #0
 8003134:	f002 ff40 	bl	8005fb8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003138:	4b22      	ldr	r3, [pc, #136]	; (80031c4 <MX_TIM3_Init+0xb0>)
 800313a:	4a23      	ldr	r2, [pc, #140]	; (80031c8 <MX_TIM3_Init+0xb4>)
 800313c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800313e:	4b21      	ldr	r3, [pc, #132]	; (80031c4 <MX_TIM3_Init+0xb0>)
 8003140:	2200      	movs	r2, #0
 8003142:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003144:	4b1f      	ldr	r3, [pc, #124]	; (80031c4 <MX_TIM3_Init+0xb0>)
 8003146:	2200      	movs	r2, #0
 8003148:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800314a:	4b1e      	ldr	r3, [pc, #120]	; (80031c4 <MX_TIM3_Init+0xb0>)
 800314c:	4a1f      	ldr	r2, [pc, #124]	; (80031cc <MX_TIM3_Init+0xb8>)
 800314e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003150:	4b1c      	ldr	r3, [pc, #112]	; (80031c4 <MX_TIM3_Init+0xb0>)
 8003152:	2200      	movs	r2, #0
 8003154:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003156:	4b1b      	ldr	r3, [pc, #108]	; (80031c4 <MX_TIM3_Init+0xb0>)
 8003158:	2280      	movs	r2, #128	; 0x80
 800315a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800315c:	4b19      	ldr	r3, [pc, #100]	; (80031c4 <MX_TIM3_Init+0xb0>)
 800315e:	0018      	movs	r0, r3
 8003160:	f002 fa7a 	bl	8005658 <HAL_TIM_Base_Init>
 8003164:	1e03      	subs	r3, r0, #0
 8003166:	d001      	beq.n	800316c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003168:	f000 f930 	bl	80033cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800316c:	2110      	movs	r1, #16
 800316e:	187b      	adds	r3, r7, r1
 8003170:	2280      	movs	r2, #128	; 0x80
 8003172:	0192      	lsls	r2, r2, #6
 8003174:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8003176:	187b      	adds	r3, r7, r1
 8003178:	2200      	movs	r2, #0
 800317a:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800317c:	187b      	adds	r3, r7, r1
 800317e:	2200      	movs	r2, #0
 8003180:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8003182:	187b      	adds	r3, r7, r1
 8003184:	2200      	movs	r2, #0
 8003186:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003188:	187a      	adds	r2, r7, r1
 800318a:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <MX_TIM3_Init+0xb0>)
 800318c:	0011      	movs	r1, r2
 800318e:	0018      	movs	r0, r3
 8003190:	f002 fc80 	bl	8005a94 <HAL_TIM_ConfigClockSource>
 8003194:	1e03      	subs	r3, r0, #0
 8003196:	d001      	beq.n	800319c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8003198:	f000 f918 	bl	80033cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800319c:	1d3b      	adds	r3, r7, #4
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031a2:	1d3b      	adds	r3, r7, #4
 80031a4:	2200      	movs	r2, #0
 80031a6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80031a8:	1d3a      	adds	r2, r7, #4
 80031aa:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <MX_TIM3_Init+0xb0>)
 80031ac:	0011      	movs	r1, r2
 80031ae:	0018      	movs	r0, r3
 80031b0:	f002 fe64 	bl	8005e7c <HAL_TIMEx_MasterConfigSynchronization>
 80031b4:	1e03      	subs	r3, r0, #0
 80031b6:	d001      	beq.n	80031bc <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 80031b8:	f000 f908 	bl	80033cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80031bc:	46c0      	nop			; (mov r8, r8)
 80031be:	46bd      	mov	sp, r7
 80031c0:	b008      	add	sp, #32
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	200000d8 	.word	0x200000d8
 80031c8:	40000400 	.word	0x40000400
 80031cc:	0000ffff 	.word	0x0000ffff

080031d0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80031d4:	4b0f      	ldr	r3, [pc, #60]	; (8003214 <MX_TIM14_Init+0x44>)
 80031d6:	4a10      	ldr	r2, [pc, #64]	; (8003218 <MX_TIM14_Init+0x48>)
 80031d8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1000;
 80031da:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <MX_TIM14_Init+0x44>)
 80031dc:	22fa      	movs	r2, #250	; 0xfa
 80031de:	0092      	lsls	r2, r2, #2
 80031e0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031e2:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <MX_TIM14_Init+0x44>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 900;
 80031e8:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <MX_TIM14_Init+0x44>)
 80031ea:	22e1      	movs	r2, #225	; 0xe1
 80031ec:	0092      	lsls	r2, r2, #2
 80031ee:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031f0:	4b08      	ldr	r3, [pc, #32]	; (8003214 <MX_TIM14_Init+0x44>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031f6:	4b07      	ldr	r3, [pc, #28]	; (8003214 <MX_TIM14_Init+0x44>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80031fc:	4b05      	ldr	r3, [pc, #20]	; (8003214 <MX_TIM14_Init+0x44>)
 80031fe:	0018      	movs	r0, r3
 8003200:	f002 fa2a 	bl	8005658 <HAL_TIM_Base_Init>
 8003204:	1e03      	subs	r3, r0, #0
 8003206:	d001      	beq.n	800320c <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8003208:	f000 f8e0 	bl	80033cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800320c:	46c0      	nop			; (mov r8, r8)
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	200001d4 	.word	0x200001d4
 8003218:	40002000 	.word	0x40002000

0800321c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003220:	4b10      	ldr	r3, [pc, #64]	; (8003264 <MX_TIM16_Init+0x48>)
 8003222:	4a11      	ldr	r2, [pc, #68]	; (8003268 <MX_TIM16_Init+0x4c>)
 8003224:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1000;
 8003226:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <MX_TIM16_Init+0x48>)
 8003228:	22fa      	movs	r2, #250	; 0xfa
 800322a:	0092      	lsls	r2, r2, #2
 800322c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800322e:	4b0d      	ldr	r3, [pc, #52]	; (8003264 <MX_TIM16_Init+0x48>)
 8003230:	2200      	movs	r2, #0
 8003232:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 900;
 8003234:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <MX_TIM16_Init+0x48>)
 8003236:	22e1      	movs	r2, #225	; 0xe1
 8003238:	0092      	lsls	r2, r2, #2
 800323a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800323c:	4b09      	ldr	r3, [pc, #36]	; (8003264 <MX_TIM16_Init+0x48>)
 800323e:	2200      	movs	r2, #0
 8003240:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003242:	4b08      	ldr	r3, [pc, #32]	; (8003264 <MX_TIM16_Init+0x48>)
 8003244:	2200      	movs	r2, #0
 8003246:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003248:	4b06      	ldr	r3, [pc, #24]	; (8003264 <MX_TIM16_Init+0x48>)
 800324a:	2200      	movs	r2, #0
 800324c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800324e:	4b05      	ldr	r3, [pc, #20]	; (8003264 <MX_TIM16_Init+0x48>)
 8003250:	0018      	movs	r0, r3
 8003252:	f002 fa01 	bl	8005658 <HAL_TIM_Base_Init>
 8003256:	1e03      	subs	r3, r0, #0
 8003258:	d001      	beq.n	800325e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800325a:	f000 f8b7 	bl	80033cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	20000220 	.word	0x20000220
 8003268:	40014400 	.word	0x40014400

0800326c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003270:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <MX_TIM17_Init+0x48>)
 8003272:	4a11      	ldr	r2, [pc, #68]	; (80032b8 <MX_TIM17_Init+0x4c>)
 8003274:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 500;
 8003276:	4b0f      	ldr	r3, [pc, #60]	; (80032b4 <MX_TIM17_Init+0x48>)
 8003278:	22fa      	movs	r2, #250	; 0xfa
 800327a:	0052      	lsls	r2, r2, #1
 800327c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800327e:	4b0d      	ldr	r3, [pc, #52]	; (80032b4 <MX_TIM17_Init+0x48>)
 8003280:	2200      	movs	r2, #0
 8003282:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 250;
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <MX_TIM17_Init+0x48>)
 8003286:	22fa      	movs	r2, #250	; 0xfa
 8003288:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800328a:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <MX_TIM17_Init+0x48>)
 800328c:	2200      	movs	r2, #0
 800328e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003290:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <MX_TIM17_Init+0x48>)
 8003292:	2200      	movs	r2, #0
 8003294:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003296:	4b07      	ldr	r3, [pc, #28]	; (80032b4 <MX_TIM17_Init+0x48>)
 8003298:	2200      	movs	r2, #0
 800329a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800329c:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <MX_TIM17_Init+0x48>)
 800329e:	0018      	movs	r0, r3
 80032a0:	f002 f9da 	bl	8005658 <HAL_TIM_Base_Init>
 80032a4:	1e03      	subs	r3, r0, #0
 80032a6:	d001      	beq.n	80032ac <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80032a8:	f000 f890 	bl	80033cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80032ac:	46c0      	nop			; (mov r8, r8)
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	2000008c 	.word	0x2000008c
 80032b8:	40014800 	.word	0x40014800

080032bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032bc:	b590      	push	{r4, r7, lr}
 80032be:	b08b      	sub	sp, #44	; 0x2c
 80032c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c2:	2414      	movs	r4, #20
 80032c4:	193b      	adds	r3, r7, r4
 80032c6:	0018      	movs	r0, r3
 80032c8:	2314      	movs	r3, #20
 80032ca:	001a      	movs	r2, r3
 80032cc:	2100      	movs	r1, #0
 80032ce:	f002 fe73 	bl	8005fb8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80032d2:	4b3b      	ldr	r3, [pc, #236]	; (80033c0 <MX_GPIO_Init+0x104>)
 80032d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032d6:	4b3a      	ldr	r3, [pc, #232]	; (80033c0 <MX_GPIO_Init+0x104>)
 80032d8:	2120      	movs	r1, #32
 80032da:	430a      	orrs	r2, r1
 80032dc:	635a      	str	r2, [r3, #52]	; 0x34
 80032de:	4b38      	ldr	r3, [pc, #224]	; (80033c0 <MX_GPIO_Init+0x104>)
 80032e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e2:	2220      	movs	r2, #32
 80032e4:	4013      	ands	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ea:	4b35      	ldr	r3, [pc, #212]	; (80033c0 <MX_GPIO_Init+0x104>)
 80032ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ee:	4b34      	ldr	r3, [pc, #208]	; (80033c0 <MX_GPIO_Init+0x104>)
 80032f0:	2101      	movs	r1, #1
 80032f2:	430a      	orrs	r2, r1
 80032f4:	635a      	str	r2, [r3, #52]	; 0x34
 80032f6:	4b32      	ldr	r3, [pc, #200]	; (80033c0 <MX_GPIO_Init+0x104>)
 80032f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fa:	2201      	movs	r2, #1
 80032fc:	4013      	ands	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003302:	4b2f      	ldr	r3, [pc, #188]	; (80033c0 <MX_GPIO_Init+0x104>)
 8003304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003306:	4b2e      	ldr	r3, [pc, #184]	; (80033c0 <MX_GPIO_Init+0x104>)
 8003308:	2102      	movs	r1, #2
 800330a:	430a      	orrs	r2, r1
 800330c:	635a      	str	r2, [r3, #52]	; 0x34
 800330e:	4b2c      	ldr	r3, [pc, #176]	; (80033c0 <MX_GPIO_Init+0x104>)
 8003310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003312:	2202      	movs	r2, #2
 8003314:	4013      	ands	r3, r2
 8003316:	60bb      	str	r3, [r7, #8]
 8003318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800331a:	4b29      	ldr	r3, [pc, #164]	; (80033c0 <MX_GPIO_Init+0x104>)
 800331c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800331e:	4b28      	ldr	r3, [pc, #160]	; (80033c0 <MX_GPIO_Init+0x104>)
 8003320:	2108      	movs	r1, #8
 8003322:	430a      	orrs	r2, r1
 8003324:	635a      	str	r2, [r3, #52]	; 0x34
 8003326:	4b26      	ldr	r3, [pc, #152]	; (80033c0 <MX_GPIO_Init+0x104>)
 8003328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332a:	2208      	movs	r2, #8
 800332c:	4013      	ands	r3, r2
 800332e:	607b      	str	r3, [r7, #4]
 8003330:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DP_DOT_Pin|DP_G_Pin|DP_F_Pin|DP_E_Pin
 8003332:	23a0      	movs	r3, #160	; 0xa0
 8003334:	05db      	lsls	r3, r3, #23
 8003336:	2200      	movs	r2, #0
 8003338:	21fe      	movs	r1, #254	; 0xfe
 800333a:	0018      	movs	r0, r3
 800333c:	f001 fb6b 	bl	8004a16 <HAL_GPIO_WritePin>
                          |DP_D_Pin|DP_C_Pin|DP_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DP_A_Pin|DP_D5_Pin|DP_D4_Pin|DP_D3_Pin
 8003340:	4920      	ldr	r1, [pc, #128]	; (80033c4 <MX_GPIO_Init+0x108>)
 8003342:	4b21      	ldr	r3, [pc, #132]	; (80033c8 <MX_GPIO_Init+0x10c>)
 8003344:	2200      	movs	r2, #0
 8003346:	0018      	movs	r0, r3
 8003348:	f001 fb65 	bl	8004a16 <HAL_GPIO_WritePin>
                          |DP_D2_Pin|DP_D1_Pin|LED_FM_CHANNEL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DP_DOT_Pin DP_G_Pin DP_F_Pin DP_E_Pin
                           DP_D_Pin DP_C_Pin DP_B_Pin */
  GPIO_InitStruct.Pin = DP_DOT_Pin|DP_G_Pin|DP_F_Pin|DP_E_Pin
 800334c:	193b      	adds	r3, r7, r4
 800334e:	22fe      	movs	r2, #254	; 0xfe
 8003350:	601a      	str	r2, [r3, #0]
                          |DP_D_Pin|DP_C_Pin|DP_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003352:	193b      	adds	r3, r7, r4
 8003354:	2201      	movs	r2, #1
 8003356:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003358:	193b      	adds	r3, r7, r4
 800335a:	2200      	movs	r2, #0
 800335c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335e:	193b      	adds	r3, r7, r4
 8003360:	2200      	movs	r2, #0
 8003362:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003364:	193a      	adds	r2, r7, r4
 8003366:	23a0      	movs	r3, #160	; 0xa0
 8003368:	05db      	lsls	r3, r3, #23
 800336a:	0011      	movs	r1, r2
 800336c:	0018      	movs	r0, r3
 800336e:	f001 f9d1 	bl	8004714 <HAL_GPIO_Init>

  /*Configure GPIO pins : DP_A_Pin DP_D5_Pin DP_D4_Pin DP_D3_Pin
                           DP_D2_Pin DP_D1_Pin LED_FM_CHANNEL_Pin */
  GPIO_InitStruct.Pin = DP_A_Pin|DP_D5_Pin|DP_D4_Pin|DP_D3_Pin
 8003372:	193b      	adds	r3, r7, r4
 8003374:	4a13      	ldr	r2, [pc, #76]	; (80033c4 <MX_GPIO_Init+0x108>)
 8003376:	601a      	str	r2, [r3, #0]
                          |DP_D2_Pin|DP_D1_Pin|LED_FM_CHANNEL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003378:	193b      	adds	r3, r7, r4
 800337a:	2201      	movs	r2, #1
 800337c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337e:	193b      	adds	r3, r7, r4
 8003380:	2200      	movs	r2, #0
 8003382:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003384:	193b      	adds	r3, r7, r4
 8003386:	2200      	movs	r2, #0
 8003388:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800338a:	193b      	adds	r3, r7, r4
 800338c:	4a0e      	ldr	r2, [pc, #56]	; (80033c8 <MX_GPIO_Init+0x10c>)
 800338e:	0019      	movs	r1, r3
 8003390:	0010      	movs	r0, r2
 8003392:	f001 f9bf 	bl	8004714 <HAL_GPIO_Init>

  /*Configure GPIO pins : AM_FM_Pin BUTTON_FM_CHANNEL_Pin */
  GPIO_InitStruct.Pin = AM_FM_Pin|BUTTON_FM_CHANNEL_Pin;
 8003396:	0021      	movs	r1, r4
 8003398:	187b      	adds	r3, r7, r1
 800339a:	22c0      	movs	r2, #192	; 0xc0
 800339c:	0052      	lsls	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033a0:	187b      	adds	r3, r7, r1
 80033a2:	2200      	movs	r2, #0
 80033a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033a6:	187b      	adds	r3, r7, r1
 80033a8:	2201      	movs	r2, #1
 80033aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ac:	187b      	adds	r3, r7, r1
 80033ae:	4a06      	ldr	r2, [pc, #24]	; (80033c8 <MX_GPIO_Init+0x10c>)
 80033b0:	0019      	movs	r1, r3
 80033b2:	0010      	movs	r0, r2
 80033b4:	f001 f9ae 	bl	8004714 <HAL_GPIO_Init>

}
 80033b8:	46c0      	nop			; (mov r8, r8)
 80033ba:	46bd      	mov	sp, r7
 80033bc:	b00b      	add	sp, #44	; 0x2c
 80033be:	bd90      	pop	{r4, r7, pc}
 80033c0:	40021000 	.word	0x40021000
 80033c4:	00001e07 	.word	0x00001e07
 80033c8:	50000400 	.word	0x50000400

080033cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033d0:	b672      	cpsid	i
}
 80033d2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033d4:	e7fe      	b.n	80033d4 <Error_Handler+0x8>
	...

080033d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033de:	4b0f      	ldr	r3, [pc, #60]	; (800341c <HAL_MspInit+0x44>)
 80033e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033e2:	4b0e      	ldr	r3, [pc, #56]	; (800341c <HAL_MspInit+0x44>)
 80033e4:	2101      	movs	r1, #1
 80033e6:	430a      	orrs	r2, r1
 80033e8:	641a      	str	r2, [r3, #64]	; 0x40
 80033ea:	4b0c      	ldr	r3, [pc, #48]	; (800341c <HAL_MspInit+0x44>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	2201      	movs	r2, #1
 80033f0:	4013      	ands	r3, r2
 80033f2:	607b      	str	r3, [r7, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033f6:	4b09      	ldr	r3, [pc, #36]	; (800341c <HAL_MspInit+0x44>)
 80033f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033fa:	4b08      	ldr	r3, [pc, #32]	; (800341c <HAL_MspInit+0x44>)
 80033fc:	2180      	movs	r1, #128	; 0x80
 80033fe:	0549      	lsls	r1, r1, #21
 8003400:	430a      	orrs	r2, r1
 8003402:	63da      	str	r2, [r3, #60]	; 0x3c
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_MspInit+0x44>)
 8003406:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003408:	2380      	movs	r3, #128	; 0x80
 800340a:	055b      	lsls	r3, r3, #21
 800340c:	4013      	ands	r3, r2
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	46bd      	mov	sp, r7
 8003416:	b002      	add	sp, #8
 8003418:	bd80      	pop	{r7, pc}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	40021000 	.word	0x40021000

08003420 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003420:	b590      	push	{r4, r7, lr}
 8003422:	b08b      	sub	sp, #44	; 0x2c
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003428:	2414      	movs	r4, #20
 800342a:	193b      	adds	r3, r7, r4
 800342c:	0018      	movs	r0, r3
 800342e:	2314      	movs	r3, #20
 8003430:	001a      	movs	r2, r3
 8003432:	2100      	movs	r1, #0
 8003434:	f002 fdc0 	bl	8005fb8 <memset>
  if(hadc->Instance==ADC1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a18      	ldr	r2, [pc, #96]	; (80034a0 <HAL_ADC_MspInit+0x80>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d129      	bne.n	8003496 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003442:	4b18      	ldr	r3, [pc, #96]	; (80034a4 <HAL_ADC_MspInit+0x84>)
 8003444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003446:	4b17      	ldr	r3, [pc, #92]	; (80034a4 <HAL_ADC_MspInit+0x84>)
 8003448:	2180      	movs	r1, #128	; 0x80
 800344a:	0349      	lsls	r1, r1, #13
 800344c:	430a      	orrs	r2, r1
 800344e:	641a      	str	r2, [r3, #64]	; 0x40
 8003450:	4b14      	ldr	r3, [pc, #80]	; (80034a4 <HAL_ADC_MspInit+0x84>)
 8003452:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003454:	2380      	movs	r3, #128	; 0x80
 8003456:	035b      	lsls	r3, r3, #13
 8003458:	4013      	ands	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800345e:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <HAL_ADC_MspInit+0x84>)
 8003460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003462:	4b10      	ldr	r3, [pc, #64]	; (80034a4 <HAL_ADC_MspInit+0x84>)
 8003464:	2101      	movs	r1, #1
 8003466:	430a      	orrs	r2, r1
 8003468:	635a      	str	r2, [r3, #52]	; 0x34
 800346a:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <HAL_ADC_MspInit+0x84>)
 800346c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346e:	2201      	movs	r2, #1
 8003470:	4013      	ands	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = FREQUENCY_CALIBRATION_Pin;
 8003476:	193b      	adds	r3, r7, r4
 8003478:	2201      	movs	r2, #1
 800347a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800347c:	193b      	adds	r3, r7, r4
 800347e:	2203      	movs	r2, #3
 8003480:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003482:	193b      	adds	r3, r7, r4
 8003484:	2200      	movs	r2, #0
 8003486:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(FREQUENCY_CALIBRATION_GPIO_Port, &GPIO_InitStruct);
 8003488:	193a      	adds	r2, r7, r4
 800348a:	23a0      	movs	r3, #160	; 0xa0
 800348c:	05db      	lsls	r3, r3, #23
 800348e:	0011      	movs	r1, r2
 8003490:	0018      	movs	r0, r3
 8003492:	f001 f93f 	bl	8004714 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	46bd      	mov	sp, r7
 800349a:	b00b      	add	sp, #44	; 0x2c
 800349c:	bd90      	pop	{r4, r7, pc}
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	40012400 	.word	0x40012400
 80034a4:	40021000 	.word	0x40021000

080034a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034a8:	b590      	push	{r4, r7, lr}
 80034aa:	b08f      	sub	sp, #60	; 0x3c
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b0:	2424      	movs	r4, #36	; 0x24
 80034b2:	193b      	adds	r3, r7, r4
 80034b4:	0018      	movs	r0, r3
 80034b6:	2314      	movs	r3, #20
 80034b8:	001a      	movs	r2, r3
 80034ba:	2100      	movs	r1, #0
 80034bc:	f002 fd7c 	bl	8005fb8 <memset>
  if(htim_base->Instance==TIM1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a68      	ldr	r2, [pc, #416]	; (8003668 <HAL_TIM_Base_MspInit+0x1c0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d142      	bne.n	8003550 <HAL_TIM_Base_MspInit+0xa8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034ca:	4b68      	ldr	r3, [pc, #416]	; (800366c <HAL_TIM_Base_MspInit+0x1c4>)
 80034cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ce:	4b67      	ldr	r3, [pc, #412]	; (800366c <HAL_TIM_Base_MspInit+0x1c4>)
 80034d0:	2180      	movs	r1, #128	; 0x80
 80034d2:	0109      	lsls	r1, r1, #4
 80034d4:	430a      	orrs	r2, r1
 80034d6:	641a      	str	r2, [r3, #64]	; 0x40
 80034d8:	4b64      	ldr	r3, [pc, #400]	; (800366c <HAL_TIM_Base_MspInit+0x1c4>)
 80034da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034dc:	2380      	movs	r3, #128	; 0x80
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	4013      	ands	r3, r2
 80034e2:	623b      	str	r3, [r7, #32]
 80034e4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034e6:	4b61      	ldr	r3, [pc, #388]	; (800366c <HAL_TIM_Base_MspInit+0x1c4>)
 80034e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ea:	4b60      	ldr	r3, [pc, #384]	; (800366c <HAL_TIM_Base_MspInit+0x1c4>)
 80034ec:	2101      	movs	r1, #1
 80034ee:	430a      	orrs	r2, r1
 80034f0:	635a      	str	r2, [r3, #52]	; 0x34
 80034f2:	4b5e      	ldr	r3, [pc, #376]	; (800366c <HAL_TIM_Base_MspInit+0x1c4>)
 80034f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f6:	2201      	movs	r2, #1
 80034f8:	4013      	ands	r3, r2
 80034fa:	61fb      	str	r3, [r7, #28]
 80034fc:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA12 [PA10]     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = AM_FREQUENCY_Pin;
 80034fe:	193b      	adds	r3, r7, r4
 8003500:	2280      	movs	r2, #128	; 0x80
 8003502:	0152      	lsls	r2, r2, #5
 8003504:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003506:	0021      	movs	r1, r4
 8003508:	187b      	adds	r3, r7, r1
 800350a:	2202      	movs	r2, #2
 800350c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350e:	187b      	adds	r3, r7, r1
 8003510:	2200      	movs	r2, #0
 8003512:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003514:	187b      	adds	r3, r7, r1
 8003516:	2200      	movs	r2, #0
 8003518:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800351a:	187b      	adds	r3, r7, r1
 800351c:	2202      	movs	r2, #2
 800351e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(AM_FREQUENCY_GPIO_Port, &GPIO_InitStruct);
 8003520:	187a      	adds	r2, r7, r1
 8003522:	23a0      	movs	r3, #160	; 0xa0
 8003524:	05db      	lsls	r3, r3, #23
 8003526:	0011      	movs	r1, r2
 8003528:	0018      	movs	r0, r3
 800352a:	f001 f8f3 	bl	8004714 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800352e:	2200      	movs	r2, #0
 8003530:	2100      	movs	r1, #0
 8003532:	200d      	movs	r0, #13
 8003534:	f001 f8bc 	bl	80046b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8003538:	200d      	movs	r0, #13
 800353a:	f001 f8ce 	bl	80046da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800353e:	2200      	movs	r2, #0
 8003540:	2100      	movs	r1, #0
 8003542:	200e      	movs	r0, #14
 8003544:	f001 f8b4 	bl	80046b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003548:	200e      	movs	r0, #14
 800354a:	f001 f8c6 	bl	80046da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800354e:	e086      	b.n	800365e <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM3)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a46      	ldr	r2, [pc, #280]	; (8003670 <HAL_TIM_Base_MspInit+0x1c8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d12e      	bne.n	80035b8 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800355a:	4b44      	ldr	r3, [pc, #272]	; (800366c <HAL_TIM_Base_MspInit+0x1c4>)
 800355c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800355e:	4b43      	ldr	r3, [pc, #268]	; (800366c <HAL_TIM_Base_MspInit+0x1c4>)
 8003560:	2102      	movs	r1, #2
 8003562:	430a      	orrs	r2, r1
 8003564:	63da      	str	r2, [r3, #60]	; 0x3c
 8003566:	4b41      	ldr	r3, [pc, #260]	; (800366c <HAL_TIM_Base_MspInit+0x1c4>)
 8003568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356a:	2202      	movs	r2, #2
 800356c:	4013      	ands	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
 8003570:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003572:	4b3e      	ldr	r3, [pc, #248]	; (800366c <HAL_TIM_Base_MspInit+0x1c4>)
 8003574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003576:	4b3d      	ldr	r3, [pc, #244]	; (800366c <HAL_TIM_Base_MspInit+0x1c4>)
 8003578:	2108      	movs	r1, #8
 800357a:	430a      	orrs	r2, r1
 800357c:	635a      	str	r2, [r3, #52]	; 0x34
 800357e:	4b3b      	ldr	r3, [pc, #236]	; (800366c <HAL_TIM_Base_MspInit+0x1c4>)
 8003580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003582:	2208      	movs	r2, #8
 8003584:	4013      	ands	r3, r2
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = FM_FREQUENCY_Pin;
 800358a:	2124      	movs	r1, #36	; 0x24
 800358c:	187b      	adds	r3, r7, r1
 800358e:	2204      	movs	r2, #4
 8003590:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003592:	187b      	adds	r3, r7, r1
 8003594:	2202      	movs	r2, #2
 8003596:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003598:	187b      	adds	r3, r7, r1
 800359a:	2200      	movs	r2, #0
 800359c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800359e:	187b      	adds	r3, r7, r1
 80035a0:	2200      	movs	r2, #0
 80035a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80035a4:	187b      	adds	r3, r7, r1
 80035a6:	2201      	movs	r2, #1
 80035a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(FM_FREQUENCY_GPIO_Port, &GPIO_InitStruct);
 80035aa:	187b      	adds	r3, r7, r1
 80035ac:	4a31      	ldr	r2, [pc, #196]	; (8003674 <HAL_TIM_Base_MspInit+0x1cc>)
 80035ae:	0019      	movs	r1, r3
 80035b0:	0010      	movs	r0, r2
 80035b2:	f001 f8af 	bl	8004714 <HAL_GPIO_Init>
}
 80035b6:	e052      	b.n	800365e <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM14)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a2e      	ldr	r2, [pc, #184]	; (8003678 <HAL_TIM_Base_MspInit+0x1d0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d116      	bne.n	80035f0 <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80035c2:	4b2a      	ldr	r3, [pc, #168]	; (800366c <HAL_TIM_Base_MspInit+0x1c4>)
 80035c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035c6:	4b29      	ldr	r3, [pc, #164]	; (800366c <HAL_TIM_Base_MspInit+0x1c4>)
 80035c8:	2180      	movs	r1, #128	; 0x80
 80035ca:	0209      	lsls	r1, r1, #8
 80035cc:	430a      	orrs	r2, r1
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40
 80035d0:	4b26      	ldr	r3, [pc, #152]	; (800366c <HAL_TIM_Base_MspInit+0x1c4>)
 80035d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035d4:	2380      	movs	r3, #128	; 0x80
 80035d6:	021b      	lsls	r3, r3, #8
 80035d8:	4013      	ands	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80035de:	2200      	movs	r2, #0
 80035e0:	2100      	movs	r1, #0
 80035e2:	2013      	movs	r0, #19
 80035e4:	f001 f864 	bl	80046b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80035e8:	2013      	movs	r0, #19
 80035ea:	f001 f876 	bl	80046da <HAL_NVIC_EnableIRQ>
}
 80035ee:	e036      	b.n	800365e <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM16)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a21      	ldr	r2, [pc, #132]	; (800367c <HAL_TIM_Base_MspInit+0x1d4>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d116      	bne.n	8003628 <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80035fa:	4b1c      	ldr	r3, [pc, #112]	; (800366c <HAL_TIM_Base_MspInit+0x1c4>)
 80035fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035fe:	4b1b      	ldr	r3, [pc, #108]	; (800366c <HAL_TIM_Base_MspInit+0x1c4>)
 8003600:	2180      	movs	r1, #128	; 0x80
 8003602:	0289      	lsls	r1, r1, #10
 8003604:	430a      	orrs	r2, r1
 8003606:	641a      	str	r2, [r3, #64]	; 0x40
 8003608:	4b18      	ldr	r3, [pc, #96]	; (800366c <HAL_TIM_Base_MspInit+0x1c4>)
 800360a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800360c:	2380      	movs	r3, #128	; 0x80
 800360e:	029b      	lsls	r3, r3, #10
 8003610:	4013      	ands	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003616:	2200      	movs	r2, #0
 8003618:	2100      	movs	r1, #0
 800361a:	2015      	movs	r0, #21
 800361c:	f001 f848 	bl	80046b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003620:	2015      	movs	r0, #21
 8003622:	f001 f85a 	bl	80046da <HAL_NVIC_EnableIRQ>
}
 8003626:	e01a      	b.n	800365e <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM17)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a14      	ldr	r2, [pc, #80]	; (8003680 <HAL_TIM_Base_MspInit+0x1d8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d115      	bne.n	800365e <HAL_TIM_Base_MspInit+0x1b6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003632:	4b0e      	ldr	r3, [pc, #56]	; (800366c <HAL_TIM_Base_MspInit+0x1c4>)
 8003634:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003636:	4b0d      	ldr	r3, [pc, #52]	; (800366c <HAL_TIM_Base_MspInit+0x1c4>)
 8003638:	2180      	movs	r1, #128	; 0x80
 800363a:	02c9      	lsls	r1, r1, #11
 800363c:	430a      	orrs	r2, r1
 800363e:	641a      	str	r2, [r3, #64]	; 0x40
 8003640:	4b0a      	ldr	r3, [pc, #40]	; (800366c <HAL_TIM_Base_MspInit+0x1c4>)
 8003642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003644:	2380      	movs	r3, #128	; 0x80
 8003646:	02db      	lsls	r3, r3, #11
 8003648:	4013      	ands	r3, r2
 800364a:	60bb      	str	r3, [r7, #8]
 800364c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800364e:	2200      	movs	r2, #0
 8003650:	2100      	movs	r1, #0
 8003652:	2016      	movs	r0, #22
 8003654:	f001 f82c 	bl	80046b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8003658:	2016      	movs	r0, #22
 800365a:	f001 f83e 	bl	80046da <HAL_NVIC_EnableIRQ>
}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	46bd      	mov	sp, r7
 8003662:	b00f      	add	sp, #60	; 0x3c
 8003664:	bd90      	pop	{r4, r7, pc}
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	40012c00 	.word	0x40012c00
 800366c:	40021000 	.word	0x40021000
 8003670:	40000400 	.word	0x40000400
 8003674:	50000c00 	.word	0x50000c00
 8003678:	40002000 	.word	0x40002000
 800367c:	40014400 	.word	0x40014400
 8003680:	40014800 	.word	0x40014800

08003684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003688:	e7fe      	b.n	8003688 <NMI_Handler+0x4>

0800368a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800368e:	e7fe      	b.n	800368e <HardFault_Handler+0x4>

08003690 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003694:	46c0      	nop			; (mov r8, r8)
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036a8:	f000 f8e0 	bl	800386c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036ac:	46c0      	nop			; (mov r8, r8)
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80036b8:	4b03      	ldr	r3, [pc, #12]	; (80036c8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80036ba:	0018      	movs	r0, r3
 80036bc:	f002 f8b8 	bl	8005830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80036c0:	46c0      	nop			; (mov r8, r8)
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	20000188 	.word	0x20000188

080036cc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80036d0:	4b03      	ldr	r3, [pc, #12]	; (80036e0 <TIM1_CC_IRQHandler+0x14>)
 80036d2:	0018      	movs	r0, r3
 80036d4:	f002 f8ac 	bl	8005830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80036d8:	46c0      	nop			; (mov r8, r8)
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	20000188 	.word	0x20000188

080036e4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80036e8:	4b03      	ldr	r3, [pc, #12]	; (80036f8 <TIM14_IRQHandler+0x14>)
 80036ea:	0018      	movs	r0, r3
 80036ec:	f002 f8a0 	bl	8005830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80036f0:	46c0      	nop			; (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	200001d4 	.word	0x200001d4

080036fc <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003700:	4b03      	ldr	r3, [pc, #12]	; (8003710 <TIM16_IRQHandler+0x14>)
 8003702:	0018      	movs	r0, r3
 8003704:	f002 f894 	bl	8005830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003708:	46c0      	nop			; (mov r8, r8)
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	20000220 	.word	0x20000220

08003714 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003718:	4b03      	ldr	r3, [pc, #12]	; (8003728 <TIM17_IRQHandler+0x14>)
 800371a:	0018      	movs	r0, r3
 800371c:	f002 f888 	bl	8005830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003720:	46c0      	nop			; (mov r8, r8)
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	2000008c 	.word	0x2000008c

0800372c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003730:	4b03      	ldr	r3, [pc, #12]	; (8003740 <SystemInit+0x14>)
 8003732:	2280      	movs	r2, #128	; 0x80
 8003734:	0512      	lsls	r2, r2, #20
 8003736:	609a      	str	r2, [r3, #8]
#endif
}
 8003738:	46c0      	nop			; (mov r8, r8)
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	e000ed00 	.word	0xe000ed00

08003744 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003744:	480d      	ldr	r0, [pc, #52]	; (800377c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003746:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003748:	f7ff fff0 	bl	800372c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800374c:	480c      	ldr	r0, [pc, #48]	; (8003780 <LoopForever+0x6>)
  ldr r1, =_edata
 800374e:	490d      	ldr	r1, [pc, #52]	; (8003784 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003750:	4a0d      	ldr	r2, [pc, #52]	; (8003788 <LoopForever+0xe>)
  movs r3, #0
 8003752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003754:	e002      	b.n	800375c <LoopCopyDataInit>

08003756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800375a:	3304      	adds	r3, #4

0800375c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800375c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800375e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003760:	d3f9      	bcc.n	8003756 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003762:	4a0a      	ldr	r2, [pc, #40]	; (800378c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003764:	4c0a      	ldr	r4, [pc, #40]	; (8003790 <LoopForever+0x16>)
  movs r3, #0
 8003766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003768:	e001      	b.n	800376e <LoopFillZerobss>

0800376a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800376a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800376c:	3204      	adds	r2, #4

0800376e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800376e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003770:	d3fb      	bcc.n	800376a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003772:	f002 fbfd 	bl	8005f70 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003776:	f7ff fb39 	bl	8002dec <main>

0800377a <LoopForever>:

LoopForever:
  b LoopForever
 800377a:	e7fe      	b.n	800377a <LoopForever>
  ldr   r0, =_estack
 800377c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003784:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8003788:	080064f0 	.word	0x080064f0
  ldr r2, =_sbss
 800378c:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8003790:	20000270 	.word	0x20000270

08003794 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003794:	e7fe      	b.n	8003794 <ADC1_IRQHandler>
	...

08003798 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800379e:	1dfb      	adds	r3, r7, #7
 80037a0:	2200      	movs	r2, #0
 80037a2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <HAL_Init+0x3c>)
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <HAL_Init+0x3c>)
 80037aa:	2180      	movs	r1, #128	; 0x80
 80037ac:	0049      	lsls	r1, r1, #1
 80037ae:	430a      	orrs	r2, r1
 80037b0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037b2:	2000      	movs	r0, #0
 80037b4:	f000 f810 	bl	80037d8 <HAL_InitTick>
 80037b8:	1e03      	subs	r3, r0, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80037bc:	1dfb      	adds	r3, r7, #7
 80037be:	2201      	movs	r2, #1
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	e001      	b.n	80037c8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80037c4:	f7ff fe08 	bl	80033d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037c8:	1dfb      	adds	r3, r7, #7
 80037ca:	781b      	ldrb	r3, [r3, #0]
}
 80037cc:	0018      	movs	r0, r3
 80037ce:	46bd      	mov	sp, r7
 80037d0:	b002      	add	sp, #8
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40022000 	.word	0x40022000

080037d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037d8:	b590      	push	{r4, r7, lr}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80037e0:	230f      	movs	r3, #15
 80037e2:	18fb      	adds	r3, r7, r3
 80037e4:	2200      	movs	r2, #0
 80037e6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80037e8:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <HAL_InitTick+0x88>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d02b      	beq.n	8003848 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80037f0:	4b1c      	ldr	r3, [pc, #112]	; (8003864 <HAL_InitTick+0x8c>)
 80037f2:	681c      	ldr	r4, [r3, #0]
 80037f4:	4b1a      	ldr	r3, [pc, #104]	; (8003860 <HAL_InitTick+0x88>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	0019      	movs	r1, r3
 80037fa:	23fa      	movs	r3, #250	; 0xfa
 80037fc:	0098      	lsls	r0, r3, #2
 80037fe:	f7fc fc7f 	bl	8000100 <__udivsi3>
 8003802:	0003      	movs	r3, r0
 8003804:	0019      	movs	r1, r3
 8003806:	0020      	movs	r0, r4
 8003808:	f7fc fc7a 	bl	8000100 <__udivsi3>
 800380c:	0003      	movs	r3, r0
 800380e:	0018      	movs	r0, r3
 8003810:	f000 ff73 	bl	80046fa <HAL_SYSTICK_Config>
 8003814:	1e03      	subs	r3, r0, #0
 8003816:	d112      	bne.n	800383e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b03      	cmp	r3, #3
 800381c:	d80a      	bhi.n	8003834 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	2301      	movs	r3, #1
 8003822:	425b      	negs	r3, r3
 8003824:	2200      	movs	r2, #0
 8003826:	0018      	movs	r0, r3
 8003828:	f000 ff42 	bl	80046b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800382c:	4b0e      	ldr	r3, [pc, #56]	; (8003868 <HAL_InitTick+0x90>)
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	e00d      	b.n	8003850 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003834:	230f      	movs	r3, #15
 8003836:	18fb      	adds	r3, r7, r3
 8003838:	2201      	movs	r2, #1
 800383a:	701a      	strb	r2, [r3, #0]
 800383c:	e008      	b.n	8003850 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800383e:	230f      	movs	r3, #15
 8003840:	18fb      	adds	r3, r7, r3
 8003842:	2201      	movs	r2, #1
 8003844:	701a      	strb	r2, [r3, #0]
 8003846:	e003      	b.n	8003850 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003848:	230f      	movs	r3, #15
 800384a:	18fb      	adds	r3, r7, r3
 800384c:	2201      	movs	r2, #1
 800384e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003850:	230f      	movs	r3, #15
 8003852:	18fb      	adds	r3, r7, r3
 8003854:	781b      	ldrb	r3, [r3, #0]
}
 8003856:	0018      	movs	r0, r3
 8003858:	46bd      	mov	sp, r7
 800385a:	b005      	add	sp, #20
 800385c:	bd90      	pop	{r4, r7, pc}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	20000044 	.word	0x20000044
 8003864:	2000003c 	.word	0x2000003c
 8003868:	20000040 	.word	0x20000040

0800386c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <HAL_IncTick+0x1c>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	001a      	movs	r2, r3
 8003876:	4b05      	ldr	r3, [pc, #20]	; (800388c <HAL_IncTick+0x20>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	18d2      	adds	r2, r2, r3
 800387c:	4b03      	ldr	r3, [pc, #12]	; (800388c <HAL_IncTick+0x20>)
 800387e:	601a      	str	r2, [r3, #0]
}
 8003880:	46c0      	nop			; (mov r8, r8)
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	20000044 	.word	0x20000044
 800388c:	2000026c 	.word	0x2000026c

08003890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  return uwTick;
 8003894:	4b02      	ldr	r3, [pc, #8]	; (80038a0 <HAL_GetTick+0x10>)
 8003896:	681b      	ldr	r3, [r3, #0]
}
 8003898:	0018      	movs	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	2000026c 	.word	0x2000026c

080038a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038ac:	f7ff fff0 	bl	8003890 <HAL_GetTick>
 80038b0:	0003      	movs	r3, r0
 80038b2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3301      	adds	r3, #1
 80038bc:	d005      	beq.n	80038ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038be:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <HAL_Delay+0x44>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	001a      	movs	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	189b      	adds	r3, r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	f7ff ffe0 	bl	8003890 <HAL_GetTick>
 80038d0:	0002      	movs	r2, r0
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d8f7      	bhi.n	80038cc <HAL_Delay+0x28>
  {
  }
}
 80038dc:	46c0      	nop			; (mov r8, r8)
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	46bd      	mov	sp, r7
 80038e2:	b004      	add	sp, #16
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	20000044 	.word	0x20000044

080038ec <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a05      	ldr	r2, [pc, #20]	; (8003910 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80038fc:	401a      	ands	r2, r3
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	431a      	orrs	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	601a      	str	r2, [r3, #0]
}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	46bd      	mov	sp, r7
 800390a:	b002      	add	sp, #8
 800390c:	bd80      	pop	{r7, pc}
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	fe3fffff 	.word	0xfe3fffff

08003914 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	23e0      	movs	r3, #224	; 0xe0
 8003922:	045b      	lsls	r3, r3, #17
 8003924:	4013      	ands	r3, r2
}
 8003926:	0018      	movs	r0, r3
 8003928:	46bd      	mov	sp, r7
 800392a:	b002      	add	sp, #8
 800392c:	bd80      	pop	{r7, pc}

0800392e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b084      	sub	sp, #16
 8003932:	af00      	add	r7, sp, #0
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	2104      	movs	r1, #4
 8003942:	400a      	ands	r2, r1
 8003944:	2107      	movs	r1, #7
 8003946:	4091      	lsls	r1, r2
 8003948:	000a      	movs	r2, r1
 800394a:	43d2      	mvns	r2, r2
 800394c:	401a      	ands	r2, r3
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2104      	movs	r1, #4
 8003952:	400b      	ands	r3, r1
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	4099      	lsls	r1, r3
 8003958:	000b      	movs	r3, r1
 800395a:	431a      	orrs	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003960:	46c0      	nop			; (mov r8, r8)
 8003962:	46bd      	mov	sp, r7
 8003964:	b004      	add	sp, #16
 8003966:	bd80      	pop	{r7, pc}

08003968 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	23c0      	movs	r3, #192	; 0xc0
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	4013      	ands	r3, r2
 800397a:	d101      	bne.n	8003980 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800397c:	2301      	movs	r3, #1
 800397e:	e000      	b.n	8003982 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003980:	2300      	movs	r3, #0
}
 8003982:	0018      	movs	r0, r3
 8003984:	46bd      	mov	sp, r7
 8003986:	b002      	add	sp, #8
 8003988:	bd80      	pop	{r7, pc}

0800398a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b084      	sub	sp, #16
 800398e:	af00      	add	r7, sp, #0
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	211f      	movs	r1, #31
 800399e:	400a      	ands	r2, r1
 80039a0:	210f      	movs	r1, #15
 80039a2:	4091      	lsls	r1, r2
 80039a4:	000a      	movs	r2, r1
 80039a6:	43d2      	mvns	r2, r2
 80039a8:	401a      	ands	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	0e9b      	lsrs	r3, r3, #26
 80039ae:	210f      	movs	r1, #15
 80039b0:	4019      	ands	r1, r3
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	201f      	movs	r0, #31
 80039b6:	4003      	ands	r3, r0
 80039b8:	4099      	lsls	r1, r3
 80039ba:	000b      	movs	r3, r1
 80039bc:	431a      	orrs	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	46bd      	mov	sp, r7
 80039c6:	b004      	add	sp, #16
 80039c8:	bd80      	pop	{r7, pc}

080039ca <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	035b      	lsls	r3, r3, #13
 80039dc:	0b5b      	lsrs	r3, r3, #13
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039e4:	46c0      	nop			; (mov r8, r8)
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b002      	add	sp, #8
 80039ea:	bd80      	pop	{r7, pc}

080039ec <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	0352      	lsls	r2, r2, #13
 80039fe:	0b52      	lsrs	r2, r2, #13
 8003a00:	43d2      	mvns	r2, r2
 8003a02:	401a      	ands	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a08:	46c0      	nop			; (mov r8, r8)
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b002      	add	sp, #8
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	0212      	lsls	r2, r2, #8
 8003a24:	43d2      	mvns	r2, r2
 8003a26:	401a      	ands	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	021b      	lsls	r3, r3, #8
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	400b      	ands	r3, r1
 8003a30:	4904      	ldr	r1, [pc, #16]	; (8003a44 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003a32:	400b      	ands	r3, r1
 8003a34:	431a      	orrs	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	b004      	add	sp, #16
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	07ffff00 	.word	0x07ffff00

08003a48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	4a05      	ldr	r2, [pc, #20]	; (8003a6c <LL_ADC_EnableInternalRegulator+0x24>)
 8003a56:	4013      	ands	r3, r2
 8003a58:	2280      	movs	r2, #128	; 0x80
 8003a5a:	0552      	lsls	r2, r2, #21
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	46bd      	mov	sp, r7
 8003a66:	b002      	add	sp, #8
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	46c0      	nop			; (mov r8, r8)
 8003a6c:	6fffffe8 	.word	0x6fffffe8

08003a70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	2380      	movs	r3, #128	; 0x80
 8003a7e:	055b      	lsls	r3, r3, #21
 8003a80:	401a      	ands	r2, r3
 8003a82:	2380      	movs	r3, #128	; 0x80
 8003a84:	055b      	lsls	r3, r3, #21
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d101      	bne.n	8003a8e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	0018      	movs	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b002      	add	sp, #8
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	4a04      	ldr	r2, [pc, #16]	; (8003ab8 <LL_ADC_Enable+0x20>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003ab0:	46c0      	nop			; (mov r8, r8)
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b002      	add	sp, #8
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	7fffffe8 	.word	0x7fffffe8

08003abc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	4013      	ands	r3, r2
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <LL_ADC_IsEnabled+0x18>
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e000      	b.n	8003ad6 <LL_ADC_IsEnabled+0x1a>
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b002      	add	sp, #8
 8003adc:	bd80      	pop	{r7, pc}
	...

08003ae0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	4a04      	ldr	r2, [pc, #16]	; (8003b00 <LL_ADC_REG_StartConversion+0x20>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	2204      	movs	r2, #4
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003af8:	46c0      	nop			; (mov r8, r8)
 8003afa:	46bd      	mov	sp, r7
 8003afc:	b002      	add	sp, #8
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	7fffffe8 	.word	0x7fffffe8

08003b04 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	2204      	movs	r2, #4
 8003b12:	4013      	ands	r3, r2
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d101      	bne.n	8003b1c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e000      	b.n	8003b1e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	0018      	movs	r0, r3
 8003b20:	46bd      	mov	sp, r7
 8003b22:	b002      	add	sp, #8
 8003b24:	bd80      	pop	{r7, pc}
	...

08003b28 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b30:	231f      	movs	r3, #31
 8003b32:	18fb      	adds	r3, r7, r3
 8003b34:	2200      	movs	r2, #0
 8003b36:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e1ab      	b.n	8003ea6 <HAL_ADC_Init+0x37e>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10a      	bne.n	8003b6c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f7ff fc61 	bl	8003420 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2254      	movs	r2, #84	; 0x54
 8003b68:	2100      	movs	r1, #0
 8003b6a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	0018      	movs	r0, r3
 8003b72:	f7ff ff7d 	bl	8003a70 <LL_ADC_IsInternalRegulatorEnabled>
 8003b76:	1e03      	subs	r3, r0, #0
 8003b78:	d114      	bne.n	8003ba4 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f7ff ff62 	bl	8003a48 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003b84:	4bca      	ldr	r3, [pc, #808]	; (8003eb0 <HAL_ADC_Init+0x388>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	49ca      	ldr	r1, [pc, #808]	; (8003eb4 <HAL_ADC_Init+0x38c>)
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f7fc fab8 	bl	8000100 <__udivsi3>
 8003b90:	0003      	movs	r3, r0
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003b96:	e002      	b.n	8003b9e <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1f9      	bne.n	8003b98 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	0018      	movs	r0, r3
 8003baa:	f7ff ff61 	bl	8003a70 <LL_ADC_IsInternalRegulatorEnabled>
 8003bae:	1e03      	subs	r3, r0, #0
 8003bb0:	d10f      	bne.n	8003bd2 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb6:	2210      	movs	r2, #16
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003bca:	231f      	movs	r3, #31
 8003bcc:	18fb      	adds	r3, r7, r3
 8003bce:	2201      	movs	r2, #1
 8003bd0:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f7ff ff94 	bl	8003b04 <LL_ADC_REG_IsConversionOngoing>
 8003bdc:	0003      	movs	r3, r0
 8003bde:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be4:	2210      	movs	r2, #16
 8003be6:	4013      	ands	r3, r2
 8003be8:	d000      	beq.n	8003bec <HAL_ADC_Init+0xc4>
 8003bea:	e14f      	b.n	8003e8c <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d000      	beq.n	8003bf4 <HAL_ADC_Init+0xcc>
 8003bf2:	e14b      	b.n	8003e8c <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf8:	4aaf      	ldr	r2, [pc, #700]	; (8003eb8 <HAL_ADC_Init+0x390>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	0018      	movs	r0, r3
 8003c0a:	f7ff ff57 	bl	8003abc <LL_ADC_IsEnabled>
 8003c0e:	1e03      	subs	r3, r0, #0
 8003c10:	d151      	bne.n	8003cb6 <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	2218      	movs	r2, #24
 8003c1a:	4393      	bics	r3, r2
 8003c1c:	0019      	movs	r1, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	0f9b      	lsrs	r3, r3, #30
 8003c30:	079a      	lsls	r2, r3, #30
                   hadc->Init.Oversampling.Ratio         |
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003c36:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.RightBitShift |
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                   hadc->Init.Oversampling.Ratio         |
 8003c3c:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                   hadc->Init.Oversampling.RightBitShift |
 8003c42:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                   hadc->Init.Oversampling.TriggeredMode |
 8003c48:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	223c      	movs	r2, #60	; 0x3c
 8003c54:	5c9b      	ldrb	r3, [r3, r2]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d103      	bne.n	8003c62 <HAL_ADC_Init+0x13a>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	4a94      	ldr	r2, [pc, #592]	; (8003ebc <HAL_ADC_Init+0x394>)
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	0019      	movs	r1, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	23c0      	movs	r3, #192	; 0xc0
 8003c7e:	061b      	lsls	r3, r3, #24
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d018      	beq.n	8003cb6 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003c88:	2380      	movs	r3, #128	; 0x80
 8003c8a:	05db      	lsls	r3, r3, #23
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d012      	beq.n	8003cb6 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003c94:	2380      	movs	r3, #128	; 0x80
 8003c96:	061b      	lsls	r3, r3, #24
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d00c      	beq.n	8003cb6 <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003c9c:	4b88      	ldr	r3, [pc, #544]	; (8003ec0 <HAL_ADC_Init+0x398>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a88      	ldr	r2, [pc, #544]	; (8003ec4 <HAL_ADC_Init+0x39c>)
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	0019      	movs	r1, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	23f0      	movs	r3, #240	; 0xf0
 8003cac:	039b      	lsls	r3, r3, #14
 8003cae:	401a      	ands	r2, r3
 8003cb0:	4b83      	ldr	r3, [pc, #524]	; (8003ec0 <HAL_ADC_Init+0x398>)
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	7e1b      	ldrb	r3, [r3, #24]
 8003cba:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	7e5b      	ldrb	r3, [r3, #25]
 8003cc0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003cc2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	7e9b      	ldrb	r3, [r3, #26]
 8003cc8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003cca:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <HAL_ADC_Init+0x1b2>
 8003cd4:	2380      	movs	r3, #128	; 0x80
 8003cd6:	015b      	lsls	r3, r3, #5
 8003cd8:	e000      	b.n	8003cdc <HAL_ADC_Init+0x1b4>
 8003cda:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003cdc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003ce2:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	da04      	bge.n	8003cf6 <HAL_ADC_Init+0x1ce>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	085b      	lsrs	r3, r3, #1
 8003cf4:	e001      	b.n	8003cfa <HAL_ADC_Init+0x1d2>
 8003cf6:	2380      	movs	r3, #128	; 0x80
 8003cf8:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8003cfa:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	212c      	movs	r1, #44	; 0x2c
 8003d00:	5c5b      	ldrb	r3, [r3, r1]
 8003d02:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003d04:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	5c9b      	ldrb	r3, [r3, r2]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d115      	bne.n	8003d42 <HAL_ADC_Init+0x21a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	7e9b      	ldrb	r3, [r3, #26]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d105      	bne.n	8003d2a <HAL_ADC_Init+0x202>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	2280      	movs	r2, #128	; 0x80
 8003d22:	0252      	lsls	r2, r2, #9
 8003d24:	4313      	orrs	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
 8003d28:	e00b      	b.n	8003d42 <HAL_ADC_Init+0x21a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2e:	2220      	movs	r2, #32
 8003d30:	431a      	orrs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <HAL_ADC_Init+0x238>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d4e:	23e0      	movs	r3, #224	; 0xe0
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	4a58      	ldr	r2, [pc, #352]	; (8003ec8 <HAL_ADC_Init+0x3a0>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	0019      	movs	r1, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	4a53      	ldr	r2, [pc, #332]	; (8003ecc <HAL_ADC_Init+0x3a4>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	0019      	movs	r1, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6818      	ldr	r0, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d94:	001a      	movs	r2, r3
 8003d96:	2100      	movs	r1, #0
 8003d98:	f7ff fdc9 	bl	800392e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6818      	ldr	r0, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da4:	494a      	ldr	r1, [pc, #296]	; (8003ed0 <HAL_ADC_Init+0x3a8>)
 8003da6:	001a      	movs	r2, r3
 8003da8:	f7ff fdc1 	bl	800392e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d109      	bne.n	8003dc8 <HAL_ADC_Init+0x2a0>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2110      	movs	r1, #16
 8003dc0:	4249      	negs	r1, r1
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	629a      	str	r2, [r3, #40]	; 0x28
 8003dc6:	e03a      	b.n	8003e3e <HAL_ADC_Init+0x316>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691a      	ldr	r2, [r3, #16]
 8003dcc:	2380      	movs	r3, #128	; 0x80
 8003dce:	039b      	lsls	r3, r3, #14
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d134      	bne.n	8003e3e <HAL_ADC_Init+0x316>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	613b      	str	r3, [r7, #16]
 8003dd8:	e00c      	b.n	8003df4 <HAL_ADC_Init+0x2cc>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	40da      	lsrs	r2, r3
 8003de4:	0013      	movs	r3, r2
 8003de6:	220f      	movs	r2, #15
 8003de8:	4013      	ands	r3, r2
 8003dea:	2b0f      	cmp	r3, #15
 8003dec:	d006      	beq.n	8003dfc <HAL_ADC_Init+0x2d4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	3301      	adds	r3, #1
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	2b07      	cmp	r3, #7
 8003df8:	d9ef      	bls.n	8003dda <HAL_ADC_Init+0x2b2>
 8003dfa:	e000      	b.n	8003dfe <HAL_ADC_Init+0x2d6>
            ADC_CHSELR_SQ1)
        {
          break;
 8003dfc:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d109      	bne.n	8003e18 <HAL_ADC_Init+0x2f0>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2110      	movs	r1, #16
 8003e10:	4249      	negs	r1, r1
 8003e12:	430a      	orrs	r2, r1
 8003e14:	629a      	str	r2, [r3, #40]	; 0x28
 8003e16:	e012      	b.n	8003e3e <HAL_ADC_Init+0x316>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	221c      	movs	r2, #28
 8003e28:	4013      	ands	r3, r2
 8003e2a:	2210      	movs	r2, #16
 8003e2c:	4252      	negs	r2, r2
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	0011      	movs	r1, r2
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	4a23      	ldr	r2, [pc, #140]	; (8003ed4 <HAL_ADC_Init+0x3ac>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d10b      	bne.n	8003e66 <HAL_ADC_Init+0x33e>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e58:	2203      	movs	r2, #3
 8003e5a:	4393      	bics	r3, r2
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003e64:	e01c      	b.n	8003ea0 <HAL_ADC_Init+0x378>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6a:	2212      	movs	r2, #18
 8003e6c:	4393      	bics	r3, r2
 8003e6e:	2210      	movs	r2, #16
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003e82:	231f      	movs	r3, #31
 8003e84:	18fb      	adds	r3, r7, r3
 8003e86:	2201      	movs	r2, #1
 8003e88:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003e8a:	e009      	b.n	8003ea0 <HAL_ADC_Init+0x378>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e90:	2210      	movs	r2, #16
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003e98:	231f      	movs	r3, #31
 8003e9a:	18fb      	adds	r3, r7, r3
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ea0:	231f      	movs	r3, #31
 8003ea2:	18fb      	adds	r3, r7, r3
 8003ea4:	781b      	ldrb	r3, [r3, #0]
}
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	b008      	add	sp, #32
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	46c0      	nop			; (mov r8, r8)
 8003eb0:	2000003c 	.word	0x2000003c
 8003eb4:	00030d40 	.word	0x00030d40
 8003eb8:	fffffefd 	.word	0xfffffefd
 8003ebc:	1ffffc02 	.word	0x1ffffc02
 8003ec0:	40012708 	.word	0x40012708
 8003ec4:	ffc3ffff 	.word	0xffc3ffff
 8003ec8:	fffe0219 	.word	0xfffe0219
 8003ecc:	dffffc02 	.word	0xdffffc02
 8003ed0:	07ffff04 	.word	0x07ffff04
 8003ed4:	833fffe7 	.word	0x833fffe7

08003ed8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003ed8:	b5b0      	push	{r4, r5, r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f7ff fe0d 	bl	8003b04 <LL_ADC_REG_IsConversionOngoing>
 8003eea:	1e03      	subs	r3, r0, #0
 8003eec:	d135      	bne.n	8003f5a <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2254      	movs	r2, #84	; 0x54
 8003ef2:	5c9b      	ldrb	r3, [r3, r2]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_ADC_Start+0x24>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e035      	b.n	8003f68 <HAL_ADC_Start+0x90>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2254      	movs	r2, #84	; 0x54
 8003f00:	2101      	movs	r1, #1
 8003f02:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003f04:	250f      	movs	r5, #15
 8003f06:	197c      	adds	r4, r7, r5
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f000 faa6 	bl	800445c <ADC_Enable>
 8003f10:	0003      	movs	r3, r0
 8003f12:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003f14:	197b      	adds	r3, r7, r5
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d119      	bne.n	8003f50 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f20:	4a13      	ldr	r2, [pc, #76]	; (8003f70 <HAL_ADC_Start+0x98>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	2280      	movs	r2, #128	; 0x80
 8003f26:	0052      	lsls	r2, r2, #1
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	221c      	movs	r2, #28
 8003f3a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2254      	movs	r2, #84	; 0x54
 8003f40:	2100      	movs	r1, #0
 8003f42:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f7ff fdc9 	bl	8003ae0 <LL_ADC_REG_StartConversion>
 8003f4e:	e008      	b.n	8003f62 <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2254      	movs	r2, #84	; 0x54
 8003f54:	2100      	movs	r1, #0
 8003f56:	5499      	strb	r1, [r3, r2]
 8003f58:	e003      	b.n	8003f62 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003f5a:	230f      	movs	r3, #15
 8003f5c:	18fb      	adds	r3, r7, r3
 8003f5e:	2202      	movs	r2, #2
 8003f60:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f62:	230f      	movs	r3, #15
 8003f64:	18fb      	adds	r3, r7, r3
 8003f66:	781b      	ldrb	r3, [r3, #0]
}
 8003f68:	0018      	movs	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	b004      	add	sp, #16
 8003f6e:	bdb0      	pop	{r4, r5, r7, pc}
 8003f70:	fffff0fe 	.word	0xfffff0fe

08003f74 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d102      	bne.n	8003f8c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003f86:	2308      	movs	r3, #8
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	e00f      	b.n	8003fac <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	2201      	movs	r2, #1
 8003f94:	4013      	ands	r3, r2
 8003f96:	d007      	beq.n	8003fa8 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e06c      	b.n	8004082 <HAL_ADC_PollForConversion+0x10e>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8003fa8:	2304      	movs	r3, #4
 8003faa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003fac:	f7ff fc70 	bl	8003890 <HAL_GetTick>
 8003fb0:	0003      	movs	r3, r0
 8003fb2:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003fb4:	e019      	b.n	8003fea <HAL_ADC_PollForConversion+0x76>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	d016      	beq.n	8003fea <HAL_ADC_PollForConversion+0x76>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003fbc:	f7ff fc68 	bl	8003890 <HAL_GetTick>
 8003fc0:	0002      	movs	r2, r0
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d302      	bcc.n	8003fd2 <HAL_ADC_PollForConversion+0x5e>
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10b      	bne.n	8003fea <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd6:	2204      	movs	r2, #4
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2254      	movs	r2, #84	; 0x54
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e04b      	b.n	8004082 <HAL_ADC_PollForConversion+0x10e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	d0df      	beq.n	8003fb6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffa:	2280      	movs	r2, #128	; 0x80
 8003ffc:	0092      	lsls	r2, r2, #2
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	0018      	movs	r0, r3
 800400a:	f7ff fcad 	bl	8003968 <LL_ADC_REG_IsTriggerSourceSWStart>
 800400e:	1e03      	subs	r3, r0, #0
 8004010:	d02e      	beq.n	8004070 <HAL_ADC_PollForConversion+0xfc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	7e9b      	ldrb	r3, [r3, #26]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d12a      	bne.n	8004070 <HAL_ADC_PollForConversion+0xfc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2208      	movs	r2, #8
 8004022:	4013      	ands	r3, r2
 8004024:	2b08      	cmp	r3, #8
 8004026:	d123      	bne.n	8004070 <HAL_ADC_PollForConversion+0xfc>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	0018      	movs	r0, r3
 800402e:	f7ff fd69 	bl	8003b04 <LL_ADC_REG_IsConversionOngoing>
 8004032:	1e03      	subs	r3, r0, #0
 8004034:	d110      	bne.n	8004058 <HAL_ADC_PollForConversion+0xe4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	210c      	movs	r1, #12
 8004042:	438a      	bics	r2, r1
 8004044:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404a:	4a10      	ldr	r2, [pc, #64]	; (800408c <HAL_ADC_PollForConversion+0x118>)
 800404c:	4013      	ands	r3, r2
 800404e:	2201      	movs	r2, #1
 8004050:	431a      	orrs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	659a      	str	r2, [r3, #88]	; 0x58
 8004056:	e00b      	b.n	8004070 <HAL_ADC_PollForConversion+0xfc>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405c:	2220      	movs	r2, #32
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004068:	2201      	movs	r2, #1
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	7e1b      	ldrb	r3, [r3, #24]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d103      	bne.n	8004080 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	220c      	movs	r2, #12
 800407e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	0018      	movs	r0, r3
 8004084:	46bd      	mov	sp, r7
 8004086:	b004      	add	sp, #16
 8004088:	bd80      	pop	{r7, pc}
 800408a:	46c0      	nop			; (mov r8, r8)
 800408c:	fffffefe 	.word	0xfffffefe

08004090 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800409e:	0018      	movs	r0, r3
 80040a0:	46bd      	mov	sp, r7
 80040a2:	b002      	add	sp, #8
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040b2:	2317      	movs	r3, #23
 80040b4:	18fb      	adds	r3, r7, r3
 80040b6:	2200      	movs	r2, #0
 80040b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2254      	movs	r2, #84	; 0x54
 80040c2:	5c9b      	ldrb	r3, [r3, r2]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_ADC_ConfigChannel+0x24>
 80040c8:	2302      	movs	r3, #2
 80040ca:	e1c2      	b.n	8004452 <HAL_ADC_ConfigChannel+0x3aa>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2254      	movs	r2, #84	; 0x54
 80040d0:	2101      	movs	r1, #1
 80040d2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	0018      	movs	r0, r3
 80040da:	f7ff fd13 	bl	8003b04 <LL_ADC_REG_IsConversionOngoing>
 80040de:	1e03      	subs	r3, r0, #0
 80040e0:	d000      	beq.n	80040e4 <HAL_ADC_ConfigChannel+0x3c>
 80040e2:	e1a5      	b.n	8004430 <HAL_ADC_ConfigChannel+0x388>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d100      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x46>
 80040ec:	e144      	b.n	8004378 <HAL_ADC_ConfigChannel+0x2d0>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691a      	ldr	r2, [r3, #16]
 80040f2:	2380      	movs	r3, #128	; 0x80
 80040f4:	061b      	lsls	r3, r3, #24
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d004      	beq.n	8004104 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80040fe:	4ac2      	ldr	r2, [pc, #776]	; (8004408 <HAL_ADC_ConfigChannel+0x360>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d108      	bne.n	8004116 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	0019      	movs	r1, r3
 800410e:	0010      	movs	r0, r2
 8004110:	f7ff fc5b 	bl	80039ca <LL_ADC_REG_SetSequencerChAdd>
 8004114:	e0c9      	b.n	80042aa <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	211f      	movs	r1, #31
 8004120:	400b      	ands	r3, r1
 8004122:	210f      	movs	r1, #15
 8004124:	4099      	lsls	r1, r3
 8004126:	000b      	movs	r3, r1
 8004128:	43db      	mvns	r3, r3
 800412a:	4013      	ands	r3, r2
 800412c:	0019      	movs	r1, r3
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	035b      	lsls	r3, r3, #13
 8004134:	0b5b      	lsrs	r3, r3, #13
 8004136:	d105      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x9c>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	0e9b      	lsrs	r3, r3, #26
 800413e:	221f      	movs	r2, #31
 8004140:	4013      	ands	r3, r2
 8004142:	e098      	b.n	8004276 <HAL_ADC_ConfigChannel+0x1ce>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2201      	movs	r2, #1
 800414a:	4013      	ands	r3, r2
 800414c:	d000      	beq.n	8004150 <HAL_ADC_ConfigChannel+0xa8>
 800414e:	e091      	b.n	8004274 <HAL_ADC_ConfigChannel+0x1cc>
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2202      	movs	r2, #2
 8004156:	4013      	ands	r3, r2
 8004158:	d000      	beq.n	800415c <HAL_ADC_ConfigChannel+0xb4>
 800415a:	e089      	b.n	8004270 <HAL_ADC_ConfigChannel+0x1c8>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2204      	movs	r2, #4
 8004162:	4013      	ands	r3, r2
 8004164:	d000      	beq.n	8004168 <HAL_ADC_ConfigChannel+0xc0>
 8004166:	e081      	b.n	800426c <HAL_ADC_ConfigChannel+0x1c4>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2208      	movs	r2, #8
 800416e:	4013      	ands	r3, r2
 8004170:	d000      	beq.n	8004174 <HAL_ADC_ConfigChannel+0xcc>
 8004172:	e079      	b.n	8004268 <HAL_ADC_ConfigChannel+0x1c0>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2210      	movs	r2, #16
 800417a:	4013      	ands	r3, r2
 800417c:	d000      	beq.n	8004180 <HAL_ADC_ConfigChannel+0xd8>
 800417e:	e071      	b.n	8004264 <HAL_ADC_ConfigChannel+0x1bc>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2220      	movs	r2, #32
 8004186:	4013      	ands	r3, r2
 8004188:	d000      	beq.n	800418c <HAL_ADC_ConfigChannel+0xe4>
 800418a:	e069      	b.n	8004260 <HAL_ADC_ConfigChannel+0x1b8>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2240      	movs	r2, #64	; 0x40
 8004192:	4013      	ands	r3, r2
 8004194:	d000      	beq.n	8004198 <HAL_ADC_ConfigChannel+0xf0>
 8004196:	e061      	b.n	800425c <HAL_ADC_ConfigChannel+0x1b4>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2280      	movs	r2, #128	; 0x80
 800419e:	4013      	ands	r3, r2
 80041a0:	d000      	beq.n	80041a4 <HAL_ADC_ConfigChannel+0xfc>
 80041a2:	e059      	b.n	8004258 <HAL_ADC_ConfigChannel+0x1b0>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	2380      	movs	r3, #128	; 0x80
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	4013      	ands	r3, r2
 80041ae:	d151      	bne.n	8004254 <HAL_ADC_ConfigChannel+0x1ac>
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	2380      	movs	r3, #128	; 0x80
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4013      	ands	r3, r2
 80041ba:	d149      	bne.n	8004250 <HAL_ADC_ConfigChannel+0x1a8>
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	2380      	movs	r3, #128	; 0x80
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4013      	ands	r3, r2
 80041c6:	d141      	bne.n	800424c <HAL_ADC_ConfigChannel+0x1a4>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	2380      	movs	r3, #128	; 0x80
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	4013      	ands	r3, r2
 80041d2:	d139      	bne.n	8004248 <HAL_ADC_ConfigChannel+0x1a0>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	2380      	movs	r3, #128	; 0x80
 80041da:	015b      	lsls	r3, r3, #5
 80041dc:	4013      	ands	r3, r2
 80041de:	d131      	bne.n	8004244 <HAL_ADC_ConfigChannel+0x19c>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	2380      	movs	r3, #128	; 0x80
 80041e6:	019b      	lsls	r3, r3, #6
 80041e8:	4013      	ands	r3, r2
 80041ea:	d129      	bne.n	8004240 <HAL_ADC_ConfigChannel+0x198>
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	2380      	movs	r3, #128	; 0x80
 80041f2:	01db      	lsls	r3, r3, #7
 80041f4:	4013      	ands	r3, r2
 80041f6:	d121      	bne.n	800423c <HAL_ADC_ConfigChannel+0x194>
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	2380      	movs	r3, #128	; 0x80
 80041fe:	021b      	lsls	r3, r3, #8
 8004200:	4013      	ands	r3, r2
 8004202:	d119      	bne.n	8004238 <HAL_ADC_ConfigChannel+0x190>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	2380      	movs	r3, #128	; 0x80
 800420a:	025b      	lsls	r3, r3, #9
 800420c:	4013      	ands	r3, r2
 800420e:	d111      	bne.n	8004234 <HAL_ADC_ConfigChannel+0x18c>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	2380      	movs	r3, #128	; 0x80
 8004216:	029b      	lsls	r3, r3, #10
 8004218:	4013      	ands	r3, r2
 800421a:	d109      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x188>
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	2380      	movs	r3, #128	; 0x80
 8004222:	02db      	lsls	r3, r3, #11
 8004224:	4013      	ands	r3, r2
 8004226:	d001      	beq.n	800422c <HAL_ADC_ConfigChannel+0x184>
 8004228:	2312      	movs	r3, #18
 800422a:	e024      	b.n	8004276 <HAL_ADC_ConfigChannel+0x1ce>
 800422c:	2300      	movs	r3, #0
 800422e:	e022      	b.n	8004276 <HAL_ADC_ConfigChannel+0x1ce>
 8004230:	2311      	movs	r3, #17
 8004232:	e020      	b.n	8004276 <HAL_ADC_ConfigChannel+0x1ce>
 8004234:	2310      	movs	r3, #16
 8004236:	e01e      	b.n	8004276 <HAL_ADC_ConfigChannel+0x1ce>
 8004238:	230f      	movs	r3, #15
 800423a:	e01c      	b.n	8004276 <HAL_ADC_ConfigChannel+0x1ce>
 800423c:	230e      	movs	r3, #14
 800423e:	e01a      	b.n	8004276 <HAL_ADC_ConfigChannel+0x1ce>
 8004240:	230d      	movs	r3, #13
 8004242:	e018      	b.n	8004276 <HAL_ADC_ConfigChannel+0x1ce>
 8004244:	230c      	movs	r3, #12
 8004246:	e016      	b.n	8004276 <HAL_ADC_ConfigChannel+0x1ce>
 8004248:	230b      	movs	r3, #11
 800424a:	e014      	b.n	8004276 <HAL_ADC_ConfigChannel+0x1ce>
 800424c:	230a      	movs	r3, #10
 800424e:	e012      	b.n	8004276 <HAL_ADC_ConfigChannel+0x1ce>
 8004250:	2309      	movs	r3, #9
 8004252:	e010      	b.n	8004276 <HAL_ADC_ConfigChannel+0x1ce>
 8004254:	2308      	movs	r3, #8
 8004256:	e00e      	b.n	8004276 <HAL_ADC_ConfigChannel+0x1ce>
 8004258:	2307      	movs	r3, #7
 800425a:	e00c      	b.n	8004276 <HAL_ADC_ConfigChannel+0x1ce>
 800425c:	2306      	movs	r3, #6
 800425e:	e00a      	b.n	8004276 <HAL_ADC_ConfigChannel+0x1ce>
 8004260:	2305      	movs	r3, #5
 8004262:	e008      	b.n	8004276 <HAL_ADC_ConfigChannel+0x1ce>
 8004264:	2304      	movs	r3, #4
 8004266:	e006      	b.n	8004276 <HAL_ADC_ConfigChannel+0x1ce>
 8004268:	2303      	movs	r3, #3
 800426a:	e004      	b.n	8004276 <HAL_ADC_ConfigChannel+0x1ce>
 800426c:	2302      	movs	r3, #2
 800426e:	e002      	b.n	8004276 <HAL_ADC_ConfigChannel+0x1ce>
 8004270:	2301      	movs	r3, #1
 8004272:	e000      	b.n	8004276 <HAL_ADC_ConfigChannel+0x1ce>
 8004274:	2300      	movs	r3, #0
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	6852      	ldr	r2, [r2, #4]
 800427a:	201f      	movs	r0, #31
 800427c:	4002      	ands	r2, r0
 800427e:	4093      	lsls	r3, r2
 8004280:	000a      	movs	r2, r1
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	089b      	lsrs	r3, r3, #2
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	429a      	cmp	r2, r3
 8004296:	d808      	bhi.n	80042aa <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	6859      	ldr	r1, [r3, #4]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	001a      	movs	r2, r3
 80042a6:	f7ff fb70 	bl	800398a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	6819      	ldr	r1, [r3, #0]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	001a      	movs	r2, r3
 80042b8:	f7ff fbaa 	bl	8003a10 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	db00      	blt.n	80042c6 <HAL_ADC_ConfigChannel+0x21e>
 80042c4:	e0be      	b.n	8004444 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042c6:	4b51      	ldr	r3, [pc, #324]	; (800440c <HAL_ADC_ConfigChannel+0x364>)
 80042c8:	0018      	movs	r0, r3
 80042ca:	f7ff fb23 	bl	8003914 <LL_ADC_GetCommonPathInternalCh>
 80042ce:	0003      	movs	r3, r0
 80042d0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a4e      	ldr	r2, [pc, #312]	; (8004410 <HAL_ADC_ConfigChannel+0x368>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d123      	bne.n	8004324 <HAL_ADC_ConfigChannel+0x27c>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	2380      	movs	r3, #128	; 0x80
 80042e0:	041b      	lsls	r3, r3, #16
 80042e2:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80042e4:	d11e      	bne.n	8004324 <HAL_ADC_ConfigChannel+0x27c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	2280      	movs	r2, #128	; 0x80
 80042ea:	0412      	lsls	r2, r2, #16
 80042ec:	4313      	orrs	r3, r2
 80042ee:	4a47      	ldr	r2, [pc, #284]	; (800440c <HAL_ADC_ConfigChannel+0x364>)
 80042f0:	0019      	movs	r1, r3
 80042f2:	0010      	movs	r0, r2
 80042f4:	f7ff fafa 	bl	80038ec <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80042f8:	4b46      	ldr	r3, [pc, #280]	; (8004414 <HAL_ADC_ConfigChannel+0x36c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4946      	ldr	r1, [pc, #280]	; (8004418 <HAL_ADC_ConfigChannel+0x370>)
 80042fe:	0018      	movs	r0, r3
 8004300:	f7fb fefe 	bl	8000100 <__udivsi3>
 8004304:	0003      	movs	r3, r0
 8004306:	001a      	movs	r2, r3
 8004308:	0013      	movs	r3, r2
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	189b      	adds	r3, r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	3301      	adds	r3, #1
 8004312:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004314:	e002      	b.n	800431c <HAL_ADC_ConfigChannel+0x274>
          {
            wait_loop_index--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3b01      	subs	r3, #1
 800431a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1f9      	bne.n	8004316 <HAL_ADC_ConfigChannel+0x26e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004322:	e08f      	b.n	8004444 <HAL_ADC_ConfigChannel+0x39c>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a3c      	ldr	r2, [pc, #240]	; (800441c <HAL_ADC_ConfigChannel+0x374>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d10e      	bne.n	800434c <HAL_ADC_ConfigChannel+0x2a4>
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	2380      	movs	r3, #128	; 0x80
 8004332:	045b      	lsls	r3, r3, #17
 8004334:	4013      	ands	r3, r2
 8004336:	d109      	bne.n	800434c <HAL_ADC_ConfigChannel+0x2a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	2280      	movs	r2, #128	; 0x80
 800433c:	0452      	lsls	r2, r2, #17
 800433e:	4313      	orrs	r3, r2
 8004340:	4a32      	ldr	r2, [pc, #200]	; (800440c <HAL_ADC_ConfigChannel+0x364>)
 8004342:	0019      	movs	r1, r3
 8004344:	0010      	movs	r0, r2
 8004346:	f7ff fad1 	bl	80038ec <LL_ADC_SetCommonPathInternalCh>
 800434a:	e07b      	b.n	8004444 <HAL_ADC_ConfigChannel+0x39c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a33      	ldr	r2, [pc, #204]	; (8004420 <HAL_ADC_ConfigChannel+0x378>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d000      	beq.n	8004358 <HAL_ADC_ConfigChannel+0x2b0>
 8004356:	e075      	b.n	8004444 <HAL_ADC_ConfigChannel+0x39c>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	2380      	movs	r3, #128	; 0x80
 800435c:	03db      	lsls	r3, r3, #15
 800435e:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004360:	d000      	beq.n	8004364 <HAL_ADC_ConfigChannel+0x2bc>
 8004362:	e06f      	b.n	8004444 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	2280      	movs	r2, #128	; 0x80
 8004368:	03d2      	lsls	r2, r2, #15
 800436a:	4313      	orrs	r3, r2
 800436c:	4a27      	ldr	r2, [pc, #156]	; (800440c <HAL_ADC_ConfigChannel+0x364>)
 800436e:	0019      	movs	r1, r3
 8004370:	0010      	movs	r0, r2
 8004372:	f7ff fabb 	bl	80038ec <LL_ADC_SetCommonPathInternalCh>
 8004376:	e065      	b.n	8004444 <HAL_ADC_ConfigChannel+0x39c>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691a      	ldr	r2, [r3, #16]
 800437c:	2380      	movs	r3, #128	; 0x80
 800437e:	061b      	lsls	r3, r3, #24
 8004380:	429a      	cmp	r2, r3
 8004382:	d004      	beq.n	800438e <HAL_ADC_ConfigChannel+0x2e6>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004388:	4a1f      	ldr	r2, [pc, #124]	; (8004408 <HAL_ADC_ConfigChannel+0x360>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d107      	bne.n	800439e <HAL_ADC_ConfigChannel+0x2f6>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	0019      	movs	r1, r3
 8004398:	0010      	movs	r0, r2
 800439a:	f7ff fb27 	bl	80039ec <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	da4e      	bge.n	8004444 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043a6:	4b19      	ldr	r3, [pc, #100]	; (800440c <HAL_ADC_ConfigChannel+0x364>)
 80043a8:	0018      	movs	r0, r3
 80043aa:	f7ff fab3 	bl	8003914 <LL_ADC_GetCommonPathInternalCh>
 80043ae:	0003      	movs	r3, r0
 80043b0:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a16      	ldr	r2, [pc, #88]	; (8004410 <HAL_ADC_ConfigChannel+0x368>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d108      	bne.n	80043ce <HAL_ADC_ConfigChannel+0x326>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	4a19      	ldr	r2, [pc, #100]	; (8004424 <HAL_ADC_ConfigChannel+0x37c>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	4a12      	ldr	r2, [pc, #72]	; (800440c <HAL_ADC_ConfigChannel+0x364>)
 80043c4:	0019      	movs	r1, r3
 80043c6:	0010      	movs	r0, r2
 80043c8:	f7ff fa90 	bl	80038ec <LL_ADC_SetCommonPathInternalCh>
 80043cc:	e03a      	b.n	8004444 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a12      	ldr	r2, [pc, #72]	; (800441c <HAL_ADC_ConfigChannel+0x374>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d108      	bne.n	80043ea <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	4a13      	ldr	r2, [pc, #76]	; (8004428 <HAL_ADC_ConfigChannel+0x380>)
 80043dc:	4013      	ands	r3, r2
 80043de:	4a0b      	ldr	r2, [pc, #44]	; (800440c <HAL_ADC_ConfigChannel+0x364>)
 80043e0:	0019      	movs	r1, r3
 80043e2:	0010      	movs	r0, r2
 80043e4:	f7ff fa82 	bl	80038ec <LL_ADC_SetCommonPathInternalCh>
 80043e8:	e02c      	b.n	8004444 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a0c      	ldr	r2, [pc, #48]	; (8004420 <HAL_ADC_ConfigChannel+0x378>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d127      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	4a0d      	ldr	r2, [pc, #52]	; (800442c <HAL_ADC_ConfigChannel+0x384>)
 80043f8:	4013      	ands	r3, r2
 80043fa:	4a04      	ldr	r2, [pc, #16]	; (800440c <HAL_ADC_ConfigChannel+0x364>)
 80043fc:	0019      	movs	r1, r3
 80043fe:	0010      	movs	r0, r2
 8004400:	f7ff fa74 	bl	80038ec <LL_ADC_SetCommonPathInternalCh>
 8004404:	e01e      	b.n	8004444 <HAL_ADC_ConfigChannel+0x39c>
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	80000004 	.word	0x80000004
 800440c:	40012708 	.word	0x40012708
 8004410:	b0001000 	.word	0xb0001000
 8004414:	2000003c 	.word	0x2000003c
 8004418:	00030d40 	.word	0x00030d40
 800441c:	b8004000 	.word	0xb8004000
 8004420:	b4002000 	.word	0xb4002000
 8004424:	ff7fffff 	.word	0xff7fffff
 8004428:	feffffff 	.word	0xfeffffff
 800442c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004434:	2220      	movs	r2, #32
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800443c:	2317      	movs	r3, #23
 800443e:	18fb      	adds	r3, r7, r3
 8004440:	2201      	movs	r2, #1
 8004442:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2254      	movs	r2, #84	; 0x54
 8004448:	2100      	movs	r1, #0
 800444a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 800444c:	2317      	movs	r3, #23
 800444e:	18fb      	adds	r3, r7, r3
 8004450:	781b      	ldrb	r3, [r3, #0]
}
 8004452:	0018      	movs	r0, r3
 8004454:	46bd      	mov	sp, r7
 8004456:	b006      	add	sp, #24
 8004458:	bd80      	pop	{r7, pc}
 800445a:	46c0      	nop			; (mov r8, r8)

0800445c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004464:	2300      	movs	r3, #0
 8004466:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	0018      	movs	r0, r3
 800446e:	f7ff fb25 	bl	8003abc <LL_ADC_IsEnabled>
 8004472:	1e03      	subs	r3, r0, #0
 8004474:	d162      	bne.n	800453c <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	4a32      	ldr	r2, [pc, #200]	; (8004548 <ADC_Enable+0xec>)
 800447e:	4013      	ands	r3, r2
 8004480:	d00d      	beq.n	800449e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004486:	2210      	movs	r2, #16
 8004488:	431a      	orrs	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004492:	2201      	movs	r2, #1
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e04f      	b.n	800453e <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	0018      	movs	r0, r3
 80044a4:	f7ff faf8 	bl	8003a98 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80044a8:	4b28      	ldr	r3, [pc, #160]	; (800454c <ADC_Enable+0xf0>)
 80044aa:	0018      	movs	r0, r3
 80044ac:	f7ff fa32 	bl	8003914 <LL_ADC_GetCommonPathInternalCh>
 80044b0:	0002      	movs	r2, r0
 80044b2:	2380      	movs	r3, #128	; 0x80
 80044b4:	041b      	lsls	r3, r3, #16
 80044b6:	4013      	ands	r3, r2
 80044b8:	d00f      	beq.n	80044da <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80044ba:	4b25      	ldr	r3, [pc, #148]	; (8004550 <ADC_Enable+0xf4>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4925      	ldr	r1, [pc, #148]	; (8004554 <ADC_Enable+0xf8>)
 80044c0:	0018      	movs	r0, r3
 80044c2:	f7fb fe1d 	bl	8000100 <__udivsi3>
 80044c6:	0003      	movs	r3, r0
 80044c8:	3301      	adds	r3, #1
 80044ca:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80044cc:	e002      	b.n	80044d4 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	3b01      	subs	r3, #1
 80044d2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f9      	bne.n	80044ce <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	7e5b      	ldrb	r3, [r3, #25]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d02c      	beq.n	800453c <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80044e2:	f7ff f9d5 	bl	8003890 <HAL_GetTick>
 80044e6:	0003      	movs	r3, r0
 80044e8:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044ea:	e020      	b.n	800452e <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	0018      	movs	r0, r3
 80044f2:	f7ff fae3 	bl	8003abc <LL_ADC_IsEnabled>
 80044f6:	1e03      	subs	r3, r0, #0
 80044f8:	d104      	bne.n	8004504 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	0018      	movs	r0, r3
 8004500:	f7ff faca 	bl	8003a98 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004504:	f7ff f9c4 	bl	8003890 <HAL_GetTick>
 8004508:	0002      	movs	r2, r0
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d90d      	bls.n	800452e <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004516:	2210      	movs	r2, #16
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004522:	2201      	movs	r2, #1
 8004524:	431a      	orrs	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e007      	b.n	800453e <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2201      	movs	r2, #1
 8004536:	4013      	ands	r3, r2
 8004538:	2b01      	cmp	r3, #1
 800453a:	d1d7      	bne.n	80044ec <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	0018      	movs	r0, r3
 8004540:	46bd      	mov	sp, r7
 8004542:	b004      	add	sp, #16
 8004544:	bd80      	pop	{r7, pc}
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	80000017 	.word	0x80000017
 800454c:	40012708 	.word	0x40012708
 8004550:	2000003c 	.word	0x2000003c
 8004554:	00030d40 	.word	0x00030d40

08004558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	0002      	movs	r2, r0
 8004560:	1dfb      	adds	r3, r7, #7
 8004562:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004564:	1dfb      	adds	r3, r7, #7
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	2b7f      	cmp	r3, #127	; 0x7f
 800456a:	d809      	bhi.n	8004580 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800456c:	1dfb      	adds	r3, r7, #7
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	001a      	movs	r2, r3
 8004572:	231f      	movs	r3, #31
 8004574:	401a      	ands	r2, r3
 8004576:	4b04      	ldr	r3, [pc, #16]	; (8004588 <__NVIC_EnableIRQ+0x30>)
 8004578:	2101      	movs	r1, #1
 800457a:	4091      	lsls	r1, r2
 800457c:	000a      	movs	r2, r1
 800457e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004580:	46c0      	nop			; (mov r8, r8)
 8004582:	46bd      	mov	sp, r7
 8004584:	b002      	add	sp, #8
 8004586:	bd80      	pop	{r7, pc}
 8004588:	e000e100 	.word	0xe000e100

0800458c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800458c:	b590      	push	{r4, r7, lr}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	0002      	movs	r2, r0
 8004594:	6039      	str	r1, [r7, #0]
 8004596:	1dfb      	adds	r3, r7, #7
 8004598:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800459a:	1dfb      	adds	r3, r7, #7
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2b7f      	cmp	r3, #127	; 0x7f
 80045a0:	d828      	bhi.n	80045f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045a2:	4a2f      	ldr	r2, [pc, #188]	; (8004660 <__NVIC_SetPriority+0xd4>)
 80045a4:	1dfb      	adds	r3, r7, #7
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	b25b      	sxtb	r3, r3
 80045aa:	089b      	lsrs	r3, r3, #2
 80045ac:	33c0      	adds	r3, #192	; 0xc0
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	589b      	ldr	r3, [r3, r2]
 80045b2:	1dfa      	adds	r2, r7, #7
 80045b4:	7812      	ldrb	r2, [r2, #0]
 80045b6:	0011      	movs	r1, r2
 80045b8:	2203      	movs	r2, #3
 80045ba:	400a      	ands	r2, r1
 80045bc:	00d2      	lsls	r2, r2, #3
 80045be:	21ff      	movs	r1, #255	; 0xff
 80045c0:	4091      	lsls	r1, r2
 80045c2:	000a      	movs	r2, r1
 80045c4:	43d2      	mvns	r2, r2
 80045c6:	401a      	ands	r2, r3
 80045c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	019b      	lsls	r3, r3, #6
 80045ce:	22ff      	movs	r2, #255	; 0xff
 80045d0:	401a      	ands	r2, r3
 80045d2:	1dfb      	adds	r3, r7, #7
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	0018      	movs	r0, r3
 80045d8:	2303      	movs	r3, #3
 80045da:	4003      	ands	r3, r0
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045e0:	481f      	ldr	r0, [pc, #124]	; (8004660 <__NVIC_SetPriority+0xd4>)
 80045e2:	1dfb      	adds	r3, r7, #7
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	b25b      	sxtb	r3, r3
 80045e8:	089b      	lsrs	r3, r3, #2
 80045ea:	430a      	orrs	r2, r1
 80045ec:	33c0      	adds	r3, #192	; 0xc0
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80045f2:	e031      	b.n	8004658 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045f4:	4a1b      	ldr	r2, [pc, #108]	; (8004664 <__NVIC_SetPriority+0xd8>)
 80045f6:	1dfb      	adds	r3, r7, #7
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	0019      	movs	r1, r3
 80045fc:	230f      	movs	r3, #15
 80045fe:	400b      	ands	r3, r1
 8004600:	3b08      	subs	r3, #8
 8004602:	089b      	lsrs	r3, r3, #2
 8004604:	3306      	adds	r3, #6
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	18d3      	adds	r3, r2, r3
 800460a:	3304      	adds	r3, #4
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	1dfa      	adds	r2, r7, #7
 8004610:	7812      	ldrb	r2, [r2, #0]
 8004612:	0011      	movs	r1, r2
 8004614:	2203      	movs	r2, #3
 8004616:	400a      	ands	r2, r1
 8004618:	00d2      	lsls	r2, r2, #3
 800461a:	21ff      	movs	r1, #255	; 0xff
 800461c:	4091      	lsls	r1, r2
 800461e:	000a      	movs	r2, r1
 8004620:	43d2      	mvns	r2, r2
 8004622:	401a      	ands	r2, r3
 8004624:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	019b      	lsls	r3, r3, #6
 800462a:	22ff      	movs	r2, #255	; 0xff
 800462c:	401a      	ands	r2, r3
 800462e:	1dfb      	adds	r3, r7, #7
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	0018      	movs	r0, r3
 8004634:	2303      	movs	r3, #3
 8004636:	4003      	ands	r3, r0
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800463c:	4809      	ldr	r0, [pc, #36]	; (8004664 <__NVIC_SetPriority+0xd8>)
 800463e:	1dfb      	adds	r3, r7, #7
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	001c      	movs	r4, r3
 8004644:	230f      	movs	r3, #15
 8004646:	4023      	ands	r3, r4
 8004648:	3b08      	subs	r3, #8
 800464a:	089b      	lsrs	r3, r3, #2
 800464c:	430a      	orrs	r2, r1
 800464e:	3306      	adds	r3, #6
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	18c3      	adds	r3, r0, r3
 8004654:	3304      	adds	r3, #4
 8004656:	601a      	str	r2, [r3, #0]
}
 8004658:	46c0      	nop			; (mov r8, r8)
 800465a:	46bd      	mov	sp, r7
 800465c:	b003      	add	sp, #12
 800465e:	bd90      	pop	{r4, r7, pc}
 8004660:	e000e100 	.word	0xe000e100
 8004664:	e000ed00 	.word	0xe000ed00

08004668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	1e5a      	subs	r2, r3, #1
 8004674:	2380      	movs	r3, #128	; 0x80
 8004676:	045b      	lsls	r3, r3, #17
 8004678:	429a      	cmp	r2, r3
 800467a:	d301      	bcc.n	8004680 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800467c:	2301      	movs	r3, #1
 800467e:	e010      	b.n	80046a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004680:	4b0a      	ldr	r3, [pc, #40]	; (80046ac <SysTick_Config+0x44>)
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	3a01      	subs	r2, #1
 8004686:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004688:	2301      	movs	r3, #1
 800468a:	425b      	negs	r3, r3
 800468c:	2103      	movs	r1, #3
 800468e:	0018      	movs	r0, r3
 8004690:	f7ff ff7c 	bl	800458c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004694:	4b05      	ldr	r3, [pc, #20]	; (80046ac <SysTick_Config+0x44>)
 8004696:	2200      	movs	r2, #0
 8004698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800469a:	4b04      	ldr	r3, [pc, #16]	; (80046ac <SysTick_Config+0x44>)
 800469c:	2207      	movs	r2, #7
 800469e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	0018      	movs	r0, r3
 80046a4:	46bd      	mov	sp, r7
 80046a6:	b002      	add	sp, #8
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	e000e010 	.word	0xe000e010

080046b0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	607a      	str	r2, [r7, #4]
 80046ba:	210f      	movs	r1, #15
 80046bc:	187b      	adds	r3, r7, r1
 80046be:	1c02      	adds	r2, r0, #0
 80046c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	187b      	adds	r3, r7, r1
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	b25b      	sxtb	r3, r3
 80046ca:	0011      	movs	r1, r2
 80046cc:	0018      	movs	r0, r3
 80046ce:	f7ff ff5d 	bl	800458c <__NVIC_SetPriority>
}
 80046d2:	46c0      	nop			; (mov r8, r8)
 80046d4:	46bd      	mov	sp, r7
 80046d6:	b004      	add	sp, #16
 80046d8:	bd80      	pop	{r7, pc}

080046da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b082      	sub	sp, #8
 80046de:	af00      	add	r7, sp, #0
 80046e0:	0002      	movs	r2, r0
 80046e2:	1dfb      	adds	r3, r7, #7
 80046e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046e6:	1dfb      	adds	r3, r7, #7
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	b25b      	sxtb	r3, r3
 80046ec:	0018      	movs	r0, r3
 80046ee:	f7ff ff33 	bl	8004558 <__NVIC_EnableIRQ>
}
 80046f2:	46c0      	nop			; (mov r8, r8)
 80046f4:	46bd      	mov	sp, r7
 80046f6:	b002      	add	sp, #8
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b082      	sub	sp, #8
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	0018      	movs	r0, r3
 8004706:	f7ff ffaf 	bl	8004668 <SysTick_Config>
 800470a:	0003      	movs	r3, r0
}
 800470c:	0018      	movs	r0, r3
 800470e:	46bd      	mov	sp, r7
 8004710:	b002      	add	sp, #8
 8004712:	bd80      	pop	{r7, pc}

08004714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800471e:	2300      	movs	r3, #0
 8004720:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004722:	e147      	b.n	80049b4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2101      	movs	r1, #1
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	4091      	lsls	r1, r2
 800472e:	000a      	movs	r2, r1
 8004730:	4013      	ands	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d100      	bne.n	800473c <HAL_GPIO_Init+0x28>
 800473a:	e138      	b.n	80049ae <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d00b      	beq.n	800475c <HAL_GPIO_Init+0x48>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b02      	cmp	r3, #2
 800474a:	d007      	beq.n	800475c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004750:	2b11      	cmp	r3, #17
 8004752:	d003      	beq.n	800475c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2b12      	cmp	r3, #18
 800475a:	d130      	bne.n	80047be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	2203      	movs	r2, #3
 8004768:	409a      	lsls	r2, r3
 800476a:	0013      	movs	r3, r2
 800476c:	43da      	mvns	r2, r3
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	4013      	ands	r3, r2
 8004772:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	409a      	lsls	r2, r3
 800477e:	0013      	movs	r3, r2
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	4313      	orrs	r3, r2
 8004784:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004792:	2201      	movs	r2, #1
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	409a      	lsls	r2, r3
 8004798:	0013      	movs	r3, r2
 800479a:	43da      	mvns	r2, r3
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	4013      	ands	r3, r2
 80047a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	091b      	lsrs	r3, r3, #4
 80047a8:	2201      	movs	r2, #1
 80047aa:	401a      	ands	r2, r3
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	409a      	lsls	r2, r3
 80047b0:	0013      	movs	r3, r2
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	2203      	movs	r2, #3
 80047ca:	409a      	lsls	r2, r3
 80047cc:	0013      	movs	r3, r2
 80047ce:	43da      	mvns	r2, r3
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	4013      	ands	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	409a      	lsls	r2, r3
 80047e0:	0013      	movs	r3, r2
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d003      	beq.n	80047fe <HAL_GPIO_Init+0xea>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b12      	cmp	r3, #18
 80047fc:	d123      	bne.n	8004846 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	08da      	lsrs	r2, r3, #3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3208      	adds	r2, #8
 8004806:	0092      	lsls	r2, r2, #2
 8004808:	58d3      	ldr	r3, [r2, r3]
 800480a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2207      	movs	r2, #7
 8004810:	4013      	ands	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	220f      	movs	r2, #15
 8004816:	409a      	lsls	r2, r3
 8004818:	0013      	movs	r3, r2
 800481a:	43da      	mvns	r2, r3
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	4013      	ands	r3, r2
 8004820:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	691a      	ldr	r2, [r3, #16]
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2107      	movs	r1, #7
 800482a:	400b      	ands	r3, r1
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	409a      	lsls	r2, r3
 8004830:	0013      	movs	r3, r2
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4313      	orrs	r3, r2
 8004836:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	08da      	lsrs	r2, r3, #3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3208      	adds	r2, #8
 8004840:	0092      	lsls	r2, r2, #2
 8004842:	6939      	ldr	r1, [r7, #16]
 8004844:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	2203      	movs	r2, #3
 8004852:	409a      	lsls	r2, r3
 8004854:	0013      	movs	r3, r2
 8004856:	43da      	mvns	r2, r3
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	4013      	ands	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2203      	movs	r2, #3
 8004864:	401a      	ands	r2, r3
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	409a      	lsls	r2, r3
 800486c:	0013      	movs	r3, r2
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	4313      	orrs	r3, r2
 8004872:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	2380      	movs	r3, #128	; 0x80
 8004880:	055b      	lsls	r3, r3, #21
 8004882:	4013      	ands	r3, r2
 8004884:	d100      	bne.n	8004888 <HAL_GPIO_Init+0x174>
 8004886:	e092      	b.n	80049ae <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004888:	4a50      	ldr	r2, [pc, #320]	; (80049cc <HAL_GPIO_Init+0x2b8>)
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	089b      	lsrs	r3, r3, #2
 800488e:	3318      	adds	r3, #24
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	589b      	ldr	r3, [r3, r2]
 8004894:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2203      	movs	r2, #3
 800489a:	4013      	ands	r3, r2
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	220f      	movs	r2, #15
 80048a0:	409a      	lsls	r2, r3
 80048a2:	0013      	movs	r3, r2
 80048a4:	43da      	mvns	r2, r3
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	4013      	ands	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	23a0      	movs	r3, #160	; 0xa0
 80048b0:	05db      	lsls	r3, r3, #23
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d013      	beq.n	80048de <HAL_GPIO_Init+0x1ca>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a45      	ldr	r2, [pc, #276]	; (80049d0 <HAL_GPIO_Init+0x2bc>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00d      	beq.n	80048da <HAL_GPIO_Init+0x1c6>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a44      	ldr	r2, [pc, #272]	; (80049d4 <HAL_GPIO_Init+0x2c0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d007      	beq.n	80048d6 <HAL_GPIO_Init+0x1c2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a43      	ldr	r2, [pc, #268]	; (80049d8 <HAL_GPIO_Init+0x2c4>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d101      	bne.n	80048d2 <HAL_GPIO_Init+0x1be>
 80048ce:	2303      	movs	r3, #3
 80048d0:	e006      	b.n	80048e0 <HAL_GPIO_Init+0x1cc>
 80048d2:	2305      	movs	r3, #5
 80048d4:	e004      	b.n	80048e0 <HAL_GPIO_Init+0x1cc>
 80048d6:	2302      	movs	r3, #2
 80048d8:	e002      	b.n	80048e0 <HAL_GPIO_Init+0x1cc>
 80048da:	2301      	movs	r3, #1
 80048dc:	e000      	b.n	80048e0 <HAL_GPIO_Init+0x1cc>
 80048de:	2300      	movs	r3, #0
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	2103      	movs	r1, #3
 80048e4:	400a      	ands	r2, r1
 80048e6:	00d2      	lsls	r2, r2, #3
 80048e8:	4093      	lsls	r3, r2
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80048f0:	4936      	ldr	r1, [pc, #216]	; (80049cc <HAL_GPIO_Init+0x2b8>)
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	089b      	lsrs	r3, r3, #2
 80048f6:	3318      	adds	r3, #24
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80048fe:	4a33      	ldr	r2, [pc, #204]	; (80049cc <HAL_GPIO_Init+0x2b8>)
 8004900:	2380      	movs	r3, #128	; 0x80
 8004902:	58d3      	ldr	r3, [r2, r3]
 8004904:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	43da      	mvns	r2, r3
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	4013      	ands	r3, r2
 800490e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	2380      	movs	r3, #128	; 0x80
 8004916:	025b      	lsls	r3, r3, #9
 8004918:	4013      	ands	r3, r2
 800491a:	d003      	beq.n	8004924 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4313      	orrs	r3, r2
 8004922:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004924:	4929      	ldr	r1, [pc, #164]	; (80049cc <HAL_GPIO_Init+0x2b8>)
 8004926:	2280      	movs	r2, #128	; 0x80
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 800492c:	4a27      	ldr	r2, [pc, #156]	; (80049cc <HAL_GPIO_Init+0x2b8>)
 800492e:	2384      	movs	r3, #132	; 0x84
 8004930:	58d3      	ldr	r3, [r2, r3]
 8004932:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	43da      	mvns	r2, r3
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	4013      	ands	r3, r2
 800493c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	2380      	movs	r3, #128	; 0x80
 8004944:	029b      	lsls	r3, r3, #10
 8004946:	4013      	ands	r3, r2
 8004948:	d003      	beq.n	8004952 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4313      	orrs	r3, r2
 8004950:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004952:	491e      	ldr	r1, [pc, #120]	; (80049cc <HAL_GPIO_Init+0x2b8>)
 8004954:	2284      	movs	r2, #132	; 0x84
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800495a:	4b1c      	ldr	r3, [pc, #112]	; (80049cc <HAL_GPIO_Init+0x2b8>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	43da      	mvns	r2, r3
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	4013      	ands	r3, r2
 8004968:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	2380      	movs	r3, #128	; 0x80
 8004970:	035b      	lsls	r3, r3, #13
 8004972:	4013      	ands	r3, r2
 8004974:	d003      	beq.n	800497e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800497e:	4b13      	ldr	r3, [pc, #76]	; (80049cc <HAL_GPIO_Init+0x2b8>)
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004984:	4b11      	ldr	r3, [pc, #68]	; (80049cc <HAL_GPIO_Init+0x2b8>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	43da      	mvns	r2, r3
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	4013      	ands	r3, r2
 8004992:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	2380      	movs	r3, #128	; 0x80
 800499a:	039b      	lsls	r3, r3, #14
 800499c:	4013      	ands	r3, r2
 800499e:	d003      	beq.n	80049a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80049a8:	4b08      	ldr	r3, [pc, #32]	; (80049cc <HAL_GPIO_Init+0x2b8>)
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	3301      	adds	r3, #1
 80049b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	40da      	lsrs	r2, r3
 80049bc:	1e13      	subs	r3, r2, #0
 80049be:	d000      	beq.n	80049c2 <HAL_GPIO_Init+0x2ae>
 80049c0:	e6b0      	b.n	8004724 <HAL_GPIO_Init+0x10>
  }
}
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	46c0      	nop			; (mov r8, r8)
 80049c6:	46bd      	mov	sp, r7
 80049c8:	b006      	add	sp, #24
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40021800 	.word	0x40021800
 80049d0:	50000400 	.word	0x50000400
 80049d4:	50000800 	.word	0x50000800
 80049d8:	50000c00 	.word	0x50000c00

080049dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	000a      	movs	r2, r1
 80049e6:	1cbb      	adds	r3, r7, #2
 80049e8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	1cba      	adds	r2, r7, #2
 80049f0:	8812      	ldrh	r2, [r2, #0]
 80049f2:	4013      	ands	r3, r2
 80049f4:	d004      	beq.n	8004a00 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80049f6:	230f      	movs	r3, #15
 80049f8:	18fb      	adds	r3, r7, r3
 80049fa:	2201      	movs	r2, #1
 80049fc:	701a      	strb	r2, [r3, #0]
 80049fe:	e003      	b.n	8004a08 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a00:	230f      	movs	r3, #15
 8004a02:	18fb      	adds	r3, r7, r3
 8004a04:	2200      	movs	r2, #0
 8004a06:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004a08:	230f      	movs	r3, #15
 8004a0a:	18fb      	adds	r3, r7, r3
 8004a0c:	781b      	ldrb	r3, [r3, #0]
}
 8004a0e:	0018      	movs	r0, r3
 8004a10:	46bd      	mov	sp, r7
 8004a12:	b004      	add	sp, #16
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b082      	sub	sp, #8
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
 8004a1e:	0008      	movs	r0, r1
 8004a20:	0011      	movs	r1, r2
 8004a22:	1cbb      	adds	r3, r7, #2
 8004a24:	1c02      	adds	r2, r0, #0
 8004a26:	801a      	strh	r2, [r3, #0]
 8004a28:	1c7b      	adds	r3, r7, #1
 8004a2a:	1c0a      	adds	r2, r1, #0
 8004a2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a2e:	1c7b      	adds	r3, r7, #1
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d004      	beq.n	8004a40 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a36:	1cbb      	adds	r3, r7, #2
 8004a38:	881a      	ldrh	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a3e:	e003      	b.n	8004a48 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a40:	1cbb      	adds	r3, r7, #2
 8004a42:	881a      	ldrh	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a48:	46c0      	nop			; (mov r8, r8)
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	b002      	add	sp, #8
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004a58:	4b19      	ldr	r3, [pc, #100]	; (8004ac0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a19      	ldr	r2, [pc, #100]	; (8004ac4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004a5e:	4013      	ands	r3, r2
 8004a60:	0019      	movs	r1, r3
 8004a62:	4b17      	ldr	r3, [pc, #92]	; (8004ac0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	2380      	movs	r3, #128	; 0x80
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d11f      	bne.n	8004ab4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8004a74:	4b14      	ldr	r3, [pc, #80]	; (8004ac8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	0013      	movs	r3, r2
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	189b      	adds	r3, r3, r2
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	4912      	ldr	r1, [pc, #72]	; (8004acc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004a82:	0018      	movs	r0, r3
 8004a84:	f7fb fb3c 	bl	8000100 <__udivsi3>
 8004a88:	0003      	movs	r3, r0
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a8e:	e008      	b.n	8004aa2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	e001      	b.n	8004aa2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e009      	b.n	8004ab6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004aa2:	4b07      	ldr	r3, [pc, #28]	; (8004ac0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004aa4:	695a      	ldr	r2, [r3, #20]
 8004aa6:	2380      	movs	r3, #128	; 0x80
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	401a      	ands	r2, r3
 8004aac:	2380      	movs	r3, #128	; 0x80
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d0ed      	beq.n	8004a90 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	b004      	add	sp, #16
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	46c0      	nop			; (mov r8, r8)
 8004ac0:	40007000 	.word	0x40007000
 8004ac4:	fffff9ff 	.word	0xfffff9ff
 8004ac8:	2000003c 	.word	0x2000003c
 8004acc:	000f4240 	.word	0x000f4240

08004ad0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b088      	sub	sp, #32
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e2f9      	b.n	80050d6 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	4013      	ands	r3, r2
 8004aea:	d100      	bne.n	8004aee <HAL_RCC_OscConfig+0x1e>
 8004aec:	e07c      	b.n	8004be8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aee:	4bc3      	ldr	r3, [pc, #780]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	2238      	movs	r2, #56	; 0x38
 8004af4:	4013      	ands	r3, r2
 8004af6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004af8:	4bc0      	ldr	r3, [pc, #768]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	2203      	movs	r2, #3
 8004afe:	4013      	ands	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	2b10      	cmp	r3, #16
 8004b06:	d102      	bne.n	8004b0e <HAL_RCC_OscConfig+0x3e>
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	2b03      	cmp	r3, #3
 8004b0c:	d002      	beq.n	8004b14 <HAL_RCC_OscConfig+0x44>
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	2b08      	cmp	r3, #8
 8004b12:	d10b      	bne.n	8004b2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b14:	4bb9      	ldr	r3, [pc, #740]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	2380      	movs	r3, #128	; 0x80
 8004b1a:	029b      	lsls	r3, r3, #10
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	d062      	beq.n	8004be6 <HAL_RCC_OscConfig+0x116>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d15e      	bne.n	8004be6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e2d4      	b.n	80050d6 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	2380      	movs	r3, #128	; 0x80
 8004b32:	025b      	lsls	r3, r3, #9
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d107      	bne.n	8004b48 <HAL_RCC_OscConfig+0x78>
 8004b38:	4bb0      	ldr	r3, [pc, #704]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	4baf      	ldr	r3, [pc, #700]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004b3e:	2180      	movs	r1, #128	; 0x80
 8004b40:	0249      	lsls	r1, r1, #9
 8004b42:	430a      	orrs	r2, r1
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	e020      	b.n	8004b8a <HAL_RCC_OscConfig+0xba>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	23a0      	movs	r3, #160	; 0xa0
 8004b4e:	02db      	lsls	r3, r3, #11
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d10e      	bne.n	8004b72 <HAL_RCC_OscConfig+0xa2>
 8004b54:	4ba9      	ldr	r3, [pc, #676]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	4ba8      	ldr	r3, [pc, #672]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004b5a:	2180      	movs	r1, #128	; 0x80
 8004b5c:	02c9      	lsls	r1, r1, #11
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	4ba6      	ldr	r3, [pc, #664]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	4ba5      	ldr	r3, [pc, #660]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004b68:	2180      	movs	r1, #128	; 0x80
 8004b6a:	0249      	lsls	r1, r1, #9
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	e00b      	b.n	8004b8a <HAL_RCC_OscConfig+0xba>
 8004b72:	4ba2      	ldr	r3, [pc, #648]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	4ba1      	ldr	r3, [pc, #644]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004b78:	49a1      	ldr	r1, [pc, #644]	; (8004e00 <HAL_RCC_OscConfig+0x330>)
 8004b7a:	400a      	ands	r2, r1
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	4b9f      	ldr	r3, [pc, #636]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	4b9e      	ldr	r3, [pc, #632]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004b84:	499f      	ldr	r1, [pc, #636]	; (8004e04 <HAL_RCC_OscConfig+0x334>)
 8004b86:	400a      	ands	r2, r1
 8004b88:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d014      	beq.n	8004bbc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b92:	f7fe fe7d 	bl	8003890 <HAL_GetTick>
 8004b96:	0003      	movs	r3, r0
 8004b98:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b9c:	f7fe fe78 	bl	8003890 <HAL_GetTick>
 8004ba0:	0002      	movs	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b64      	cmp	r3, #100	; 0x64
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e293      	b.n	80050d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bae:	4b93      	ldr	r3, [pc, #588]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	2380      	movs	r3, #128	; 0x80
 8004bb4:	029b      	lsls	r3, r3, #10
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	d0f0      	beq.n	8004b9c <HAL_RCC_OscConfig+0xcc>
 8004bba:	e015      	b.n	8004be8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbc:	f7fe fe68 	bl	8003890 <HAL_GetTick>
 8004bc0:	0003      	movs	r3, r0
 8004bc2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bc4:	e008      	b.n	8004bd8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bc6:	f7fe fe63 	bl	8003890 <HAL_GetTick>
 8004bca:	0002      	movs	r2, r0
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b64      	cmp	r3, #100	; 0x64
 8004bd2:	d901      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e27e      	b.n	80050d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bd8:	4b88      	ldr	r3, [pc, #544]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	2380      	movs	r3, #128	; 0x80
 8004bde:	029b      	lsls	r3, r3, #10
 8004be0:	4013      	ands	r3, r2
 8004be2:	d1f0      	bne.n	8004bc6 <HAL_RCC_OscConfig+0xf6>
 8004be4:	e000      	b.n	8004be8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2202      	movs	r2, #2
 8004bee:	4013      	ands	r3, r2
 8004bf0:	d100      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x124>
 8004bf2:	e099      	b.n	8004d28 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bf4:	4b81      	ldr	r3, [pc, #516]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2238      	movs	r2, #56	; 0x38
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bfe:	4b7f      	ldr	r3, [pc, #508]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	2203      	movs	r2, #3
 8004c04:	4013      	ands	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	2b10      	cmp	r3, #16
 8004c0c:	d102      	bne.n	8004c14 <HAL_RCC_OscConfig+0x144>
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d002      	beq.n	8004c1a <HAL_RCC_OscConfig+0x14a>
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d135      	bne.n	8004c86 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c1a:	4b78      	ldr	r3, [pc, #480]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	2380      	movs	r3, #128	; 0x80
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	4013      	ands	r3, r2
 8004c24:	d005      	beq.n	8004c32 <HAL_RCC_OscConfig+0x162>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e251      	b.n	80050d6 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c32:	4b72      	ldr	r3, [pc, #456]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	4a74      	ldr	r2, [pc, #464]	; (8004e08 <HAL_RCC_OscConfig+0x338>)
 8004c38:	4013      	ands	r3, r2
 8004c3a:	0019      	movs	r1, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	021a      	lsls	r2, r3, #8
 8004c42:	4b6e      	ldr	r3, [pc, #440]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004c44:	430a      	orrs	r2, r1
 8004c46:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d112      	bne.n	8004c74 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004c4e:	4b6b      	ldr	r3, [pc, #428]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a6e      	ldr	r2, [pc, #440]	; (8004e0c <HAL_RCC_OscConfig+0x33c>)
 8004c54:	4013      	ands	r3, r2
 8004c56:	0019      	movs	r1, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691a      	ldr	r2, [r3, #16]
 8004c5c:	4b67      	ldr	r3, [pc, #412]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004c62:	4b66      	ldr	r3, [pc, #408]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	0adb      	lsrs	r3, r3, #11
 8004c68:	2207      	movs	r2, #7
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	4a68      	ldr	r2, [pc, #416]	; (8004e10 <HAL_RCC_OscConfig+0x340>)
 8004c6e:	40da      	lsrs	r2, r3
 8004c70:	4b68      	ldr	r3, [pc, #416]	; (8004e14 <HAL_RCC_OscConfig+0x344>)
 8004c72:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c74:	4b68      	ldr	r3, [pc, #416]	; (8004e18 <HAL_RCC_OscConfig+0x348>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	0018      	movs	r0, r3
 8004c7a:	f7fe fdad 	bl	80037d8 <HAL_InitTick>
 8004c7e:	1e03      	subs	r3, r0, #0
 8004c80:	d051      	beq.n	8004d26 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e227      	b.n	80050d6 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d030      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004c8e:	4b5b      	ldr	r3, [pc, #364]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a5e      	ldr	r2, [pc, #376]	; (8004e0c <HAL_RCC_OscConfig+0x33c>)
 8004c94:	4013      	ands	r3, r2
 8004c96:	0019      	movs	r1, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	4b57      	ldr	r3, [pc, #348]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004ca2:	4b56      	ldr	r3, [pc, #344]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	4b55      	ldr	r3, [pc, #340]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004ca8:	2180      	movs	r1, #128	; 0x80
 8004caa:	0049      	lsls	r1, r1, #1
 8004cac:	430a      	orrs	r2, r1
 8004cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb0:	f7fe fdee 	bl	8003890 <HAL_GetTick>
 8004cb4:	0003      	movs	r3, r0
 8004cb6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cb8:	e008      	b.n	8004ccc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cba:	f7fe fde9 	bl	8003890 <HAL_GetTick>
 8004cbe:	0002      	movs	r2, r0
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e204      	b.n	80050d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ccc:	4b4b      	ldr	r3, [pc, #300]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	2380      	movs	r3, #128	; 0x80
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	d0f0      	beq.n	8004cba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cd8:	4b48      	ldr	r3, [pc, #288]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	4a4a      	ldr	r2, [pc, #296]	; (8004e08 <HAL_RCC_OscConfig+0x338>)
 8004cde:	4013      	ands	r3, r2
 8004ce0:	0019      	movs	r1, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	021a      	lsls	r2, r3, #8
 8004ce8:	4b44      	ldr	r3, [pc, #272]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004cea:	430a      	orrs	r2, r1
 8004cec:	605a      	str	r2, [r3, #4]
 8004cee:	e01b      	b.n	8004d28 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004cf0:	4b42      	ldr	r3, [pc, #264]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	4b41      	ldr	r3, [pc, #260]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004cf6:	4949      	ldr	r1, [pc, #292]	; (8004e1c <HAL_RCC_OscConfig+0x34c>)
 8004cf8:	400a      	ands	r2, r1
 8004cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfc:	f7fe fdc8 	bl	8003890 <HAL_GetTick>
 8004d00:	0003      	movs	r3, r0
 8004d02:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d06:	f7fe fdc3 	bl	8003890 <HAL_GetTick>
 8004d0a:	0002      	movs	r2, r0
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e1de      	b.n	80050d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d18:	4b38      	ldr	r3, [pc, #224]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	2380      	movs	r3, #128	; 0x80
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	4013      	ands	r3, r2
 8004d22:	d1f0      	bne.n	8004d06 <HAL_RCC_OscConfig+0x236>
 8004d24:	e000      	b.n	8004d28 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d26:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2208      	movs	r2, #8
 8004d2e:	4013      	ands	r3, r2
 8004d30:	d047      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004d32:	4b32      	ldr	r3, [pc, #200]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	2238      	movs	r2, #56	; 0x38
 8004d38:	4013      	ands	r3, r2
 8004d3a:	2b18      	cmp	r3, #24
 8004d3c:	d10a      	bne.n	8004d54 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004d3e:	4b2f      	ldr	r3, [pc, #188]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d42:	2202      	movs	r2, #2
 8004d44:	4013      	ands	r3, r2
 8004d46:	d03c      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x2f2>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d138      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e1c0      	b.n	80050d6 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d019      	beq.n	8004d90 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004d5c:	4b27      	ldr	r3, [pc, #156]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004d5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d60:	4b26      	ldr	r3, [pc, #152]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004d62:	2101      	movs	r1, #1
 8004d64:	430a      	orrs	r2, r1
 8004d66:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d68:	f7fe fd92 	bl	8003890 <HAL_GetTick>
 8004d6c:	0003      	movs	r3, r0
 8004d6e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d70:	e008      	b.n	8004d84 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d72:	f7fe fd8d 	bl	8003890 <HAL_GetTick>
 8004d76:	0002      	movs	r2, r0
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e1a8      	b.n	80050d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d84:	4b1d      	ldr	r3, [pc, #116]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d88:	2202      	movs	r2, #2
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	d0f1      	beq.n	8004d72 <HAL_RCC_OscConfig+0x2a2>
 8004d8e:	e018      	b.n	8004dc2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004d90:	4b1a      	ldr	r3, [pc, #104]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004d92:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d94:	4b19      	ldr	r3, [pc, #100]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004d96:	2101      	movs	r1, #1
 8004d98:	438a      	bics	r2, r1
 8004d9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9c:	f7fe fd78 	bl	8003890 <HAL_GetTick>
 8004da0:	0003      	movs	r3, r0
 8004da2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004da4:	e008      	b.n	8004db8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004da6:	f7fe fd73 	bl	8003890 <HAL_GetTick>
 8004daa:	0002      	movs	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e18e      	b.n	80050d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004db8:	4b10      	ldr	r3, [pc, #64]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	d1f1      	bne.n	8004da6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2204      	movs	r2, #4
 8004dc8:	4013      	ands	r3, r2
 8004dca:	d100      	bne.n	8004dce <HAL_RCC_OscConfig+0x2fe>
 8004dcc:	e0c6      	b.n	8004f5c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dce:	231f      	movs	r3, #31
 8004dd0:	18fb      	adds	r3, r7, r3
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004dd6:	4b09      	ldr	r3, [pc, #36]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	2238      	movs	r2, #56	; 0x38
 8004ddc:	4013      	ands	r3, r2
 8004dde:	2b20      	cmp	r3, #32
 8004de0:	d11e      	bne.n	8004e20 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004de2:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <HAL_RCC_OscConfig+0x32c>)
 8004de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004de6:	2202      	movs	r2, #2
 8004de8:	4013      	ands	r3, r2
 8004dea:	d100      	bne.n	8004dee <HAL_RCC_OscConfig+0x31e>
 8004dec:	e0b6      	b.n	8004f5c <HAL_RCC_OscConfig+0x48c>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d000      	beq.n	8004df8 <HAL_RCC_OscConfig+0x328>
 8004df6:	e0b1      	b.n	8004f5c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e16c      	b.n	80050d6 <HAL_RCC_OscConfig+0x606>
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	fffeffff 	.word	0xfffeffff
 8004e04:	fffbffff 	.word	0xfffbffff
 8004e08:	ffff80ff 	.word	0xffff80ff
 8004e0c:	ffffc7ff 	.word	0xffffc7ff
 8004e10:	00f42400 	.word	0x00f42400
 8004e14:	2000003c 	.word	0x2000003c
 8004e18:	20000040 	.word	0x20000040
 8004e1c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e20:	4baf      	ldr	r3, [pc, #700]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8004e22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e24:	2380      	movs	r3, #128	; 0x80
 8004e26:	055b      	lsls	r3, r3, #21
 8004e28:	4013      	ands	r3, r2
 8004e2a:	d101      	bne.n	8004e30 <HAL_RCC_OscConfig+0x360>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e000      	b.n	8004e32 <HAL_RCC_OscConfig+0x362>
 8004e30:	2300      	movs	r3, #0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d011      	beq.n	8004e5a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004e36:	4baa      	ldr	r3, [pc, #680]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8004e38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e3a:	4ba9      	ldr	r3, [pc, #676]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8004e3c:	2180      	movs	r1, #128	; 0x80
 8004e3e:	0549      	lsls	r1, r1, #21
 8004e40:	430a      	orrs	r2, r1
 8004e42:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e44:	4ba6      	ldr	r3, [pc, #664]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8004e46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e48:	2380      	movs	r3, #128	; 0x80
 8004e4a:	055b      	lsls	r3, r3, #21
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004e52:	231f      	movs	r3, #31
 8004e54:	18fb      	adds	r3, r7, r3
 8004e56:	2201      	movs	r2, #1
 8004e58:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e5a:	4ba2      	ldr	r3, [pc, #648]	; (80050e4 <HAL_RCC_OscConfig+0x614>)
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	2380      	movs	r3, #128	; 0x80
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	4013      	ands	r3, r2
 8004e64:	d11a      	bne.n	8004e9c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e66:	4b9f      	ldr	r3, [pc, #636]	; (80050e4 <HAL_RCC_OscConfig+0x614>)
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	4b9e      	ldr	r3, [pc, #632]	; (80050e4 <HAL_RCC_OscConfig+0x614>)
 8004e6c:	2180      	movs	r1, #128	; 0x80
 8004e6e:	0049      	lsls	r1, r1, #1
 8004e70:	430a      	orrs	r2, r1
 8004e72:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004e74:	f7fe fd0c 	bl	8003890 <HAL_GetTick>
 8004e78:	0003      	movs	r3, r0
 8004e7a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e7e:	f7fe fd07 	bl	8003890 <HAL_GetTick>
 8004e82:	0002      	movs	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e122      	b.n	80050d6 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e90:	4b94      	ldr	r3, [pc, #592]	; (80050e4 <HAL_RCC_OscConfig+0x614>)
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	2380      	movs	r3, #128	; 0x80
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	4013      	ands	r3, r2
 8004e9a:	d0f0      	beq.n	8004e7e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d106      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x3e2>
 8004ea4:	4b8e      	ldr	r3, [pc, #568]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8004ea6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ea8:	4b8d      	ldr	r3, [pc, #564]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8004eaa:	2101      	movs	r1, #1
 8004eac:	430a      	orrs	r2, r1
 8004eae:	65da      	str	r2, [r3, #92]	; 0x5c
 8004eb0:	e01c      	b.n	8004eec <HAL_RCC_OscConfig+0x41c>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	2b05      	cmp	r3, #5
 8004eb8:	d10c      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x404>
 8004eba:	4b89      	ldr	r3, [pc, #548]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8004ebc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ebe:	4b88      	ldr	r3, [pc, #544]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8004ec0:	2104      	movs	r1, #4
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ec6:	4b86      	ldr	r3, [pc, #536]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8004ec8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004eca:	4b85      	ldr	r3, [pc, #532]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8004ecc:	2101      	movs	r1, #1
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ed2:	e00b      	b.n	8004eec <HAL_RCC_OscConfig+0x41c>
 8004ed4:	4b82      	ldr	r3, [pc, #520]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8004ed6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ed8:	4b81      	ldr	r3, [pc, #516]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8004eda:	2101      	movs	r1, #1
 8004edc:	438a      	bics	r2, r1
 8004ede:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ee0:	4b7f      	ldr	r3, [pc, #508]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8004ee2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ee4:	4b7e      	ldr	r3, [pc, #504]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8004ee6:	2104      	movs	r1, #4
 8004ee8:	438a      	bics	r2, r1
 8004eea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d014      	beq.n	8004f1e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef4:	f7fe fccc 	bl	8003890 <HAL_GetTick>
 8004ef8:	0003      	movs	r3, r0
 8004efa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004efc:	e009      	b.n	8004f12 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004efe:	f7fe fcc7 	bl	8003890 <HAL_GetTick>
 8004f02:	0002      	movs	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	4a77      	ldr	r2, [pc, #476]	; (80050e8 <HAL_RCC_OscConfig+0x618>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e0e1      	b.n	80050d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f12:	4b73      	ldr	r3, [pc, #460]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8004f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f16:	2202      	movs	r2, #2
 8004f18:	4013      	ands	r3, r2
 8004f1a:	d0f0      	beq.n	8004efe <HAL_RCC_OscConfig+0x42e>
 8004f1c:	e013      	b.n	8004f46 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1e:	f7fe fcb7 	bl	8003890 <HAL_GetTick>
 8004f22:	0003      	movs	r3, r0
 8004f24:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f26:	e009      	b.n	8004f3c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f28:	f7fe fcb2 	bl	8003890 <HAL_GetTick>
 8004f2c:	0002      	movs	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	4a6d      	ldr	r2, [pc, #436]	; (80050e8 <HAL_RCC_OscConfig+0x618>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d901      	bls.n	8004f3c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e0cc      	b.n	80050d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f3c:	4b68      	ldr	r3, [pc, #416]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8004f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f40:	2202      	movs	r2, #2
 8004f42:	4013      	ands	r3, r2
 8004f44:	d1f0      	bne.n	8004f28 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004f46:	231f      	movs	r3, #31
 8004f48:	18fb      	adds	r3, r7, r3
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d105      	bne.n	8004f5c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004f50:	4b63      	ldr	r3, [pc, #396]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8004f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f54:	4b62      	ldr	r3, [pc, #392]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8004f56:	4965      	ldr	r1, [pc, #404]	; (80050ec <HAL_RCC_OscConfig+0x61c>)
 8004f58:	400a      	ands	r2, r1
 8004f5a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d100      	bne.n	8004f66 <HAL_RCC_OscConfig+0x496>
 8004f64:	e0b6      	b.n	80050d4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f66:	4b5e      	ldr	r3, [pc, #376]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	2238      	movs	r2, #56	; 0x38
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	2b10      	cmp	r3, #16
 8004f70:	d100      	bne.n	8004f74 <HAL_RCC_OscConfig+0x4a4>
 8004f72:	e07e      	b.n	8005072 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d153      	bne.n	8005024 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f7c:	4b58      	ldr	r3, [pc, #352]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	4b57      	ldr	r3, [pc, #348]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8004f82:	495b      	ldr	r1, [pc, #364]	; (80050f0 <HAL_RCC_OscConfig+0x620>)
 8004f84:	400a      	ands	r2, r1
 8004f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f88:	f7fe fc82 	bl	8003890 <HAL_GetTick>
 8004f8c:	0003      	movs	r3, r0
 8004f8e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f90:	e008      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f92:	f7fe fc7d 	bl	8003890 <HAL_GetTick>
 8004f96:	0002      	movs	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e098      	b.n	80050d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fa4:	4b4e      	ldr	r3, [pc, #312]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	2380      	movs	r3, #128	; 0x80
 8004faa:	049b      	lsls	r3, r3, #18
 8004fac:	4013      	ands	r3, r2
 8004fae:	d1f0      	bne.n	8004f92 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fb0:	4b4b      	ldr	r3, [pc, #300]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	4a4f      	ldr	r2, [pc, #316]	; (80050f4 <HAL_RCC_OscConfig+0x624>)
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	0019      	movs	r1, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1a      	ldr	r2, [r3, #32]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc8:	021b      	lsls	r3, r3, #8
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	4b41      	ldr	r3, [pc, #260]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fde:	4b40      	ldr	r3, [pc, #256]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	4b3f      	ldr	r3, [pc, #252]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8004fe4:	2180      	movs	r1, #128	; 0x80
 8004fe6:	0449      	lsls	r1, r1, #17
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004fec:	4b3c      	ldr	r3, [pc, #240]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8004fee:	68da      	ldr	r2, [r3, #12]
 8004ff0:	4b3b      	ldr	r3, [pc, #236]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8004ff2:	2180      	movs	r1, #128	; 0x80
 8004ff4:	0549      	lsls	r1, r1, #21
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffa:	f7fe fc49 	bl	8003890 <HAL_GetTick>
 8004ffe:	0003      	movs	r3, r0
 8005000:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005004:	f7fe fc44 	bl	8003890 <HAL_GetTick>
 8005008:	0002      	movs	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e05f      	b.n	80050d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005016:	4b32      	ldr	r3, [pc, #200]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	2380      	movs	r3, #128	; 0x80
 800501c:	049b      	lsls	r3, r3, #18
 800501e:	4013      	ands	r3, r2
 8005020:	d0f0      	beq.n	8005004 <HAL_RCC_OscConfig+0x534>
 8005022:	e057      	b.n	80050d4 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005024:	4b2e      	ldr	r3, [pc, #184]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	4b2d      	ldr	r3, [pc, #180]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 800502a:	4931      	ldr	r1, [pc, #196]	; (80050f0 <HAL_RCC_OscConfig+0x620>)
 800502c:	400a      	ands	r2, r1
 800502e:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005030:	4b2b      	ldr	r3, [pc, #172]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8005032:	68da      	ldr	r2, [r3, #12]
 8005034:	4b2a      	ldr	r3, [pc, #168]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8005036:	2103      	movs	r1, #3
 8005038:	438a      	bics	r2, r1
 800503a:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800503c:	4b28      	ldr	r3, [pc, #160]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 800503e:	68da      	ldr	r2, [r3, #12]
 8005040:	4b27      	ldr	r3, [pc, #156]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8005042:	492d      	ldr	r1, [pc, #180]	; (80050f8 <HAL_RCC_OscConfig+0x628>)
 8005044:	400a      	ands	r2, r1
 8005046:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005048:	f7fe fc22 	bl	8003890 <HAL_GetTick>
 800504c:	0003      	movs	r3, r0
 800504e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005050:	e008      	b.n	8005064 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005052:	f7fe fc1d 	bl	8003890 <HAL_GetTick>
 8005056:	0002      	movs	r2, r0
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d901      	bls.n	8005064 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e038      	b.n	80050d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005064:	4b1e      	ldr	r3, [pc, #120]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	2380      	movs	r3, #128	; 0x80
 800506a:	049b      	lsls	r3, r3, #18
 800506c:	4013      	ands	r3, r2
 800506e:	d1f0      	bne.n	8005052 <HAL_RCC_OscConfig+0x582>
 8005070:	e030      	b.n	80050d4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d101      	bne.n	800507e <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e02b      	b.n	80050d6 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800507e:	4b18      	ldr	r3, [pc, #96]	; (80050e0 <HAL_RCC_OscConfig+0x610>)
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	2203      	movs	r2, #3
 8005088:	401a      	ands	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	429a      	cmp	r2, r3
 8005090:	d11e      	bne.n	80050d0 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	2270      	movs	r2, #112	; 0x70
 8005096:	401a      	ands	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800509c:	429a      	cmp	r2, r3
 800509e:	d117      	bne.n	80050d0 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	23fe      	movs	r3, #254	; 0xfe
 80050a4:	01db      	lsls	r3, r3, #7
 80050a6:	401a      	ands	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ac:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d10e      	bne.n	80050d0 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	23f8      	movs	r3, #248	; 0xf8
 80050b6:	039b      	lsls	r3, r3, #14
 80050b8:	401a      	ands	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050be:	429a      	cmp	r2, r3
 80050c0:	d106      	bne.n	80050d0 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	0f5b      	lsrs	r3, r3, #29
 80050c6:	075a      	lsls	r2, r3, #29
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d001      	beq.n	80050d4 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e000      	b.n	80050d6 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	0018      	movs	r0, r3
 80050d8:	46bd      	mov	sp, r7
 80050da:	b008      	add	sp, #32
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	46c0      	nop			; (mov r8, r8)
 80050e0:	40021000 	.word	0x40021000
 80050e4:	40007000 	.word	0x40007000
 80050e8:	00001388 	.word	0x00001388
 80050ec:	efffffff 	.word	0xefffffff
 80050f0:	feffffff 	.word	0xfeffffff
 80050f4:	1fc1808c 	.word	0x1fc1808c
 80050f8:	effeffff 	.word	0xeffeffff

080050fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e0e9      	b.n	80052e4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005110:	4b76      	ldr	r3, [pc, #472]	; (80052ec <HAL_RCC_ClockConfig+0x1f0>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2207      	movs	r2, #7
 8005116:	4013      	ands	r3, r2
 8005118:	683a      	ldr	r2, [r7, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d91e      	bls.n	800515c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511e:	4b73      	ldr	r3, [pc, #460]	; (80052ec <HAL_RCC_ClockConfig+0x1f0>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2207      	movs	r2, #7
 8005124:	4393      	bics	r3, r2
 8005126:	0019      	movs	r1, r3
 8005128:	4b70      	ldr	r3, [pc, #448]	; (80052ec <HAL_RCC_ClockConfig+0x1f0>)
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005130:	f7fe fbae 	bl	8003890 <HAL_GetTick>
 8005134:	0003      	movs	r3, r0
 8005136:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005138:	e009      	b.n	800514e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800513a:	f7fe fba9 	bl	8003890 <HAL_GetTick>
 800513e:	0002      	movs	r2, r0
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	4a6a      	ldr	r2, [pc, #424]	; (80052f0 <HAL_RCC_ClockConfig+0x1f4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d901      	bls.n	800514e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e0ca      	b.n	80052e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800514e:	4b67      	ldr	r3, [pc, #412]	; (80052ec <HAL_RCC_ClockConfig+0x1f0>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2207      	movs	r2, #7
 8005154:	4013      	ands	r3, r2
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	429a      	cmp	r2, r3
 800515a:	d1ee      	bne.n	800513a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2202      	movs	r2, #2
 8005162:	4013      	ands	r3, r2
 8005164:	d015      	beq.n	8005192 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2204      	movs	r2, #4
 800516c:	4013      	ands	r3, r2
 800516e:	d006      	beq.n	800517e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005170:	4b60      	ldr	r3, [pc, #384]	; (80052f4 <HAL_RCC_ClockConfig+0x1f8>)
 8005172:	689a      	ldr	r2, [r3, #8]
 8005174:	4b5f      	ldr	r3, [pc, #380]	; (80052f4 <HAL_RCC_ClockConfig+0x1f8>)
 8005176:	21e0      	movs	r1, #224	; 0xe0
 8005178:	01c9      	lsls	r1, r1, #7
 800517a:	430a      	orrs	r2, r1
 800517c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800517e:	4b5d      	ldr	r3, [pc, #372]	; (80052f4 <HAL_RCC_ClockConfig+0x1f8>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	4a5d      	ldr	r2, [pc, #372]	; (80052f8 <HAL_RCC_ClockConfig+0x1fc>)
 8005184:	4013      	ands	r3, r2
 8005186:	0019      	movs	r1, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	4b59      	ldr	r3, [pc, #356]	; (80052f4 <HAL_RCC_ClockConfig+0x1f8>)
 800518e:	430a      	orrs	r2, r1
 8005190:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2201      	movs	r2, #1
 8005198:	4013      	ands	r3, r2
 800519a:	d057      	beq.n	800524c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d107      	bne.n	80051b4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051a4:	4b53      	ldr	r3, [pc, #332]	; (80052f4 <HAL_RCC_ClockConfig+0x1f8>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	2380      	movs	r3, #128	; 0x80
 80051aa:	029b      	lsls	r3, r3, #10
 80051ac:	4013      	ands	r3, r2
 80051ae:	d12b      	bne.n	8005208 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e097      	b.n	80052e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d107      	bne.n	80051cc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051bc:	4b4d      	ldr	r3, [pc, #308]	; (80052f4 <HAL_RCC_ClockConfig+0x1f8>)
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	2380      	movs	r3, #128	; 0x80
 80051c2:	049b      	lsls	r3, r3, #18
 80051c4:	4013      	ands	r3, r2
 80051c6:	d11f      	bne.n	8005208 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e08b      	b.n	80052e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d107      	bne.n	80051e4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051d4:	4b47      	ldr	r3, [pc, #284]	; (80052f4 <HAL_RCC_ClockConfig+0x1f8>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	2380      	movs	r3, #128	; 0x80
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	4013      	ands	r3, r2
 80051de:	d113      	bne.n	8005208 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e07f      	b.n	80052e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	2b03      	cmp	r3, #3
 80051ea:	d106      	bne.n	80051fa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051ec:	4b41      	ldr	r3, [pc, #260]	; (80052f4 <HAL_RCC_ClockConfig+0x1f8>)
 80051ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051f0:	2202      	movs	r2, #2
 80051f2:	4013      	ands	r3, r2
 80051f4:	d108      	bne.n	8005208 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e074      	b.n	80052e4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051fa:	4b3e      	ldr	r3, [pc, #248]	; (80052f4 <HAL_RCC_ClockConfig+0x1f8>)
 80051fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051fe:	2202      	movs	r2, #2
 8005200:	4013      	ands	r3, r2
 8005202:	d101      	bne.n	8005208 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e06d      	b.n	80052e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005208:	4b3a      	ldr	r3, [pc, #232]	; (80052f4 <HAL_RCC_ClockConfig+0x1f8>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	2207      	movs	r2, #7
 800520e:	4393      	bics	r3, r2
 8005210:	0019      	movs	r1, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	4b37      	ldr	r3, [pc, #220]	; (80052f4 <HAL_RCC_ClockConfig+0x1f8>)
 8005218:	430a      	orrs	r2, r1
 800521a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800521c:	f7fe fb38 	bl	8003890 <HAL_GetTick>
 8005220:	0003      	movs	r3, r0
 8005222:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005224:	e009      	b.n	800523a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005226:	f7fe fb33 	bl	8003890 <HAL_GetTick>
 800522a:	0002      	movs	r2, r0
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	4a2f      	ldr	r2, [pc, #188]	; (80052f0 <HAL_RCC_ClockConfig+0x1f4>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d901      	bls.n	800523a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e054      	b.n	80052e4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800523a:	4b2e      	ldr	r3, [pc, #184]	; (80052f4 <HAL_RCC_ClockConfig+0x1f8>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	2238      	movs	r2, #56	; 0x38
 8005240:	401a      	ands	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	429a      	cmp	r2, r3
 800524a:	d1ec      	bne.n	8005226 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800524c:	4b27      	ldr	r3, [pc, #156]	; (80052ec <HAL_RCC_ClockConfig+0x1f0>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2207      	movs	r2, #7
 8005252:	4013      	ands	r3, r2
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d21e      	bcs.n	8005298 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525a:	4b24      	ldr	r3, [pc, #144]	; (80052ec <HAL_RCC_ClockConfig+0x1f0>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2207      	movs	r2, #7
 8005260:	4393      	bics	r3, r2
 8005262:	0019      	movs	r1, r3
 8005264:	4b21      	ldr	r3, [pc, #132]	; (80052ec <HAL_RCC_ClockConfig+0x1f0>)
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800526c:	f7fe fb10 	bl	8003890 <HAL_GetTick>
 8005270:	0003      	movs	r3, r0
 8005272:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005274:	e009      	b.n	800528a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005276:	f7fe fb0b 	bl	8003890 <HAL_GetTick>
 800527a:	0002      	movs	r2, r0
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	4a1b      	ldr	r2, [pc, #108]	; (80052f0 <HAL_RCC_ClockConfig+0x1f4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d901      	bls.n	800528a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e02c      	b.n	80052e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800528a:	4b18      	ldr	r3, [pc, #96]	; (80052ec <HAL_RCC_ClockConfig+0x1f0>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2207      	movs	r2, #7
 8005290:	4013      	ands	r3, r2
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	429a      	cmp	r2, r3
 8005296:	d1ee      	bne.n	8005276 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2204      	movs	r2, #4
 800529e:	4013      	ands	r3, r2
 80052a0:	d009      	beq.n	80052b6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80052a2:	4b14      	ldr	r3, [pc, #80]	; (80052f4 <HAL_RCC_ClockConfig+0x1f8>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	4a15      	ldr	r2, [pc, #84]	; (80052fc <HAL_RCC_ClockConfig+0x200>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	0019      	movs	r1, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	4b10      	ldr	r3, [pc, #64]	; (80052f4 <HAL_RCC_ClockConfig+0x1f8>)
 80052b2:	430a      	orrs	r2, r1
 80052b4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80052b6:	f000 f829 	bl	800530c <HAL_RCC_GetSysClockFreq>
 80052ba:	0001      	movs	r1, r0
 80052bc:	4b0d      	ldr	r3, [pc, #52]	; (80052f4 <HAL_RCC_ClockConfig+0x1f8>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	0a1b      	lsrs	r3, r3, #8
 80052c2:	220f      	movs	r2, #15
 80052c4:	401a      	ands	r2, r3
 80052c6:	4b0e      	ldr	r3, [pc, #56]	; (8005300 <HAL_RCC_ClockConfig+0x204>)
 80052c8:	0092      	lsls	r2, r2, #2
 80052ca:	58d3      	ldr	r3, [r2, r3]
 80052cc:	221f      	movs	r2, #31
 80052ce:	4013      	ands	r3, r2
 80052d0:	000a      	movs	r2, r1
 80052d2:	40da      	lsrs	r2, r3
 80052d4:	4b0b      	ldr	r3, [pc, #44]	; (8005304 <HAL_RCC_ClockConfig+0x208>)
 80052d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80052d8:	4b0b      	ldr	r3, [pc, #44]	; (8005308 <HAL_RCC_ClockConfig+0x20c>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	0018      	movs	r0, r3
 80052de:	f7fe fa7b 	bl	80037d8 <HAL_InitTick>
 80052e2:	0003      	movs	r3, r0
}
 80052e4:	0018      	movs	r0, r3
 80052e6:	46bd      	mov	sp, r7
 80052e8:	b004      	add	sp, #16
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40022000 	.word	0x40022000
 80052f0:	00001388 	.word	0x00001388
 80052f4:	40021000 	.word	0x40021000
 80052f8:	fffff0ff 	.word	0xfffff0ff
 80052fc:	ffff8fff 	.word	0xffff8fff
 8005300:	080064a8 	.word	0x080064a8
 8005304:	2000003c 	.word	0x2000003c
 8005308:	20000040 	.word	0x20000040

0800530c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005312:	4b3c      	ldr	r3, [pc, #240]	; (8005404 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	2238      	movs	r2, #56	; 0x38
 8005318:	4013      	ands	r3, r2
 800531a:	d10f      	bne.n	800533c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800531c:	4b39      	ldr	r3, [pc, #228]	; (8005404 <HAL_RCC_GetSysClockFreq+0xf8>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	0adb      	lsrs	r3, r3, #11
 8005322:	2207      	movs	r2, #7
 8005324:	4013      	ands	r3, r2
 8005326:	2201      	movs	r2, #1
 8005328:	409a      	lsls	r2, r3
 800532a:	0013      	movs	r3, r2
 800532c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800532e:	6839      	ldr	r1, [r7, #0]
 8005330:	4835      	ldr	r0, [pc, #212]	; (8005408 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005332:	f7fa fee5 	bl	8000100 <__udivsi3>
 8005336:	0003      	movs	r3, r0
 8005338:	613b      	str	r3, [r7, #16]
 800533a:	e05d      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800533c:	4b31      	ldr	r3, [pc, #196]	; (8005404 <HAL_RCC_GetSysClockFreq+0xf8>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	2238      	movs	r2, #56	; 0x38
 8005342:	4013      	ands	r3, r2
 8005344:	2b08      	cmp	r3, #8
 8005346:	d102      	bne.n	800534e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005348:	4b2f      	ldr	r3, [pc, #188]	; (8005408 <HAL_RCC_GetSysClockFreq+0xfc>)
 800534a:	613b      	str	r3, [r7, #16]
 800534c:	e054      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800534e:	4b2d      	ldr	r3, [pc, #180]	; (8005404 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	2238      	movs	r2, #56	; 0x38
 8005354:	4013      	ands	r3, r2
 8005356:	2b10      	cmp	r3, #16
 8005358:	d138      	bne.n	80053cc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800535a:	4b2a      	ldr	r3, [pc, #168]	; (8005404 <HAL_RCC_GetSysClockFreq+0xf8>)
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	2203      	movs	r2, #3
 8005360:	4013      	ands	r3, r2
 8005362:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005364:	4b27      	ldr	r3, [pc, #156]	; (8005404 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	091b      	lsrs	r3, r3, #4
 800536a:	2207      	movs	r2, #7
 800536c:	4013      	ands	r3, r2
 800536e:	3301      	adds	r3, #1
 8005370:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2b03      	cmp	r3, #3
 8005376:	d10d      	bne.n	8005394 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005378:	68b9      	ldr	r1, [r7, #8]
 800537a:	4823      	ldr	r0, [pc, #140]	; (8005408 <HAL_RCC_GetSysClockFreq+0xfc>)
 800537c:	f7fa fec0 	bl	8000100 <__udivsi3>
 8005380:	0003      	movs	r3, r0
 8005382:	0019      	movs	r1, r3
 8005384:	4b1f      	ldr	r3, [pc, #124]	; (8005404 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	0a1b      	lsrs	r3, r3, #8
 800538a:	227f      	movs	r2, #127	; 0x7f
 800538c:	4013      	ands	r3, r2
 800538e:	434b      	muls	r3, r1
 8005390:	617b      	str	r3, [r7, #20]
        break;
 8005392:	e00d      	b.n	80053b0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005394:	68b9      	ldr	r1, [r7, #8]
 8005396:	481c      	ldr	r0, [pc, #112]	; (8005408 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005398:	f7fa feb2 	bl	8000100 <__udivsi3>
 800539c:	0003      	movs	r3, r0
 800539e:	0019      	movs	r1, r3
 80053a0:	4b18      	ldr	r3, [pc, #96]	; (8005404 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	0a1b      	lsrs	r3, r3, #8
 80053a6:	227f      	movs	r2, #127	; 0x7f
 80053a8:	4013      	ands	r3, r2
 80053aa:	434b      	muls	r3, r1
 80053ac:	617b      	str	r3, [r7, #20]
        break;
 80053ae:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80053b0:	4b14      	ldr	r3, [pc, #80]	; (8005404 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	0f5b      	lsrs	r3, r3, #29
 80053b6:	2207      	movs	r2, #7
 80053b8:	4013      	ands	r3, r2
 80053ba:	3301      	adds	r3, #1
 80053bc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80053be:	6879      	ldr	r1, [r7, #4]
 80053c0:	6978      	ldr	r0, [r7, #20]
 80053c2:	f7fa fe9d 	bl	8000100 <__udivsi3>
 80053c6:	0003      	movs	r3, r0
 80053c8:	613b      	str	r3, [r7, #16]
 80053ca:	e015      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80053cc:	4b0d      	ldr	r3, [pc, #52]	; (8005404 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	2238      	movs	r2, #56	; 0x38
 80053d2:	4013      	ands	r3, r2
 80053d4:	2b20      	cmp	r3, #32
 80053d6:	d103      	bne.n	80053e0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80053d8:	2380      	movs	r3, #128	; 0x80
 80053da:	021b      	lsls	r3, r3, #8
 80053dc:	613b      	str	r3, [r7, #16]
 80053de:	e00b      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80053e0:	4b08      	ldr	r3, [pc, #32]	; (8005404 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	2238      	movs	r2, #56	; 0x38
 80053e6:	4013      	ands	r3, r2
 80053e8:	2b18      	cmp	r3, #24
 80053ea:	d103      	bne.n	80053f4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80053ec:	23fa      	movs	r3, #250	; 0xfa
 80053ee:	01db      	lsls	r3, r3, #7
 80053f0:	613b      	str	r3, [r7, #16]
 80053f2:	e001      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80053f8:	693b      	ldr	r3, [r7, #16]
}
 80053fa:	0018      	movs	r0, r3
 80053fc:	46bd      	mov	sp, r7
 80053fe:	b006      	add	sp, #24
 8005400:	bd80      	pop	{r7, pc}
 8005402:	46c0      	nop			; (mov r8, r8)
 8005404:	40021000 	.word	0x40021000
 8005408:	00f42400 	.word	0x00f42400

0800540c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005414:	2313      	movs	r3, #19
 8005416:	18fb      	adds	r3, r7, r3
 8005418:	2200      	movs	r2, #0
 800541a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800541c:	2312      	movs	r3, #18
 800541e:	18fb      	adds	r3, r7, r3
 8005420:	2200      	movs	r2, #0
 8005422:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	2380      	movs	r3, #128	; 0x80
 800542a:	029b      	lsls	r3, r3, #10
 800542c:	4013      	ands	r3, r2
 800542e:	d100      	bne.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005430:	e0a3      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005432:	2011      	movs	r0, #17
 8005434:	183b      	adds	r3, r7, r0
 8005436:	2200      	movs	r2, #0
 8005438:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800543a:	4b7f      	ldr	r3, [pc, #508]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800543c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800543e:	2380      	movs	r3, #128	; 0x80
 8005440:	055b      	lsls	r3, r3, #21
 8005442:	4013      	ands	r3, r2
 8005444:	d110      	bne.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005446:	4b7c      	ldr	r3, [pc, #496]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005448:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800544a:	4b7b      	ldr	r3, [pc, #492]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800544c:	2180      	movs	r1, #128	; 0x80
 800544e:	0549      	lsls	r1, r1, #21
 8005450:	430a      	orrs	r2, r1
 8005452:	63da      	str	r2, [r3, #60]	; 0x3c
 8005454:	4b78      	ldr	r3, [pc, #480]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005456:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005458:	2380      	movs	r3, #128	; 0x80
 800545a:	055b      	lsls	r3, r3, #21
 800545c:	4013      	ands	r3, r2
 800545e:	60bb      	str	r3, [r7, #8]
 8005460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005462:	183b      	adds	r3, r7, r0
 8005464:	2201      	movs	r2, #1
 8005466:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005468:	4b74      	ldr	r3, [pc, #464]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	4b73      	ldr	r3, [pc, #460]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800546e:	2180      	movs	r1, #128	; 0x80
 8005470:	0049      	lsls	r1, r1, #1
 8005472:	430a      	orrs	r2, r1
 8005474:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005476:	f7fe fa0b 	bl	8003890 <HAL_GetTick>
 800547a:	0003      	movs	r3, r0
 800547c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800547e:	e00b      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005480:	f7fe fa06 	bl	8003890 <HAL_GetTick>
 8005484:	0002      	movs	r2, r0
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d904      	bls.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800548e:	2313      	movs	r3, #19
 8005490:	18fb      	adds	r3, r7, r3
 8005492:	2203      	movs	r2, #3
 8005494:	701a      	strb	r2, [r3, #0]
        break;
 8005496:	e005      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005498:	4b68      	ldr	r3, [pc, #416]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	2380      	movs	r3, #128	; 0x80
 800549e:	005b      	lsls	r3, r3, #1
 80054a0:	4013      	ands	r3, r2
 80054a2:	d0ed      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80054a4:	2313      	movs	r3, #19
 80054a6:	18fb      	adds	r3, r7, r3
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d154      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054ae:	4b62      	ldr	r3, [pc, #392]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80054b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054b2:	23c0      	movs	r3, #192	; 0xc0
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4013      	ands	r3, r2
 80054b8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d019      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d014      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054ca:	4b5b      	ldr	r3, [pc, #364]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80054cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ce:	4a5c      	ldr	r2, [pc, #368]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80054d0:	4013      	ands	r3, r2
 80054d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054d4:	4b58      	ldr	r3, [pc, #352]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80054d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054d8:	4b57      	ldr	r3, [pc, #348]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80054da:	2180      	movs	r1, #128	; 0x80
 80054dc:	0249      	lsls	r1, r1, #9
 80054de:	430a      	orrs	r2, r1
 80054e0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054e2:	4b55      	ldr	r3, [pc, #340]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80054e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054e6:	4b54      	ldr	r3, [pc, #336]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80054e8:	4956      	ldr	r1, [pc, #344]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80054ea:	400a      	ands	r2, r1
 80054ec:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054ee:	4b52      	ldr	r3, [pc, #328]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	2201      	movs	r2, #1
 80054f8:	4013      	ands	r3, r2
 80054fa:	d016      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054fc:	f7fe f9c8 	bl	8003890 <HAL_GetTick>
 8005500:	0003      	movs	r3, r0
 8005502:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005504:	e00c      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005506:	f7fe f9c3 	bl	8003890 <HAL_GetTick>
 800550a:	0002      	movs	r2, r0
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	4a4d      	ldr	r2, [pc, #308]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d904      	bls.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005516:	2313      	movs	r3, #19
 8005518:	18fb      	adds	r3, r7, r3
 800551a:	2203      	movs	r2, #3
 800551c:	701a      	strb	r2, [r3, #0]
            break;
 800551e:	e004      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005520:	4b45      	ldr	r3, [pc, #276]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005524:	2202      	movs	r2, #2
 8005526:	4013      	ands	r3, r2
 8005528:	d0ed      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800552a:	2313      	movs	r3, #19
 800552c:	18fb      	adds	r3, r7, r3
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10a      	bne.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005534:	4b40      	ldr	r3, [pc, #256]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005538:	4a41      	ldr	r2, [pc, #260]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800553a:	4013      	ands	r3, r2
 800553c:	0019      	movs	r1, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	695a      	ldr	r2, [r3, #20]
 8005542:	4b3d      	ldr	r3, [pc, #244]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005544:	430a      	orrs	r2, r1
 8005546:	65da      	str	r2, [r3, #92]	; 0x5c
 8005548:	e00c      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800554a:	2312      	movs	r3, #18
 800554c:	18fb      	adds	r3, r7, r3
 800554e:	2213      	movs	r2, #19
 8005550:	18ba      	adds	r2, r7, r2
 8005552:	7812      	ldrb	r2, [r2, #0]
 8005554:	701a      	strb	r2, [r3, #0]
 8005556:	e005      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005558:	2312      	movs	r3, #18
 800555a:	18fb      	adds	r3, r7, r3
 800555c:	2213      	movs	r2, #19
 800555e:	18ba      	adds	r2, r7, r2
 8005560:	7812      	ldrb	r2, [r2, #0]
 8005562:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005564:	2311      	movs	r3, #17
 8005566:	18fb      	adds	r3, r7, r3
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d105      	bne.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800556e:	4b32      	ldr	r3, [pc, #200]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005570:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005572:	4b31      	ldr	r3, [pc, #196]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005574:	4935      	ldr	r1, [pc, #212]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005576:	400a      	ands	r2, r1
 8005578:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2201      	movs	r2, #1
 8005580:	4013      	ands	r3, r2
 8005582:	d009      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005584:	4b2c      	ldr	r3, [pc, #176]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005588:	2203      	movs	r2, #3
 800558a:	4393      	bics	r3, r2
 800558c:	0019      	movs	r1, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	4b29      	ldr	r3, [pc, #164]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005594:	430a      	orrs	r2, r1
 8005596:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2220      	movs	r2, #32
 800559e:	4013      	ands	r3, r2
 80055a0:	d009      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055a2:	4b25      	ldr	r3, [pc, #148]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80055a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a6:	4a2a      	ldr	r2, [pc, #168]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80055a8:	4013      	ands	r3, r2
 80055aa:	0019      	movs	r1, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	4b21      	ldr	r3, [pc, #132]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80055b2:	430a      	orrs	r2, r1
 80055b4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	2380      	movs	r3, #128	; 0x80
 80055bc:	01db      	lsls	r3, r3, #7
 80055be:	4013      	ands	r3, r2
 80055c0:	d015      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055c2:	4b1d      	ldr	r3, [pc, #116]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80055c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	0899      	lsrs	r1, r3, #2
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691a      	ldr	r2, [r3, #16]
 80055ce:	4b1a      	ldr	r3, [pc, #104]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80055d0:	430a      	orrs	r2, r1
 80055d2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	691a      	ldr	r2, [r3, #16]
 80055d8:	2380      	movs	r3, #128	; 0x80
 80055da:	05db      	lsls	r3, r3, #23
 80055dc:	429a      	cmp	r2, r3
 80055de:	d106      	bne.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80055e0:	4b15      	ldr	r3, [pc, #84]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	4b14      	ldr	r3, [pc, #80]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80055e6:	2180      	movs	r1, #128	; 0x80
 80055e8:	0249      	lsls	r1, r1, #9
 80055ea:	430a      	orrs	r2, r1
 80055ec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	2380      	movs	r3, #128	; 0x80
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	4013      	ands	r3, r2
 80055f8:	d016      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80055fa:	4b0f      	ldr	r3, [pc, #60]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80055fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fe:	4a15      	ldr	r2, [pc, #84]	; (8005654 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005600:	4013      	ands	r3, r2
 8005602:	0019      	movs	r1, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68da      	ldr	r2, [r3, #12]
 8005608:	4b0b      	ldr	r3, [pc, #44]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800560a:	430a      	orrs	r2, r1
 800560c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68da      	ldr	r2, [r3, #12]
 8005612:	2380      	movs	r3, #128	; 0x80
 8005614:	01db      	lsls	r3, r3, #7
 8005616:	429a      	cmp	r2, r3
 8005618:	d106      	bne.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800561a:	4b07      	ldr	r3, [pc, #28]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	4b06      	ldr	r3, [pc, #24]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005620:	2180      	movs	r1, #128	; 0x80
 8005622:	0249      	lsls	r1, r1, #9
 8005624:	430a      	orrs	r2, r1
 8005626:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005628:	2312      	movs	r3, #18
 800562a:	18fb      	adds	r3, r7, r3
 800562c:	781b      	ldrb	r3, [r3, #0]
}
 800562e:	0018      	movs	r0, r3
 8005630:	46bd      	mov	sp, r7
 8005632:	b006      	add	sp, #24
 8005634:	bd80      	pop	{r7, pc}
 8005636:	46c0      	nop			; (mov r8, r8)
 8005638:	40021000 	.word	0x40021000
 800563c:	40007000 	.word	0x40007000
 8005640:	fffffcff 	.word	0xfffffcff
 8005644:	fffeffff 	.word	0xfffeffff
 8005648:	00001388 	.word	0x00001388
 800564c:	efffffff 	.word	0xefffffff
 8005650:	ffffcfff 	.word	0xffffcfff
 8005654:	ffff3fff 	.word	0xffff3fff

08005658 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e04a      	b.n	8005700 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	223d      	movs	r2, #61	; 0x3d
 800566e:	5c9b      	ldrb	r3, [r3, r2]
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d107      	bne.n	8005686 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	223c      	movs	r2, #60	; 0x3c
 800567a:	2100      	movs	r1, #0
 800567c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	0018      	movs	r0, r3
 8005682:	f7fd ff11 	bl	80034a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	223d      	movs	r2, #61	; 0x3d
 800568a:	2102      	movs	r1, #2
 800568c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	3304      	adds	r3, #4
 8005696:	0019      	movs	r1, r3
 8005698:	0010      	movs	r0, r2
 800569a:	f000 fae7 	bl	8005c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2248      	movs	r2, #72	; 0x48
 80056a2:	2101      	movs	r1, #1
 80056a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	223e      	movs	r2, #62	; 0x3e
 80056aa:	2101      	movs	r1, #1
 80056ac:	5499      	strb	r1, [r3, r2]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	223f      	movs	r2, #63	; 0x3f
 80056b2:	2101      	movs	r1, #1
 80056b4:	5499      	strb	r1, [r3, r2]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2240      	movs	r2, #64	; 0x40
 80056ba:	2101      	movs	r1, #1
 80056bc:	5499      	strb	r1, [r3, r2]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2241      	movs	r2, #65	; 0x41
 80056c2:	2101      	movs	r1, #1
 80056c4:	5499      	strb	r1, [r3, r2]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2242      	movs	r2, #66	; 0x42
 80056ca:	2101      	movs	r1, #1
 80056cc:	5499      	strb	r1, [r3, r2]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2243      	movs	r2, #67	; 0x43
 80056d2:	2101      	movs	r1, #1
 80056d4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2244      	movs	r2, #68	; 0x44
 80056da:	2101      	movs	r1, #1
 80056dc:	5499      	strb	r1, [r3, r2]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2245      	movs	r2, #69	; 0x45
 80056e2:	2101      	movs	r1, #1
 80056e4:	5499      	strb	r1, [r3, r2]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2246      	movs	r2, #70	; 0x46
 80056ea:	2101      	movs	r1, #1
 80056ec:	5499      	strb	r1, [r3, r2]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2247      	movs	r2, #71	; 0x47
 80056f2:	2101      	movs	r1, #1
 80056f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	223d      	movs	r2, #61	; 0x3d
 80056fa:	2101      	movs	r1, #1
 80056fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	0018      	movs	r0, r3
 8005702:	46bd      	mov	sp, r7
 8005704:	b002      	add	sp, #8
 8005706:	bd80      	pop	{r7, pc}

08005708 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	223d      	movs	r2, #61	; 0x3d
 8005714:	5c9b      	ldrb	r3, [r3, r2]
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b01      	cmp	r3, #1
 800571a:	d001      	beq.n	8005720 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e02f      	b.n	8005780 <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	223d      	movs	r2, #61	; 0x3d
 8005724:	2102      	movs	r1, #2
 8005726:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a16      	ldr	r2, [pc, #88]	; (8005788 <HAL_TIM_Base_Start+0x80>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d004      	beq.n	800573c <HAL_TIM_Base_Start+0x34>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a15      	ldr	r2, [pc, #84]	; (800578c <HAL_TIM_Base_Start+0x84>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d116      	bne.n	800576a <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	4a13      	ldr	r2, [pc, #76]	; (8005790 <HAL_TIM_Base_Start+0x88>)
 8005744:	4013      	ands	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b06      	cmp	r3, #6
 800574c:	d016      	beq.n	800577c <HAL_TIM_Base_Start+0x74>
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	2380      	movs	r3, #128	; 0x80
 8005752:	025b      	lsls	r3, r3, #9
 8005754:	429a      	cmp	r2, r3
 8005756:	d011      	beq.n	800577c <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2101      	movs	r1, #1
 8005764:	430a      	orrs	r2, r1
 8005766:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005768:	e008      	b.n	800577c <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2101      	movs	r1, #1
 8005776:	430a      	orrs	r2, r1
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	e000      	b.n	800577e <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800577c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	0018      	movs	r0, r3
 8005782:	46bd      	mov	sp, r7
 8005784:	b004      	add	sp, #16
 8005786:	bd80      	pop	{r7, pc}
 8005788:	40012c00 	.word	0x40012c00
 800578c:	40000400 	.word	0x40000400
 8005790:	00010007 	.word	0x00010007

08005794 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	223d      	movs	r2, #61	; 0x3d
 80057a0:	5c9b      	ldrb	r3, [r3, r2]
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d001      	beq.n	80057ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e037      	b.n	800581c <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	223d      	movs	r2, #61	; 0x3d
 80057b0:	2102      	movs	r1, #2
 80057b2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68da      	ldr	r2, [r3, #12]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2101      	movs	r1, #1
 80057c0:	430a      	orrs	r2, r1
 80057c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a16      	ldr	r2, [pc, #88]	; (8005824 <HAL_TIM_Base_Start_IT+0x90>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d004      	beq.n	80057d8 <HAL_TIM_Base_Start_IT+0x44>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a15      	ldr	r2, [pc, #84]	; (8005828 <HAL_TIM_Base_Start_IT+0x94>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d116      	bne.n	8005806 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	4a13      	ldr	r2, [pc, #76]	; (800582c <HAL_TIM_Base_Start_IT+0x98>)
 80057e0:	4013      	ands	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2b06      	cmp	r3, #6
 80057e8:	d016      	beq.n	8005818 <HAL_TIM_Base_Start_IT+0x84>
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	2380      	movs	r3, #128	; 0x80
 80057ee:	025b      	lsls	r3, r3, #9
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d011      	beq.n	8005818 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2101      	movs	r1, #1
 8005800:	430a      	orrs	r2, r1
 8005802:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005804:	e008      	b.n	8005818 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2101      	movs	r1, #1
 8005812:	430a      	orrs	r2, r1
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	e000      	b.n	800581a <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005818:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	0018      	movs	r0, r3
 800581e:	46bd      	mov	sp, r7
 8005820:	b004      	add	sp, #16
 8005822:	bd80      	pop	{r7, pc}
 8005824:	40012c00 	.word	0x40012c00
 8005828:	40000400 	.word	0x40000400
 800582c:	00010007 	.word	0x00010007

08005830 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	2202      	movs	r2, #2
 8005840:	4013      	ands	r3, r2
 8005842:	2b02      	cmp	r3, #2
 8005844:	d124      	bne.n	8005890 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	2202      	movs	r2, #2
 800584e:	4013      	ands	r3, r2
 8005850:	2b02      	cmp	r3, #2
 8005852:	d11d      	bne.n	8005890 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2203      	movs	r2, #3
 800585a:	4252      	negs	r2, r2
 800585c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	2203      	movs	r2, #3
 800586c:	4013      	ands	r3, r2
 800586e:	d004      	beq.n	800587a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	0018      	movs	r0, r3
 8005874:	f000 f9e2 	bl	8005c3c <HAL_TIM_IC_CaptureCallback>
 8005878:	e007      	b.n	800588a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	0018      	movs	r0, r3
 800587e:	f000 f9d5 	bl	8005c2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	0018      	movs	r0, r3
 8005886:	f000 f9e1 	bl	8005c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	2204      	movs	r2, #4
 8005898:	4013      	ands	r3, r2
 800589a:	2b04      	cmp	r3, #4
 800589c:	d125      	bne.n	80058ea <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	2204      	movs	r2, #4
 80058a6:	4013      	ands	r3, r2
 80058a8:	2b04      	cmp	r3, #4
 80058aa:	d11e      	bne.n	80058ea <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2205      	movs	r2, #5
 80058b2:	4252      	negs	r2, r2
 80058b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2202      	movs	r2, #2
 80058ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	699a      	ldr	r2, [r3, #24]
 80058c2:	23c0      	movs	r3, #192	; 0xc0
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4013      	ands	r3, r2
 80058c8:	d004      	beq.n	80058d4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	0018      	movs	r0, r3
 80058ce:	f000 f9b5 	bl	8005c3c <HAL_TIM_IC_CaptureCallback>
 80058d2:	e007      	b.n	80058e4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	0018      	movs	r0, r3
 80058d8:	f000 f9a8 	bl	8005c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	0018      	movs	r0, r3
 80058e0:	f000 f9b4 	bl	8005c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	2208      	movs	r2, #8
 80058f2:	4013      	ands	r3, r2
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d124      	bne.n	8005942 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	2208      	movs	r2, #8
 8005900:	4013      	ands	r3, r2
 8005902:	2b08      	cmp	r3, #8
 8005904:	d11d      	bne.n	8005942 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2209      	movs	r2, #9
 800590c:	4252      	negs	r2, r2
 800590e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2204      	movs	r2, #4
 8005914:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	69db      	ldr	r3, [r3, #28]
 800591c:	2203      	movs	r2, #3
 800591e:	4013      	ands	r3, r2
 8005920:	d004      	beq.n	800592c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	0018      	movs	r0, r3
 8005926:	f000 f989 	bl	8005c3c <HAL_TIM_IC_CaptureCallback>
 800592a:	e007      	b.n	800593c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	0018      	movs	r0, r3
 8005930:	f000 f97c 	bl	8005c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	0018      	movs	r0, r3
 8005938:	f000 f988 	bl	8005c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	2210      	movs	r2, #16
 800594a:	4013      	ands	r3, r2
 800594c:	2b10      	cmp	r3, #16
 800594e:	d125      	bne.n	800599c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	2210      	movs	r2, #16
 8005958:	4013      	ands	r3, r2
 800595a:	2b10      	cmp	r3, #16
 800595c:	d11e      	bne.n	800599c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2211      	movs	r2, #17
 8005964:	4252      	negs	r2, r2
 8005966:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2208      	movs	r2, #8
 800596c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	69da      	ldr	r2, [r3, #28]
 8005974:	23c0      	movs	r3, #192	; 0xc0
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4013      	ands	r3, r2
 800597a:	d004      	beq.n	8005986 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	0018      	movs	r0, r3
 8005980:	f000 f95c 	bl	8005c3c <HAL_TIM_IC_CaptureCallback>
 8005984:	e007      	b.n	8005996 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	0018      	movs	r0, r3
 800598a:	f000 f94f 	bl	8005c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	0018      	movs	r0, r3
 8005992:	f000 f95b 	bl	8005c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	2201      	movs	r2, #1
 80059a4:	4013      	ands	r3, r2
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d10f      	bne.n	80059ca <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	2201      	movs	r2, #1
 80059b2:	4013      	ands	r3, r2
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d108      	bne.n	80059ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2202      	movs	r2, #2
 80059be:	4252      	negs	r2, r2
 80059c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	0018      	movs	r0, r3
 80059c6:	f7fd f8a1 	bl	8002b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	2280      	movs	r2, #128	; 0x80
 80059d2:	4013      	ands	r3, r2
 80059d4:	2b80      	cmp	r3, #128	; 0x80
 80059d6:	d10f      	bne.n	80059f8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	2280      	movs	r2, #128	; 0x80
 80059e0:	4013      	ands	r3, r2
 80059e2:	2b80      	cmp	r3, #128	; 0x80
 80059e4:	d108      	bne.n	80059f8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2281      	movs	r2, #129	; 0x81
 80059ec:	4252      	negs	r2, r2
 80059ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	0018      	movs	r0, r3
 80059f4:	f000 faac 	bl	8005f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691a      	ldr	r2, [r3, #16]
 80059fe:	2380      	movs	r3, #128	; 0x80
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	401a      	ands	r2, r3
 8005a04:	2380      	movs	r3, #128	; 0x80
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d10e      	bne.n	8005a2a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	2280      	movs	r2, #128	; 0x80
 8005a14:	4013      	ands	r3, r2
 8005a16:	2b80      	cmp	r3, #128	; 0x80
 8005a18:	d107      	bne.n	8005a2a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a1c      	ldr	r2, [pc, #112]	; (8005a90 <HAL_TIM_IRQHandler+0x260>)
 8005a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	0018      	movs	r0, r3
 8005a26:	f000 fa9b 	bl	8005f60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	2240      	movs	r2, #64	; 0x40
 8005a32:	4013      	ands	r3, r2
 8005a34:	2b40      	cmp	r3, #64	; 0x40
 8005a36:	d10f      	bne.n	8005a58 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	2240      	movs	r2, #64	; 0x40
 8005a40:	4013      	ands	r3, r2
 8005a42:	2b40      	cmp	r3, #64	; 0x40
 8005a44:	d108      	bne.n	8005a58 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2241      	movs	r2, #65	; 0x41
 8005a4c:	4252      	negs	r2, r2
 8005a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	0018      	movs	r0, r3
 8005a54:	f000 f902 	bl	8005c5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	4013      	ands	r3, r2
 8005a62:	2b20      	cmp	r3, #32
 8005a64:	d10f      	bne.n	8005a86 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	4013      	ands	r3, r2
 8005a70:	2b20      	cmp	r3, #32
 8005a72:	d108      	bne.n	8005a86 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2221      	movs	r2, #33	; 0x21
 8005a7a:	4252      	negs	r2, r2
 8005a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	0018      	movs	r0, r3
 8005a82:	f000 fa5d 	bl	8005f40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a86:	46c0      	nop			; (mov r8, r8)
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	b002      	add	sp, #8
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	46c0      	nop			; (mov r8, r8)
 8005a90:	fffffeff 	.word	0xfffffeff

08005a94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	223c      	movs	r2, #60	; 0x3c
 8005aa2:	5c9b      	ldrb	r3, [r3, r2]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d101      	bne.n	8005aac <HAL_TIM_ConfigClockSource+0x18>
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	e0b7      	b.n	8005c1c <HAL_TIM_ConfigClockSource+0x188>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	223c      	movs	r2, #60	; 0x3c
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	223d      	movs	r2, #61	; 0x3d
 8005ab8:	2102      	movs	r1, #2
 8005aba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	4a57      	ldr	r2, [pc, #348]	; (8005c24 <HAL_TIM_ConfigClockSource+0x190>)
 8005ac8:	4013      	ands	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4a56      	ldr	r2, [pc, #344]	; (8005c28 <HAL_TIM_ConfigClockSource+0x194>)
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2280      	movs	r2, #128	; 0x80
 8005ae2:	0192      	lsls	r2, r2, #6
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d040      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0xd6>
 8005ae8:	2280      	movs	r2, #128	; 0x80
 8005aea:	0192      	lsls	r2, r2, #6
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d900      	bls.n	8005af2 <HAL_TIM_ConfigClockSource+0x5e>
 8005af0:	e088      	b.n	8005c04 <HAL_TIM_ConfigClockSource+0x170>
 8005af2:	2280      	movs	r2, #128	; 0x80
 8005af4:	0152      	lsls	r2, r2, #5
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d100      	bne.n	8005afc <HAL_TIM_ConfigClockSource+0x68>
 8005afa:	e085      	b.n	8005c08 <HAL_TIM_ConfigClockSource+0x174>
 8005afc:	2280      	movs	r2, #128	; 0x80
 8005afe:	0152      	lsls	r2, r2, #5
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d900      	bls.n	8005b06 <HAL_TIM_ConfigClockSource+0x72>
 8005b04:	e07e      	b.n	8005c04 <HAL_TIM_ConfigClockSource+0x170>
 8005b06:	2b70      	cmp	r3, #112	; 0x70
 8005b08:	d018      	beq.n	8005b3c <HAL_TIM_ConfigClockSource+0xa8>
 8005b0a:	d900      	bls.n	8005b0e <HAL_TIM_ConfigClockSource+0x7a>
 8005b0c:	e07a      	b.n	8005c04 <HAL_TIM_ConfigClockSource+0x170>
 8005b0e:	2b60      	cmp	r3, #96	; 0x60
 8005b10:	d04f      	beq.n	8005bb2 <HAL_TIM_ConfigClockSource+0x11e>
 8005b12:	d900      	bls.n	8005b16 <HAL_TIM_ConfigClockSource+0x82>
 8005b14:	e076      	b.n	8005c04 <HAL_TIM_ConfigClockSource+0x170>
 8005b16:	2b50      	cmp	r3, #80	; 0x50
 8005b18:	d03b      	beq.n	8005b92 <HAL_TIM_ConfigClockSource+0xfe>
 8005b1a:	d900      	bls.n	8005b1e <HAL_TIM_ConfigClockSource+0x8a>
 8005b1c:	e072      	b.n	8005c04 <HAL_TIM_ConfigClockSource+0x170>
 8005b1e:	2b40      	cmp	r3, #64	; 0x40
 8005b20:	d057      	beq.n	8005bd2 <HAL_TIM_ConfigClockSource+0x13e>
 8005b22:	d900      	bls.n	8005b26 <HAL_TIM_ConfigClockSource+0x92>
 8005b24:	e06e      	b.n	8005c04 <HAL_TIM_ConfigClockSource+0x170>
 8005b26:	2b30      	cmp	r3, #48	; 0x30
 8005b28:	d063      	beq.n	8005bf2 <HAL_TIM_ConfigClockSource+0x15e>
 8005b2a:	d86b      	bhi.n	8005c04 <HAL_TIM_ConfigClockSource+0x170>
 8005b2c:	2b20      	cmp	r3, #32
 8005b2e:	d060      	beq.n	8005bf2 <HAL_TIM_ConfigClockSource+0x15e>
 8005b30:	d868      	bhi.n	8005c04 <HAL_TIM_ConfigClockSource+0x170>
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d05d      	beq.n	8005bf2 <HAL_TIM_ConfigClockSource+0x15e>
 8005b36:	2b10      	cmp	r3, #16
 8005b38:	d05b      	beq.n	8005bf2 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005b3a:	e063      	b.n	8005c04 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6818      	ldr	r0, [r3, #0]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	6899      	ldr	r1, [r3, #8]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f000 f976 	bl	8005e3c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2277      	movs	r2, #119	; 0x77
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	609a      	str	r2, [r3, #8]
      break;
 8005b68:	e04f      	b.n	8005c0a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6818      	ldr	r0, [r3, #0]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	6899      	ldr	r1, [r3, #8]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f000 f95f 	bl	8005e3c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2180      	movs	r1, #128	; 0x80
 8005b8a:	01c9      	lsls	r1, r1, #7
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	609a      	str	r2, [r3, #8]
      break;
 8005b90:	e03b      	b.n	8005c0a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6818      	ldr	r0, [r3, #0]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	6859      	ldr	r1, [r3, #4]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	001a      	movs	r2, r3
 8005ba0:	f000 f8d0 	bl	8005d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2150      	movs	r1, #80	; 0x50
 8005baa:	0018      	movs	r0, r3
 8005bac:	f000 f92a 	bl	8005e04 <TIM_ITRx_SetConfig>
      break;
 8005bb0:	e02b      	b.n	8005c0a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6818      	ldr	r0, [r3, #0]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	6859      	ldr	r1, [r3, #4]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	001a      	movs	r2, r3
 8005bc0:	f000 f8ee 	bl	8005da0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2160      	movs	r1, #96	; 0x60
 8005bca:	0018      	movs	r0, r3
 8005bcc:	f000 f91a 	bl	8005e04 <TIM_ITRx_SetConfig>
      break;
 8005bd0:	e01b      	b.n	8005c0a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6818      	ldr	r0, [r3, #0]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	6859      	ldr	r1, [r3, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	001a      	movs	r2, r3
 8005be0:	f000 f8b0 	bl	8005d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2140      	movs	r1, #64	; 0x40
 8005bea:	0018      	movs	r0, r3
 8005bec:	f000 f90a 	bl	8005e04 <TIM_ITRx_SetConfig>
      break;
 8005bf0:	e00b      	b.n	8005c0a <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	0019      	movs	r1, r3
 8005bfc:	0010      	movs	r0, r2
 8005bfe:	f000 f901 	bl	8005e04 <TIM_ITRx_SetConfig>
        break;
 8005c02:	e002      	b.n	8005c0a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8005c04:	46c0      	nop			; (mov r8, r8)
 8005c06:	e000      	b.n	8005c0a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8005c08:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	223d      	movs	r2, #61	; 0x3d
 8005c0e:	2101      	movs	r1, #1
 8005c10:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	223c      	movs	r2, #60	; 0x3c
 8005c16:	2100      	movs	r1, #0
 8005c18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	b004      	add	sp, #16
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	ffceff88 	.word	0xffceff88
 8005c28:	ffff00ff 	.word	0xffff00ff

08005c2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c34:	46c0      	nop			; (mov r8, r8)
 8005c36:	46bd      	mov	sp, r7
 8005c38:	b002      	add	sp, #8
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c44:	46c0      	nop			; (mov r8, r8)
 8005c46:	46bd      	mov	sp, r7
 8005c48:	b002      	add	sp, #8
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c54:	46c0      	nop			; (mov r8, r8)
 8005c56:	46bd      	mov	sp, r7
 8005c58:	b002      	add	sp, #8
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c64:	46c0      	nop			; (mov r8, r8)
 8005c66:	46bd      	mov	sp, r7
 8005c68:	b002      	add	sp, #8
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a2b      	ldr	r2, [pc, #172]	; (8005d2c <TIM_Base_SetConfig+0xc0>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d003      	beq.n	8005c8c <TIM_Base_SetConfig+0x20>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a2a      	ldr	r2, [pc, #168]	; (8005d30 <TIM_Base_SetConfig+0xc4>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d108      	bne.n	8005c9e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2270      	movs	r2, #112	; 0x70
 8005c90:	4393      	bics	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a22      	ldr	r2, [pc, #136]	; (8005d2c <TIM_Base_SetConfig+0xc0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d00f      	beq.n	8005cc6 <TIM_Base_SetConfig+0x5a>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a21      	ldr	r2, [pc, #132]	; (8005d30 <TIM_Base_SetConfig+0xc4>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d00b      	beq.n	8005cc6 <TIM_Base_SetConfig+0x5a>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a20      	ldr	r2, [pc, #128]	; (8005d34 <TIM_Base_SetConfig+0xc8>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d007      	beq.n	8005cc6 <TIM_Base_SetConfig+0x5a>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a1f      	ldr	r2, [pc, #124]	; (8005d38 <TIM_Base_SetConfig+0xcc>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d003      	beq.n	8005cc6 <TIM_Base_SetConfig+0x5a>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a1e      	ldr	r2, [pc, #120]	; (8005d3c <TIM_Base_SetConfig+0xd0>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d108      	bne.n	8005cd8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	4a1d      	ldr	r2, [pc, #116]	; (8005d40 <TIM_Base_SetConfig+0xd4>)
 8005cca:	4013      	ands	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2280      	movs	r2, #128	; 0x80
 8005cdc:	4393      	bics	r3, r2
 8005cde:	001a      	movs	r2, r3
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	689a      	ldr	r2, [r3, #8]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a0a      	ldr	r2, [pc, #40]	; (8005d2c <TIM_Base_SetConfig+0xc0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d007      	beq.n	8005d16 <TIM_Base_SetConfig+0xaa>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a0b      	ldr	r2, [pc, #44]	; (8005d38 <TIM_Base_SetConfig+0xcc>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d003      	beq.n	8005d16 <TIM_Base_SetConfig+0xaa>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a0a      	ldr	r2, [pc, #40]	; (8005d3c <TIM_Base_SetConfig+0xd0>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d103      	bne.n	8005d1e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	691a      	ldr	r2, [r3, #16]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	615a      	str	r2, [r3, #20]
}
 8005d24:	46c0      	nop			; (mov r8, r8)
 8005d26:	46bd      	mov	sp, r7
 8005d28:	b004      	add	sp, #16
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	40012c00 	.word	0x40012c00
 8005d30:	40000400 	.word	0x40000400
 8005d34:	40002000 	.word	0x40002000
 8005d38:	40014400 	.word	0x40014400
 8005d3c:	40014800 	.word	0x40014800
 8005d40:	fffffcff 	.word	0xfffffcff

08005d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	4393      	bics	r3, r2
 8005d5e:	001a      	movs	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	22f0      	movs	r2, #240	; 0xf0
 8005d6e:	4393      	bics	r3, r2
 8005d70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	011b      	lsls	r3, r3, #4
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	220a      	movs	r2, #10
 8005d80:	4393      	bics	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	621a      	str	r2, [r3, #32]
}
 8005d98:	46c0      	nop			; (mov r8, r8)
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	b006      	add	sp, #24
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	2210      	movs	r2, #16
 8005db2:	4393      	bics	r3, r2
 8005db4:	001a      	movs	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	4a0d      	ldr	r2, [pc, #52]	; (8005e00 <TIM_TI2_ConfigInputStage+0x60>)
 8005dca:	4013      	ands	r3, r2
 8005dcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	031b      	lsls	r3, r3, #12
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	22a0      	movs	r2, #160	; 0xa0
 8005ddc:	4393      	bics	r3, r2
 8005dde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	011b      	lsls	r3, r3, #4
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	621a      	str	r2, [r3, #32]
}
 8005df6:	46c0      	nop			; (mov r8, r8)
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	b006      	add	sp, #24
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	46c0      	nop			; (mov r8, r8)
 8005e00:	ffff0fff 	.word	0xffff0fff

08005e04 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4a08      	ldr	r2, [pc, #32]	; (8005e38 <TIM_ITRx_SetConfig+0x34>)
 8005e18:	4013      	ands	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e1c:	683a      	ldr	r2, [r7, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	2207      	movs	r2, #7
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	609a      	str	r2, [r3, #8]
}
 8005e2e:	46c0      	nop			; (mov r8, r8)
 8005e30:	46bd      	mov	sp, r7
 8005e32:	b004      	add	sp, #16
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	46c0      	nop			; (mov r8, r8)
 8005e38:	ffcfff8f 	.word	0xffcfff8f

08005e3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
 8005e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	4a09      	ldr	r2, [pc, #36]	; (8005e78 <TIM_ETR_SetConfig+0x3c>)
 8005e54:	4013      	ands	r3, r2
 8005e56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	021a      	lsls	r2, r3, #8
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	609a      	str	r2, [r3, #8]
}
 8005e70:	46c0      	nop			; (mov r8, r8)
 8005e72:	46bd      	mov	sp, r7
 8005e74:	b006      	add	sp, #24
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	ffff00ff 	.word	0xffff00ff

08005e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	223c      	movs	r2, #60	; 0x3c
 8005e8a:	5c9b      	ldrb	r3, [r3, r2]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d101      	bne.n	8005e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e90:	2302      	movs	r3, #2
 8005e92:	e04a      	b.n	8005f2a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	223c      	movs	r2, #60	; 0x3c
 8005e98:	2101      	movs	r1, #1
 8005e9a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	223d      	movs	r2, #61	; 0x3d
 8005ea0:	2102      	movs	r1, #2
 8005ea2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a1e      	ldr	r2, [pc, #120]	; (8005f34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d108      	bne.n	8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	4a1d      	ldr	r2, [pc, #116]	; (8005f38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2270      	movs	r2, #112	; 0x70
 8005ed4:	4393      	bics	r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a11      	ldr	r2, [pc, #68]	; (8005f34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d004      	beq.n	8005efe <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a10      	ldr	r2, [pc, #64]	; (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d10c      	bne.n	8005f18 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	2280      	movs	r2, #128	; 0x80
 8005f02:	4393      	bics	r3, r2
 8005f04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	223d      	movs	r2, #61	; 0x3d
 8005f1c:	2101      	movs	r1, #1
 8005f1e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	223c      	movs	r2, #60	; 0x3c
 8005f24:	2100      	movs	r1, #0
 8005f26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	0018      	movs	r0, r3
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	b004      	add	sp, #16
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	46c0      	nop			; (mov r8, r8)
 8005f34:	40012c00 	.word	0x40012c00
 8005f38:	ff0fffff 	.word	0xff0fffff
 8005f3c:	40000400 	.word	0x40000400

08005f40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f48:	46c0      	nop			; (mov r8, r8)
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	b002      	add	sp, #8
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f58:	46c0      	nop			; (mov r8, r8)
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	b002      	add	sp, #8
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f68:	46c0      	nop			; (mov r8, r8)
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	b002      	add	sp, #8
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <__libc_init_array>:
 8005f70:	b570      	push	{r4, r5, r6, lr}
 8005f72:	2600      	movs	r6, #0
 8005f74:	4d0c      	ldr	r5, [pc, #48]	; (8005fa8 <__libc_init_array+0x38>)
 8005f76:	4c0d      	ldr	r4, [pc, #52]	; (8005fac <__libc_init_array+0x3c>)
 8005f78:	1b64      	subs	r4, r4, r5
 8005f7a:	10a4      	asrs	r4, r4, #2
 8005f7c:	42a6      	cmp	r6, r4
 8005f7e:	d109      	bne.n	8005f94 <__libc_init_array+0x24>
 8005f80:	2600      	movs	r6, #0
 8005f82:	f000 fa07 	bl	8006394 <_init>
 8005f86:	4d0a      	ldr	r5, [pc, #40]	; (8005fb0 <__libc_init_array+0x40>)
 8005f88:	4c0a      	ldr	r4, [pc, #40]	; (8005fb4 <__libc_init_array+0x44>)
 8005f8a:	1b64      	subs	r4, r4, r5
 8005f8c:	10a4      	asrs	r4, r4, #2
 8005f8e:	42a6      	cmp	r6, r4
 8005f90:	d105      	bne.n	8005f9e <__libc_init_array+0x2e>
 8005f92:	bd70      	pop	{r4, r5, r6, pc}
 8005f94:	00b3      	lsls	r3, r6, #2
 8005f96:	58eb      	ldr	r3, [r5, r3]
 8005f98:	4798      	blx	r3
 8005f9a:	3601      	adds	r6, #1
 8005f9c:	e7ee      	b.n	8005f7c <__libc_init_array+0xc>
 8005f9e:	00b3      	lsls	r3, r6, #2
 8005fa0:	58eb      	ldr	r3, [r5, r3]
 8005fa2:	4798      	blx	r3
 8005fa4:	3601      	adds	r6, #1
 8005fa6:	e7f2      	b.n	8005f8e <__libc_init_array+0x1e>
 8005fa8:	080064e8 	.word	0x080064e8
 8005fac:	080064e8 	.word	0x080064e8
 8005fb0:	080064e8 	.word	0x080064e8
 8005fb4:	080064ec 	.word	0x080064ec

08005fb8 <memset>:
 8005fb8:	0003      	movs	r3, r0
 8005fba:	1882      	adds	r2, r0, r2
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d100      	bne.n	8005fc2 <memset+0xa>
 8005fc0:	4770      	bx	lr
 8005fc2:	7019      	strb	r1, [r3, #0]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	e7f9      	b.n	8005fbc <memset+0x4>

08005fc8 <swapfunc>:
 8005fc8:	b530      	push	{r4, r5, lr}
 8005fca:	2400      	movs	r4, #0
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d009      	beq.n	8005fe4 <swapfunc+0x1c>
 8005fd0:	0892      	lsrs	r2, r2, #2
 8005fd2:	5903      	ldr	r3, [r0, r4]
 8005fd4:	590d      	ldr	r5, [r1, r4]
 8005fd6:	3a01      	subs	r2, #1
 8005fd8:	5105      	str	r5, [r0, r4]
 8005fda:	510b      	str	r3, [r1, r4]
 8005fdc:	3404      	adds	r4, #4
 8005fde:	2a00      	cmp	r2, #0
 8005fe0:	dcf7      	bgt.n	8005fd2 <swapfunc+0xa>
 8005fe2:	bd30      	pop	{r4, r5, pc}
 8005fe4:	5d03      	ldrb	r3, [r0, r4]
 8005fe6:	5d0d      	ldrb	r5, [r1, r4]
 8005fe8:	5505      	strb	r5, [r0, r4]
 8005fea:	550b      	strb	r3, [r1, r4]
 8005fec:	3401      	adds	r4, #1
 8005fee:	1b13      	subs	r3, r2, r4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	dcf7      	bgt.n	8005fe4 <swapfunc+0x1c>
 8005ff4:	e7f5      	b.n	8005fe2 <swapfunc+0x1a>

08005ff6 <med3.isra.0>:
 8005ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff8:	000f      	movs	r7, r1
 8005ffa:	0014      	movs	r4, r2
 8005ffc:	0006      	movs	r6, r0
 8005ffe:	001d      	movs	r5, r3
 8006000:	4798      	blx	r3
 8006002:	0021      	movs	r1, r4
 8006004:	2800      	cmp	r0, #0
 8006006:	da0d      	bge.n	8006024 <med3.isra.0+0x2e>
 8006008:	0038      	movs	r0, r7
 800600a:	47a8      	blx	r5
 800600c:	2800      	cmp	r0, #0
 800600e:	da02      	bge.n	8006016 <med3.isra.0+0x20>
 8006010:	003c      	movs	r4, r7
 8006012:	0020      	movs	r0, r4
 8006014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006016:	0021      	movs	r1, r4
 8006018:	0030      	movs	r0, r6
 800601a:	47a8      	blx	r5
 800601c:	2800      	cmp	r0, #0
 800601e:	dbf8      	blt.n	8006012 <med3.isra.0+0x1c>
 8006020:	0034      	movs	r4, r6
 8006022:	e7f6      	b.n	8006012 <med3.isra.0+0x1c>
 8006024:	0038      	movs	r0, r7
 8006026:	47a8      	blx	r5
 8006028:	2800      	cmp	r0, #0
 800602a:	dcf1      	bgt.n	8006010 <med3.isra.0+0x1a>
 800602c:	0021      	movs	r1, r4
 800602e:	0030      	movs	r0, r6
 8006030:	47a8      	blx	r5
 8006032:	2800      	cmp	r0, #0
 8006034:	daed      	bge.n	8006012 <med3.isra.0+0x1c>
 8006036:	e7f3      	b.n	8006020 <med3.isra.0+0x2a>

08006038 <qsort>:
 8006038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800603a:	b099      	sub	sp, #100	; 0x64
 800603c:	9303      	str	r3, [sp, #12]
 800603e:	0003      	movs	r3, r0
 8006040:	0016      	movs	r6, r2
 8006042:	4313      	orrs	r3, r2
 8006044:	2202      	movs	r2, #2
 8006046:	9000      	str	r0, [sp, #0]
 8006048:	9201      	str	r2, [sp, #4]
 800604a:	079b      	lsls	r3, r3, #30
 800604c:	d104      	bne.n	8006058 <qsort+0x20>
 800604e:	1f33      	subs	r3, r6, #4
 8006050:	001a      	movs	r2, r3
 8006052:	1e53      	subs	r3, r2, #1
 8006054:	419a      	sbcs	r2, r3
 8006056:	9201      	str	r2, [sp, #4]
 8006058:	2300      	movs	r3, #0
 800605a:	9304      	str	r3, [sp, #16]
 800605c:	0037      	movs	r7, r6
 800605e:	9b00      	ldr	r3, [sp, #0]
 8006060:	434f      	muls	r7, r1
 8006062:	199b      	adds	r3, r3, r6
 8006064:	9302      	str	r3, [sp, #8]
 8006066:	9b00      	ldr	r3, [sp, #0]
 8006068:	19db      	adds	r3, r3, r7
 800606a:	9306      	str	r3, [sp, #24]
 800606c:	2906      	cmp	r1, #6
 800606e:	d828      	bhi.n	80060c2 <qsort+0x8a>
 8006070:	9b02      	ldr	r3, [sp, #8]
 8006072:	9a06      	ldr	r2, [sp, #24]
 8006074:	4293      	cmp	r3, r2
 8006076:	d30c      	bcc.n	8006092 <qsort+0x5a>
 8006078:	9b04      	ldr	r3, [sp, #16]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d000      	beq.n	8006080 <qsort+0x48>
 800607e:	e127      	b.n	80062d0 <qsort+0x298>
 8006080:	b019      	add	sp, #100	; 0x64
 8006082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006084:	0032      	movs	r2, r6
 8006086:	0029      	movs	r1, r5
 8006088:	0020      	movs	r0, r4
 800608a:	9b01      	ldr	r3, [sp, #4]
 800608c:	f7ff ff9c 	bl	8005fc8 <swapfunc>
 8006090:	e00f      	b.n	80060b2 <qsort+0x7a>
 8006092:	9c02      	ldr	r4, [sp, #8]
 8006094:	e00e      	b.n	80060b4 <qsort+0x7c>
 8006096:	1ba5      	subs	r5, r4, r6
 8006098:	0021      	movs	r1, r4
 800609a:	0028      	movs	r0, r5
 800609c:	9b03      	ldr	r3, [sp, #12]
 800609e:	4798      	blx	r3
 80060a0:	2800      	cmp	r0, #0
 80060a2:	dd0a      	ble.n	80060ba <qsort+0x82>
 80060a4:	9b01      	ldr	r3, [sp, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1ec      	bne.n	8006084 <qsort+0x4c>
 80060aa:	6823      	ldr	r3, [r4, #0]
 80060ac:	682a      	ldr	r2, [r5, #0]
 80060ae:	6022      	str	r2, [r4, #0]
 80060b0:	602b      	str	r3, [r5, #0]
 80060b2:	002c      	movs	r4, r5
 80060b4:	9b00      	ldr	r3, [sp, #0]
 80060b6:	42a3      	cmp	r3, r4
 80060b8:	d3ed      	bcc.n	8006096 <qsort+0x5e>
 80060ba:	9b02      	ldr	r3, [sp, #8]
 80060bc:	199b      	adds	r3, r3, r6
 80060be:	9302      	str	r3, [sp, #8]
 80060c0:	e7d6      	b.n	8006070 <qsort+0x38>
 80060c2:	084d      	lsrs	r5, r1, #1
 80060c4:	4375      	muls	r5, r6
 80060c6:	9b00      	ldr	r3, [sp, #0]
 80060c8:	1bbf      	subs	r7, r7, r6
 80060ca:	195d      	adds	r5, r3, r5
 80060cc:	19df      	adds	r7, r3, r7
 80060ce:	2907      	cmp	r1, #7
 80060d0:	d020      	beq.n	8006114 <qsort+0xdc>
 80060d2:	2928      	cmp	r1, #40	; 0x28
 80060d4:	d941      	bls.n	800615a <qsort+0x122>
 80060d6:	08c9      	lsrs	r1, r1, #3
 80060d8:	4371      	muls	r1, r6
 80060da:	000c      	movs	r4, r1
 80060dc:	1859      	adds	r1, r3, r1
 80060de:	190a      	adds	r2, r1, r4
 80060e0:	9b03      	ldr	r3, [sp, #12]
 80060e2:	9800      	ldr	r0, [sp, #0]
 80060e4:	f7ff ff87 	bl	8005ff6 <med3.isra.0>
 80060e8:	0029      	movs	r1, r5
 80060ea:	192a      	adds	r2, r5, r4
 80060ec:	9b03      	ldr	r3, [sp, #12]
 80060ee:	9005      	str	r0, [sp, #20]
 80060f0:	1b28      	subs	r0, r5, r4
 80060f2:	f7ff ff80 	bl	8005ff6 <med3.isra.0>
 80060f6:	0005      	movs	r5, r0
 80060f8:	0060      	lsls	r0, r4, #1
 80060fa:	1a38      	subs	r0, r7, r0
 80060fc:	003a      	movs	r2, r7
 80060fe:	9b03      	ldr	r3, [sp, #12]
 8006100:	1901      	adds	r1, r0, r4
 8006102:	f7ff ff78 	bl	8005ff6 <med3.isra.0>
 8006106:	0002      	movs	r2, r0
 8006108:	0029      	movs	r1, r5
 800610a:	9b03      	ldr	r3, [sp, #12]
 800610c:	9805      	ldr	r0, [sp, #20]
 800610e:	f7ff ff72 	bl	8005ff6 <med3.isra.0>
 8006112:	0005      	movs	r5, r0
 8006114:	9b01      	ldr	r3, [sp, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d123      	bne.n	8006162 <qsort+0x12a>
 800611a:	9b00      	ldr	r3, [sp, #0]
 800611c:	6829      	ldr	r1, [r5, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	9a00      	ldr	r2, [sp, #0]
 8006122:	6011      	str	r1, [r2, #0]
 8006124:	602b      	str	r3, [r5, #0]
 8006126:	9d02      	ldr	r5, [sp, #8]
 8006128:	2300      	movs	r3, #0
 800612a:	002c      	movs	r4, r5
 800612c:	9705      	str	r7, [sp, #20]
 800612e:	9307      	str	r3, [sp, #28]
 8006130:	42bd      	cmp	r5, r7
 8006132:	d838      	bhi.n	80061a6 <qsort+0x16e>
 8006134:	0028      	movs	r0, r5
 8006136:	9900      	ldr	r1, [sp, #0]
 8006138:	9b03      	ldr	r3, [sp, #12]
 800613a:	4798      	blx	r3
 800613c:	2800      	cmp	r0, #0
 800613e:	dc43      	bgt.n	80061c8 <qsort+0x190>
 8006140:	d109      	bne.n	8006156 <qsort+0x11e>
 8006142:	9b01      	ldr	r3, [sp, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d113      	bne.n	8006170 <qsort+0x138>
 8006148:	6823      	ldr	r3, [r4, #0]
 800614a:	682a      	ldr	r2, [r5, #0]
 800614c:	6022      	str	r2, [r4, #0]
 800614e:	602b      	str	r3, [r5, #0]
 8006150:	19a4      	adds	r4, r4, r6
 8006152:	2301      	movs	r3, #1
 8006154:	9307      	str	r3, [sp, #28]
 8006156:	19ad      	adds	r5, r5, r6
 8006158:	e7ea      	b.n	8006130 <qsort+0xf8>
 800615a:	9b00      	ldr	r3, [sp, #0]
 800615c:	003a      	movs	r2, r7
 800615e:	9305      	str	r3, [sp, #20]
 8006160:	e7d2      	b.n	8006108 <qsort+0xd0>
 8006162:	0032      	movs	r2, r6
 8006164:	0029      	movs	r1, r5
 8006166:	9b01      	ldr	r3, [sp, #4]
 8006168:	9800      	ldr	r0, [sp, #0]
 800616a:	f7ff ff2d 	bl	8005fc8 <swapfunc>
 800616e:	e7da      	b.n	8006126 <qsort+0xee>
 8006170:	0032      	movs	r2, r6
 8006172:	0029      	movs	r1, r5
 8006174:	0020      	movs	r0, r4
 8006176:	9b01      	ldr	r3, [sp, #4]
 8006178:	f7ff ff26 	bl	8005fc8 <swapfunc>
 800617c:	e7e8      	b.n	8006150 <qsort+0x118>
 800617e:	2800      	cmp	r0, #0
 8006180:	d10e      	bne.n	80061a0 <qsort+0x168>
 8006182:	9b01      	ldr	r3, [sp, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d118      	bne.n	80061ba <qsort+0x182>
 8006188:	9a05      	ldr	r2, [sp, #20]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	6812      	ldr	r2, [r2, #0]
 800618e:	603a      	str	r2, [r7, #0]
 8006190:	9207      	str	r2, [sp, #28]
 8006192:	9a05      	ldr	r2, [sp, #20]
 8006194:	6013      	str	r3, [r2, #0]
 8006196:	9b05      	ldr	r3, [sp, #20]
 8006198:	1b9b      	subs	r3, r3, r6
 800619a:	9305      	str	r3, [sp, #20]
 800619c:	2301      	movs	r3, #1
 800619e:	9307      	str	r3, [sp, #28]
 80061a0:	1bbf      	subs	r7, r7, r6
 80061a2:	42af      	cmp	r7, r5
 80061a4:	d210      	bcs.n	80061c8 <qsort+0x190>
 80061a6:	9b07      	ldr	r3, [sp, #28]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d140      	bne.n	800622e <qsort+0x1f6>
 80061ac:	9b02      	ldr	r3, [sp, #8]
 80061ae:	9a06      	ldr	r2, [sp, #24]
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d300      	bcc.n	80061b6 <qsort+0x17e>
 80061b4:	e760      	b.n	8006078 <qsort+0x40>
 80061b6:	9c02      	ldr	r4, [sp, #8]
 80061b8:	e032      	b.n	8006220 <qsort+0x1e8>
 80061ba:	0032      	movs	r2, r6
 80061bc:	0038      	movs	r0, r7
 80061be:	9b01      	ldr	r3, [sp, #4]
 80061c0:	9905      	ldr	r1, [sp, #20]
 80061c2:	f7ff ff01 	bl	8005fc8 <swapfunc>
 80061c6:	e7e6      	b.n	8006196 <qsort+0x15e>
 80061c8:	0038      	movs	r0, r7
 80061ca:	9900      	ldr	r1, [sp, #0]
 80061cc:	9b03      	ldr	r3, [sp, #12]
 80061ce:	4798      	blx	r3
 80061d0:	2800      	cmp	r0, #0
 80061d2:	dad4      	bge.n	800617e <qsort+0x146>
 80061d4:	9b01      	ldr	r3, [sp, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d006      	beq.n	80061e8 <qsort+0x1b0>
 80061da:	0032      	movs	r2, r6
 80061dc:	0039      	movs	r1, r7
 80061de:	0028      	movs	r0, r5
 80061e0:	9b01      	ldr	r3, [sp, #4]
 80061e2:	f7ff fef1 	bl	8005fc8 <swapfunc>
 80061e6:	e003      	b.n	80061f0 <qsort+0x1b8>
 80061e8:	682b      	ldr	r3, [r5, #0]
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	602a      	str	r2, [r5, #0]
 80061ee:	603b      	str	r3, [r7, #0]
 80061f0:	1bbf      	subs	r7, r7, r6
 80061f2:	e7ae      	b.n	8006152 <qsort+0x11a>
 80061f4:	0032      	movs	r2, r6
 80061f6:	0029      	movs	r1, r5
 80061f8:	0020      	movs	r0, r4
 80061fa:	9b01      	ldr	r3, [sp, #4]
 80061fc:	f7ff fee4 	bl	8005fc8 <swapfunc>
 8006200:	e00d      	b.n	800621e <qsort+0x1e6>
 8006202:	1ba5      	subs	r5, r4, r6
 8006204:	0021      	movs	r1, r4
 8006206:	0028      	movs	r0, r5
 8006208:	9b03      	ldr	r3, [sp, #12]
 800620a:	4798      	blx	r3
 800620c:	2800      	cmp	r0, #0
 800620e:	dd0a      	ble.n	8006226 <qsort+0x1ee>
 8006210:	9b01      	ldr	r3, [sp, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1ee      	bne.n	80061f4 <qsort+0x1bc>
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	682a      	ldr	r2, [r5, #0]
 800621a:	6022      	str	r2, [r4, #0]
 800621c:	602b      	str	r3, [r5, #0]
 800621e:	002c      	movs	r4, r5
 8006220:	9b00      	ldr	r3, [sp, #0]
 8006222:	42a3      	cmp	r3, r4
 8006224:	d3ed      	bcc.n	8006202 <qsort+0x1ca>
 8006226:	9b02      	ldr	r3, [sp, #8]
 8006228:	199b      	adds	r3, r3, r6
 800622a:	9302      	str	r3, [sp, #8]
 800622c:	e7be      	b.n	80061ac <qsort+0x174>
 800622e:	1b2b      	subs	r3, r5, r4
 8006230:	9302      	str	r3, [sp, #8]
 8006232:	9b00      	ldr	r3, [sp, #0]
 8006234:	1ae2      	subs	r2, r4, r3
 8006236:	9b02      	ldr	r3, [sp, #8]
 8006238:	429a      	cmp	r2, r3
 800623a:	dd00      	ble.n	800623e <qsort+0x206>
 800623c:	001a      	movs	r2, r3
 800623e:	2a00      	cmp	r2, #0
 8006240:	d004      	beq.n	800624c <qsort+0x214>
 8006242:	9b01      	ldr	r3, [sp, #4]
 8006244:	9800      	ldr	r0, [sp, #0]
 8006246:	1aa9      	subs	r1, r5, r2
 8006248:	f7ff febe 	bl	8005fc8 <swapfunc>
 800624c:	9b05      	ldr	r3, [sp, #20]
 800624e:	9a05      	ldr	r2, [sp, #20]
 8006250:	1bdc      	subs	r4, r3, r7
 8006252:	9b06      	ldr	r3, [sp, #24]
 8006254:	1a9a      	subs	r2, r3, r2
 8006256:	1b92      	subs	r2, r2, r6
 8006258:	42a2      	cmp	r2, r4
 800625a:	d900      	bls.n	800625e <qsort+0x226>
 800625c:	0022      	movs	r2, r4
 800625e:	2a00      	cmp	r2, #0
 8006260:	d005      	beq.n	800626e <qsort+0x236>
 8006262:	9b06      	ldr	r3, [sp, #24]
 8006264:	0028      	movs	r0, r5
 8006266:	1a99      	subs	r1, r3, r2
 8006268:	9b01      	ldr	r3, [sp, #4]
 800626a:	f7ff fead 	bl	8005fc8 <swapfunc>
 800626e:	9b06      	ldr	r3, [sp, #24]
 8006270:	9d02      	ldr	r5, [sp, #8]
 8006272:	1b1f      	subs	r7, r3, r4
 8006274:	42ac      	cmp	r4, r5
 8006276:	d904      	bls.n	8006282 <qsort+0x24a>
 8006278:	9b00      	ldr	r3, [sp, #0]
 800627a:	9700      	str	r7, [sp, #0]
 800627c:	001f      	movs	r7, r3
 800627e:	0025      	movs	r5, r4
 8006280:	9c02      	ldr	r4, [sp, #8]
 8006282:	42b4      	cmp	r4, r6
 8006284:	d92d      	bls.n	80062e2 <qsort+0x2aa>
 8006286:	9b04      	ldr	r3, [sp, #16]
 8006288:	2b07      	cmp	r3, #7
 800628a:	d815      	bhi.n	80062b8 <qsort+0x280>
 800628c:	9900      	ldr	r1, [sp, #0]
 800628e:	aa08      	add	r2, sp, #32
 8006290:	00db      	lsls	r3, r3, #3
 8006292:	5099      	str	r1, [r3, r2]
 8006294:	0028      	movs	r0, r5
 8006296:	189b      	adds	r3, r3, r2
 8006298:	0031      	movs	r1, r6
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	f7f9 ff30 	bl	8000100 <__udivsi3>
 80062a0:	9b00      	ldr	r3, [sp, #0]
 80062a2:	0031      	movs	r1, r6
 80062a4:	6058      	str	r0, [r3, #4]
 80062a6:	9b04      	ldr	r3, [sp, #16]
 80062a8:	0020      	movs	r0, r4
 80062aa:	3301      	adds	r3, #1
 80062ac:	9304      	str	r3, [sp, #16]
 80062ae:	f7f9 ff27 	bl	8000100 <__udivsi3>
 80062b2:	0001      	movs	r1, r0
 80062b4:	9700      	str	r7, [sp, #0]
 80062b6:	e6d1      	b.n	800605c <qsort+0x24>
 80062b8:	0031      	movs	r1, r6
 80062ba:	0020      	movs	r0, r4
 80062bc:	f7f9 ff20 	bl	8000100 <__udivsi3>
 80062c0:	0032      	movs	r2, r6
 80062c2:	0001      	movs	r1, r0
 80062c4:	9b03      	ldr	r3, [sp, #12]
 80062c6:	0038      	movs	r0, r7
 80062c8:	f7ff feb6 	bl	8006038 <qsort>
 80062cc:	42b5      	cmp	r5, r6
 80062ce:	d80b      	bhi.n	80062e8 <qsort+0x2b0>
 80062d0:	9b04      	ldr	r3, [sp, #16]
 80062d2:	aa08      	add	r2, sp, #32
 80062d4:	3b01      	subs	r3, #1
 80062d6:	9304      	str	r3, [sp, #16]
 80062d8:	00db      	lsls	r3, r3, #3
 80062da:	589f      	ldr	r7, [r3, r2]
 80062dc:	189b      	adds	r3, r3, r2
 80062de:	6859      	ldr	r1, [r3, #4]
 80062e0:	e7e8      	b.n	80062b4 <qsort+0x27c>
 80062e2:	42b5      	cmp	r5, r6
 80062e4:	d800      	bhi.n	80062e8 <qsort+0x2b0>
 80062e6:	e6c7      	b.n	8006078 <qsort+0x40>
 80062e8:	0031      	movs	r1, r6
 80062ea:	0028      	movs	r0, r5
 80062ec:	f7f9 ff08 	bl	8000100 <__udivsi3>
 80062f0:	9f00      	ldr	r7, [sp, #0]
 80062f2:	0001      	movs	r1, r0
 80062f4:	e7de      	b.n	80062b4 <qsort+0x27c>
	...

080062f8 <round>:
 80062f8:	b570      	push	{r4, r5, r6, lr}
 80062fa:	000d      	movs	r5, r1
 80062fc:	0006      	movs	r6, r0
 80062fe:	0001      	movs	r1, r0
 8006300:	006a      	lsls	r2, r5, #1
 8006302:	4820      	ldr	r0, [pc, #128]	; (8006384 <round+0x8c>)
 8006304:	0d52      	lsrs	r2, r2, #21
 8006306:	1810      	adds	r0, r2, r0
 8006308:	2813      	cmp	r0, #19
 800630a:	dc18      	bgt.n	800633e <round+0x46>
 800630c:	2800      	cmp	r0, #0
 800630e:	da09      	bge.n	8006324 <round+0x2c>
 8006310:	0feb      	lsrs	r3, r5, #31
 8006312:	2200      	movs	r2, #0
 8006314:	07db      	lsls	r3, r3, #31
 8006316:	1c41      	adds	r1, r0, #1
 8006318:	d101      	bne.n	800631e <round+0x26>
 800631a:	491b      	ldr	r1, [pc, #108]	; (8006388 <round+0x90>)
 800631c:	430b      	orrs	r3, r1
 800631e:	0019      	movs	r1, r3
 8006320:	0010      	movs	r0, r2
 8006322:	e018      	b.n	8006356 <round+0x5e>
 8006324:	4c19      	ldr	r4, [pc, #100]	; (800638c <round+0x94>)
 8006326:	4104      	asrs	r4, r0
 8006328:	0022      	movs	r2, r4
 800632a:	402a      	ands	r2, r5
 800632c:	4311      	orrs	r1, r2
 800632e:	d014      	beq.n	800635a <round+0x62>
 8006330:	2280      	movs	r2, #128	; 0x80
 8006332:	0312      	lsls	r2, r2, #12
 8006334:	4102      	asrs	r2, r0
 8006336:	1953      	adds	r3, r2, r5
 8006338:	43a3      	bics	r3, r4
 800633a:	2200      	movs	r2, #0
 800633c:	e7ef      	b.n	800631e <round+0x26>
 800633e:	2833      	cmp	r0, #51	; 0x33
 8006340:	dd0e      	ble.n	8006360 <round+0x68>
 8006342:	2380      	movs	r3, #128	; 0x80
 8006344:	00db      	lsls	r3, r3, #3
 8006346:	4298      	cmp	r0, r3
 8006348:	d107      	bne.n	800635a <round+0x62>
 800634a:	0032      	movs	r2, r6
 800634c:	002b      	movs	r3, r5
 800634e:	0030      	movs	r0, r6
 8006350:	0029      	movs	r1, r5
 8006352:	f7fa f873 	bl	800043c <__aeabi_dadd>
 8006356:	0006      	movs	r6, r0
 8006358:	000d      	movs	r5, r1
 800635a:	0030      	movs	r0, r6
 800635c:	0029      	movs	r1, r5
 800635e:	bd70      	pop	{r4, r5, r6, pc}
 8006360:	4c0b      	ldr	r4, [pc, #44]	; (8006390 <round+0x98>)
 8006362:	1912      	adds	r2, r2, r4
 8006364:	2401      	movs	r4, #1
 8006366:	4264      	negs	r4, r4
 8006368:	40d4      	lsrs	r4, r2
 800636a:	4234      	tst	r4, r6
 800636c:	d0f5      	beq.n	800635a <round+0x62>
 800636e:	2233      	movs	r2, #51	; 0x33
 8006370:	1a10      	subs	r0, r2, r0
 8006372:	3a32      	subs	r2, #50	; 0x32
 8006374:	4082      	lsls	r2, r0
 8006376:	1992      	adds	r2, r2, r6
 8006378:	42b2      	cmp	r2, r6
 800637a:	4189      	sbcs	r1, r1
 800637c:	4249      	negs	r1, r1
 800637e:	186b      	adds	r3, r5, r1
 8006380:	43a2      	bics	r2, r4
 8006382:	e7cc      	b.n	800631e <round+0x26>
 8006384:	fffffc01 	.word	0xfffffc01
 8006388:	3ff00000 	.word	0x3ff00000
 800638c:	000fffff 	.word	0x000fffff
 8006390:	fffffbed 	.word	0xfffffbed

08006394 <_init>:
 8006394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006396:	46c0      	nop			; (mov r8, r8)
 8006398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800639a:	bc08      	pop	{r3}
 800639c:	469e      	mov	lr, r3
 800639e:	4770      	bx	lr

080063a0 <_fini>:
 80063a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a2:	46c0      	nop			; (mov r8, r8)
 80063a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063a6:	bc08      	pop	{r3}
 80063a8:	469e      	mov	lr, r3
 80063aa:	4770      	bx	lr
